"""
This module was generated by fastidious:

    /home/franck/.anaconda3/lib/python3.7/site-packages/fastidious-0.1.dev0-py3.7.egg/fastidious/__main__.py generate -o zinc/io/znparse.py zinc.io.zn_peg.ZnParser

DO NOT EDIT BY HAND unless you know what you do.

More info at https://github.com/lisael/fastidious
"""

# coding: utf-8

from .. import ZINCError
import ast, collections, functools

import re

if not hasattr(__builtins__, 'basestring'):
    basestring = str


class _Expr:
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            self.__dict__[k] = v


class ZnParser(object):
    __default__ = 'INPUT'
    class ParserError(Exception):
        pass

    __default__ = "INPUT"
    __grammar__ = r"""
    INPUT     <- NL? :spec {@spec}
    NL        <- ~"([\t ]*(#.*)?\n)+" {_drop}
    _         <- ~"[\t ]+"? {_drop}
    TAIL      <- ~".+" {p_flatten}
    COLON     <- _ ":" _ {_drop}
    COMMA     <- _ "," _ {p_flatten}
    AT        <- _ "@" _ {p_flatten}
    EQ        <- _ "=" _ {p_flatten}
    LT        <- _ "<" _ {p_flatten}
    GT        <- _ ">" _ {p_flatten}
    LP        <- _ "(" _ {p_flatten}
    RP        <- _ ")" _ {p_flatten}
    LSB       <- _ "[" _ {p_flatten}
    RSB       <- _ "]" _ {p_flatten}
    LCB       <- _ "{" _ {p_flatten}
    RCB       <- _ "}" _ {p_flatten}
    INDENT    <- _ "↦" NL? _ {_drop}
    DEDENT    <- _ "↤" NL? _ {_drop}
    LANG      <- _ "lang" _ {p_flatten}
    NET       <- _ "net" _ {p_flatten}
    PLACE     <- _ "place" _ {p_flatten}
    TRANS     <- _ "trans" _ {p_flatten}
    VAL       <- _ "val" _ {p_flatten}
    VAR       <- _ "var" _ {p_flatten}
    EXPR      <- _ "expr" _ {p_flatten}
    DECLARE   <- _ "declare" _ {p_flatten}
    FLUSHPLUS <- _ "flush+" _ {p_flatten}
    FLUSH     <- _ "flush" _ {p_flatten}
    FILL      <- _ "fill" _ {p_flatten}
    TEST      <- _ "?" _ {p_flatten}
    BANG      <- _ "!" _ {p_flatten}
    NUMBER    <- _ ~"[+-]?[0-9]+" {_number}
    NAME      <- _ ~"[a-z][a-z0-9_]*"i _ {p_flatten}
    text     <- name:NAME / :code / :string {_first}
    code     <-  codec / codeb {_code}
    codec    <- LCB (~"([^{}\\\\]|\\[{}])+" / codec)* RCB {p_flatten}
    codeb    <- LSB (~"([^\\[\\]\\\\]|\\[\\[\\]])+" / codeb)* RSB {p_flatten}
    string   <- _ ( ~"'{3}.*?'{3}"s
                  / ~'"{3}.*?"{3}'s
                  / ~"'([^'\\\\]|\\.)*'"
                  / ~'"([^"\\\\]|\\.)*"' ) _ {_string}
    """
    def _drop (self, match) :
        return ""
    def _number (self, match) :
        return int(self.p_flatten(match))
    def _code (self, match) :
        return (self.p_flatten(match).strip()[1:-1])
    def _string (self, match) :
        return ast.literal_eval(self.p_flatten(match).strip())
    def _tuple (self, match) :
        """callback to transform matched comma-separated tuples
        <- item (COMMA item)*
        => (item, ...)
        """
        lst = []
        for m in match :
            if isinstance(m, list) :
                lst.extend(i[1] for i in m)
            else :
                lst.append(m)
        return tuple(lst)
    def _tuple1 (self, match) :
        """callback to transform matched comma-separated tuples
        <- DELIM item (COMMA item)* DELIM
        => (item, ...)
        """
        lst = []
        for m in match[1:-1] :
            if isinstance(m, list) :
                lst.extend(i[1] for i in m)
            else :
                lst.append(m)
        return tuple(lst)
    def _first (self, match, **args) :
        for k, v in args.items() :
            if v is not self.NoMatch :
                return v
        return self.NoMatch
    __grammar__ += r"""
    spec <- LANG lang:text NL
            declare:decl*
            NET net:text COLON NL INDENT nodes:(place / trans)+ DEDENT
    """
    def on_spec (self, match, lang, declare, net, nodes) :
        try :
            net = self.n.PetriNet(net, lang)
        except ZINCError as err :
            self.p_parse_error(str(err))
        for lvl, decl in declare :
            net.declare(decl, lvl)
        for pos, node, *rest in nodes :
            if isinstance(node, self.n.Place) :
                try :
                    net.add_place(node)
                except ZINCError as err :
                    self.p_parse_error(str(err), pos)
            else :
                try :
                    net.add_transition(node)
                except ZINCError as err :
                    self.p_parse_error(str(err), pos)
                for arcs, add in zip(rest, (net.add_input, net.add_output)) :
                    for place, arc in arcs.items() :
                        try :
                            pos, label = arc[0]
                            if len(arc) == 1 :
                                add(place, node.name, label)
                            else :
                                add(place, node.name,
                                    self.n.MultiArc(*(lbl for _, lbl in arc)))
                        except ZINCError as err :
                            self.p_parse_error(str(err), pos)
        return net
    __grammar__ += r"""
    decl <- DECLARE (AT level:text)? source:text NL
    """
    def on_decl (self, match, source, level=None) :
        return level, source
    __grammar__ += r"""
    place      <- PLACE name:text type:placetype? (EQ tokens:tokens)? NL
    placetype  <- :text / :placetuple {_first}
    placetuple <- LP placeitem (COMMA placeitem)* RP {_tuple1}
    placeitem  <- :text / :placetuple {_first}
    tokens     <- tok (COMMA tok)* {_tuple}
    tok        <- number:NUMBER / :text {_first}
    """
    def on_place (self, match, name, type=None, tokens=[]) :
        return self.pos, self.n.Place(name, tokens, type)
    __grammar__ += r"""
    trans      <- TRANS name:text guard:(~"[^:]+")? COLON NL INDENT arcs:arc+ DEDENT
    arc        <- way:(LT / GT) place:text mod:arcmod? kind:arckind EQ label:TAIL NL
    arckind    <- VAL / VAR / EXPR / FLUSHPLUS / FLUSH / FILL / arctuple
    arcmod     <- kind:(TEST / BANG) guard:code?
    arctuple <- LP arcitem (COMMA arcitem)* RP {_tuple1}
    arcitem  <- :text / number:NUMBER / :arctuple {_first}
    """
    def on_trans (self, match, name, arcs, guard=None) :
        inputs, outputs = collections.defaultdict(list), collections.defaultdict(list)
        for pos, isin, place, label in arcs :
            if isin :
                inputs[place].append((pos, label))
            else :
                outputs[place].append((pos, label))
        return self.pos, self.n.Transition(name, guard), inputs, outputs
    def on_arc (self, match, way, place, kind, label, mod=None) :
        return self.pos, way == "<", place, self._mkarc(kind, label, mod)
    def _mkarc (self, kind, label, mod) :
        _arc = {"val" : self.n.Value,
                "var" : self.n.Variable,
                "expr" : self.n.Expression,
                "flush" : self.n.Flush,
                "flush+" : functools.partial(self.n.Flush, notempty=True),
                "fill" : self.n.Fill}
        def mktuple (kind, label) :
            if not isinstance(label, tuple) or len(kind) != len(label) :
                self.p_parse_error("unmatched tuples %r and %r" % (kind, label))
            return self.n.Tuple(*(mktuple(k, l) for k, l in zip(kind, label)))
        if isinstance(kind, tuple) :
            lbl = self.p_parse(label, "arctuple")
            label = mktuple(kind, lbl)
        elif kind in _arc :
            label = _arc[kind](label.strip())
        if mod :
            mod_kind, mod_guard = mod
            if mod_kind == "?" :
                label = self.n.Test(label)
            elif mod_kind == "!" :
                label = self.n.Inhibitor(label, mod_guard)
        return label

    def on_arcmod (self, match, kind, guard=None) :
        return kind, guard
    _p_py_constants = {597: {'regex': re.compile('([\t ]*(#.*)?\n)+', 32)}, 599: {'regex': re.compile('[\t ]+', 32)}, 602: {'regex': re.compile('.+', 32)}, 744: {'regex': re.compile('[+-]?[0-9]+', 32)}, 748: {'regex': re.compile('(?i)[a-z][a-z0-9_]*', 34)}, 765: {'regex': re.compile('([^{}\\\\]|\\[{}])+', 32)}, 773: {'regex': re.compile('([^\\[\\]\\\\]|\\[\\[\\]])+', 32)}, 781: {'regex': re.compile("(?s)'{3}.*?'{3}", 48)}, 782: {'regex': re.compile('(?s)"{3}.*?"{3}', 48)}, 783: {'regex': re.compile("'([^'\\\\]|\\.)*'", 32)}, 784: {'regex': re.compile('"([^"\\\\]|\\.)*"', 32)}, 872: {'regex': re.compile('[^:]+', 32)}}
    __memoize__ = True
    # __debug___ = True
    __debug___ = False
    __code_gen__ = True
    _p_action_classes = []

    class NoMatch(object):
        pass

    def __init__(self, input):
        self.input = input
        self.pos = 0
        self.last_pos = 0
        self.start = 0
        self.args_stack = {}
        self._debug_indent = 0
        self._p_savepoint_stack = []
        self._p_memoized = {}

        self._p_error_stack = [(0, 0)]
        if hasattr(self, "__INIT__"):
            self.__INIT__()

    def p_nomatch(self, id):
        head = self._p_error_stack[0]
        if self.pos <= head[0]:
            self._p_error_stack.append((self.pos, id))
        elif self.pos > head[0]:
            self._p_error_stack = [(self.pos, id)]

    def p_suffix(self, length=None, elipsis=False):
        "Return the rest of the input"
        if length is not None:
            result = self.input[self.pos:self.pos + length]
            if elipsis and len(result) == length:
                result += "..."
            return result
        return self.input[self.pos:]

    def p_debug(self, message):
        "Format and print debug messages"
        print("{}{} `{}`".format(self._debug_indent * " ",
                                 message, repr(self.p_suffix(10))))

    def p_peek(self):
        "return the next char, w/o consuming it"
        try:
            return self.input[self.pos]
        except IndexError:
            return None

    def p_next(self):
        "Consume and return the next char"
        try:
            self.pos += 1
            return self.input[self.pos - 1]
        except IndexError:
            self.pos -= 1
            return None

    def p_save(self):
        "Push a savepoint on the stack (internal use)"
        self._p_savepoint_stack.append((self.pos, self.start))

    def p_restore(self):
        """
        Pop a savepoint on the stack, and restore the parser state
        (internal use)
        """
        self.pos, self.start = self._p_savepoint_stack.pop()

    def p_discard(self):
        "Pop and forget a savepoint (internal use)"
        self.last_pos = self._p_savepoint_stack.pop()[0]

    def _p_get_line(self, pos):
        return self.input[:pos].count('\n') + 1

    @property
    def p_current_line(self):
        "Return current line number"
        return self._p_get_line(self.pos)

    @property
    def p_last_line(self):
        "Return last line number"
        return self._p_get_line(self.last_pos)

    def _p_get_col(self, pos):
        prefix = self.input[:pos]
        nlidx = prefix.rfind('\n')
        if nlidx == -1:
            return pos
        return pos - nlidx

    @property
    def p_current_col(self):
        "Return current column in line"
        return self._p_get_col(self.pos)

    @property
    def p_last_col(self):
        "Return last column in line"
        return self._p_get_col(self.last_pos)

    def p_pretty_pos(self, pos=None):
        "Print current line and a pretty cursor below. Used in error messages"
        if pos is None :
            pos = self.pos
        col = self._p_get_col(pos) - 1
        suffix = self.input[pos - col:]
        end = suffix.find("\n")
        if end != -1:
            suffix = suffix[:end]
        return "%s\n%s" % (suffix, "-" * col + "^")

    def p_parse_error(self, message, pos=None):
        if pos is None :
            pos = self.pos
        raise self.ParserError(
            "Error at line %s, col %s: %s" % (
                self._p_get_line(pos),
                self._p_get_col(pos) - 1,
                message
            )
        )

    def p_syntax_error(self, *expected):
        def prettify(i):
            if i.replace("_", "").isalnum():
                return i
            return "`%s`" % i
        expected = set(expected)
        expected = [prettify(item) for item in expected]
        expected = " or ".join(expected)
        raise self.ParserError(
            "Syntax error at line %s, col %s:"
            "\n\n%s\n\n"
            "Got `%s` expected %s "
            "" % (
                self.p_current_line,
                self.p_current_col - 1,
                self.p_pretty_pos(),
                self.p_suffix(10, elipsis=True).replace(
                    '\n', "\\n") or "EOF",
                expected)
        )

    def p_startswith(self, st, ignorecase=False):
        "Return True if the input starts with `st` at current position"
        length = len(st)
        matcher = result = self.input[self.pos:self.pos + length]
        if ignorecase:
            matcher = result.lower()
            st = st.lower()
        if matcher == st:
            self.pos += length
            return result
        return False

    def p_flatten(self, obj, **kwargs):
        """ Flatten a list of lists of lists... of strings into a string

        This is usually used as the action for sequence expressions:

        .. code-block::

            my_rule <- 'a' . 'c' {p_flatten}

        With the input "abc" and no action, this rule returns [ 'a', 'b', 'c'].
        { p_flatten } procuces "abc".

        >>> parser.p_flatten(['a', ['b', 'c']])
        'abc'

        """
        if isinstance(obj, basestring):
            return obj
        result = ""
        for i in obj:
            result += self.p_flatten(i)
        return result

    @classmethod
    def p_parse(cls, input, methodname=None, parse_all=True):
        """
        Parse the `input` using `methodname` as entry point.

        If `parse_all` is true, the input MUST be fully consumed at the end of
        the parsing, otherwise p_parse raises an exception.
        """
        if methodname is None:
            methodname = cls.__default__
        p = cls(input)
        result = getattr(p, methodname)()
        if result is cls.NoMatch or parse_all and p.p_peek() is not None:
            p.p_raise()
        return result

    def p_raise(self):
        expected = []
        current_pos = -1

        if self.__debug___:
            print(self._p_error_stack)

        # check aliased rules
        for pos, id in self._p_error_stack:
            if pos < current_pos:
                break
            try:
                expr = self._p_expressions[id]
            except KeyError:
                continue
            else:
                if expr.is_syntaxic_terminal:
                    current_pos = pos
                    expected += expr.expected

        # none found, fallback to default tips
        if not expected:
            current_pos = -1
            for pos, id in self._p_error_stack:
                if current_pos > -1 and pos < current_pos:
                    continue
                current_pos = pos
                try:
                    expr = self._p_expressions[id]
                except KeyError:
                    continue
                else:
                    if hasattr(expr, "expr") or hasattr(expr, "exprs"):
                        continue
                    expected += expr.expected
        self.pos = current_pos
        self.p_syntax_error(*expected)
    def INPUT(self):
        '''INPUT <- NL? spec:spec'''
        args = dict()
        # NL? spec:spec
        self.p_save()
        results_595 = []
        
        # NL?
        start_pos_591= self.pos
        if (-361559891970486465, start_pos_591) in self._p_memoized:
            result, self.pos = self._p_memoized[(-361559891970486465, self.pos)]
        else:
            result = self.NL()
            self._p_memoized[(-361559891970486465, start_pos_591)] = result, self.pos
        result = "" if result is self.NoMatch else result
        if result is self.NoMatch:
            # print self._p_error_stack
            self._p_error_stack.pop()
        if result is self.NoMatch:
            results_595 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 595))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 595)]
            # print self._p_error_stack
        else:
            results_595.append(result)
                            
            
            # spec:spec
            start_pos_593= self.pos
            if (-8172558637032129896, start_pos_593) in self._p_memoized:
                result, self.pos = self._p_memoized[(-8172558637032129896, self.pos)]
            else:
                result = self.spec()
                self._p_memoized[(-8172558637032129896, start_pos_593)] = result, self.pos
            args['spec'] = result
            if result is self.NoMatch:
                results_595 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 595))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 595)]
                # print self._p_error_stack
            else:
                results_595.append(result)
                                
        if results_595 is not self.NoMatch:
            self.p_discard()
        result = results_595
        if result is not self.NoMatch:
            result = args['spec']
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 596))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 596)]
            # print self._p_error_stack
        return result

    def NL(self):
        '''NL <- ~\'([\t ]*(#.*)?\n)+\''''
        args = dict()
        # ~'([\t ]*(#.*)?\n)+'
        regex = self._p_py_constants[597]["regex"]
        m = regex.match(self.p_suffix())
        if m:
            result = self.p_suffix(m.end())
            self.pos += m.end()
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 597))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 597)]
            # print self._p_error_stack
            result = self.NoMatch
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 598))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 598)]
            # print self._p_error_stack
        return result

    def _(self):
        '''_ <- ~\'[\t ]+\'?'''
        args = dict()
        # ~'[\t ]+'?
        # ~'[\t ]+'
        regex = self._p_py_constants[599]["regex"]
        m = regex.match(self.p_suffix())
        if m:
            result = self.p_suffix(m.end())
            self.pos += m.end()
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 599))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 599)]
            # print self._p_error_stack
            result = self.NoMatch
        result = "" if result is self.NoMatch else result
        if result is self.NoMatch:
            # print self._p_error_stack
            self._p_error_stack.pop()
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 601))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 601)]
            # print self._p_error_stack
        return result

    def TAIL(self):
        '''TAIL <- ~\'.+\''''
        args = dict()
        # ~'.+'
        regex = self._p_py_constants[602]["regex"]
        m = regex.match(self.p_suffix())
        if m:
            result = self.p_suffix(m.end())
            self.pos += m.end()
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 602))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 602)]
            # print self._p_error_stack
            result = self.NoMatch
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 603))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 603)]
            # print self._p_error_stack
        return result

    def COLON(self):
        '''COLON <- _ ":" _'''
        args = dict()
        # _ ":" _
        self.p_save()
        results_607 = []
        
        start_pos_604= self.pos
        if (-3311165420544360942, start_pos_604) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_604)] = result, self.pos
        if result is self.NoMatch:
            results_607 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 607))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 607)]
            # print self._p_error_stack
        else:
            results_607.append(result)
                            
            
            # ":"
            result = self.p_startswith(':', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 605))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 605)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_607 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 607))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 607)]
                # print self._p_error_stack
            else:
                results_607.append(result)
                                
                
                start_pos_606= self.pos
                if (-3311165420544360942, start_pos_606) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_606)] = result, self.pos
                if result is self.NoMatch:
                    results_607 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 607))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 607)]
                    # print self._p_error_stack
                else:
                    results_607.append(result)
                                    
        if results_607 is not self.NoMatch:
            self.p_discard()
        result = results_607
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 608))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 608)]
            # print self._p_error_stack
        return result

    def COMMA(self):
        '''COMMA <- _ "," _'''
        args = dict()
        # _ "," _
        self.p_save()
        results_612 = []
        
        start_pos_609= self.pos
        if (-3311165420544360942, start_pos_609) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_609)] = result, self.pos
        if result is self.NoMatch:
            results_612 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 612))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 612)]
            # print self._p_error_stack
        else:
            results_612.append(result)
                            
            
            # ","
            result = self.p_startswith(',', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 610))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 610)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_612 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 612))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 612)]
                # print self._p_error_stack
            else:
                results_612.append(result)
                                
                
                start_pos_611= self.pos
                if (-3311165420544360942, start_pos_611) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_611)] = result, self.pos
                if result is self.NoMatch:
                    results_612 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 612))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 612)]
                    # print self._p_error_stack
                else:
                    results_612.append(result)
                                    
        if results_612 is not self.NoMatch:
            self.p_discard()
        result = results_612
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 613))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 613)]
            # print self._p_error_stack
        return result

    def AT(self):
        '''AT <- _ "@" _'''
        args = dict()
        # _ "@" _
        self.p_save()
        results_617 = []
        
        start_pos_614= self.pos
        if (-3311165420544360942, start_pos_614) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_614)] = result, self.pos
        if result is self.NoMatch:
            results_617 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 617))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 617)]
            # print self._p_error_stack
        else:
            results_617.append(result)
                            
            
            # "@"
            result = self.p_startswith('@', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 615))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 615)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_617 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 617))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 617)]
                # print self._p_error_stack
            else:
                results_617.append(result)
                                
                
                start_pos_616= self.pos
                if (-3311165420544360942, start_pos_616) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_616)] = result, self.pos
                if result is self.NoMatch:
                    results_617 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 617))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 617)]
                    # print self._p_error_stack
                else:
                    results_617.append(result)
                                    
        if results_617 is not self.NoMatch:
            self.p_discard()
        result = results_617
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 618))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 618)]
            # print self._p_error_stack
        return result

    def EQ(self):
        '''EQ <- _ "=" _'''
        args = dict()
        # _ "=" _
        self.p_save()
        results_622 = []
        
        start_pos_619= self.pos
        if (-3311165420544360942, start_pos_619) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_619)] = result, self.pos
        if result is self.NoMatch:
            results_622 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 622))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 622)]
            # print self._p_error_stack
        else:
            results_622.append(result)
                            
            
            # "="
            result = self.p_startswith('=', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 620))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 620)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_622 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 622))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 622)]
                # print self._p_error_stack
            else:
                results_622.append(result)
                                
                
                start_pos_621= self.pos
                if (-3311165420544360942, start_pos_621) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_621)] = result, self.pos
                if result is self.NoMatch:
                    results_622 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 622))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 622)]
                    # print self._p_error_stack
                else:
                    results_622.append(result)
                                    
        if results_622 is not self.NoMatch:
            self.p_discard()
        result = results_622
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 623))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 623)]
            # print self._p_error_stack
        return result

    def LT(self):
        '''LT <- _ "<" _'''
        args = dict()
        # _ "<" _
        self.p_save()
        results_627 = []
        
        start_pos_624= self.pos
        if (-3311165420544360942, start_pos_624) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_624)] = result, self.pos
        if result is self.NoMatch:
            results_627 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 627))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 627)]
            # print self._p_error_stack
        else:
            results_627.append(result)
                            
            
            # "<"
            result = self.p_startswith('<', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 625))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 625)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_627 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 627))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 627)]
                # print self._p_error_stack
            else:
                results_627.append(result)
                                
                
                start_pos_626= self.pos
                if (-3311165420544360942, start_pos_626) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_626)] = result, self.pos
                if result is self.NoMatch:
                    results_627 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 627))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 627)]
                    # print self._p_error_stack
                else:
                    results_627.append(result)
                                    
        if results_627 is not self.NoMatch:
            self.p_discard()
        result = results_627
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 628))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 628)]
            # print self._p_error_stack
        return result

    def GT(self):
        '''GT <- _ ">" _'''
        args = dict()
        # _ ">" _
        self.p_save()
        results_632 = []
        
        start_pos_629= self.pos
        if (-3311165420544360942, start_pos_629) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_629)] = result, self.pos
        if result is self.NoMatch:
            results_632 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 632))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 632)]
            # print self._p_error_stack
        else:
            results_632.append(result)
                            
            
            # ">"
            result = self.p_startswith('>', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 630))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 630)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_632 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 632))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 632)]
                # print self._p_error_stack
            else:
                results_632.append(result)
                                
                
                start_pos_631= self.pos
                if (-3311165420544360942, start_pos_631) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_631)] = result, self.pos
                if result is self.NoMatch:
                    results_632 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 632))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 632)]
                    # print self._p_error_stack
                else:
                    results_632.append(result)
                                    
        if results_632 is not self.NoMatch:
            self.p_discard()
        result = results_632
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 633))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 633)]
            # print self._p_error_stack
        return result

    def LP(self):
        '''LP <- _ "(" _'''
        args = dict()
        # _ "(" _
        self.p_save()
        results_637 = []
        
        start_pos_634= self.pos
        if (-3311165420544360942, start_pos_634) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_634)] = result, self.pos
        if result is self.NoMatch:
            results_637 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 637))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 637)]
            # print self._p_error_stack
        else:
            results_637.append(result)
                            
            
            # "("
            result = self.p_startswith('(', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 635))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 635)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_637 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 637))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 637)]
                # print self._p_error_stack
            else:
                results_637.append(result)
                                
                
                start_pos_636= self.pos
                if (-3311165420544360942, start_pos_636) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_636)] = result, self.pos
                if result is self.NoMatch:
                    results_637 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 637))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 637)]
                    # print self._p_error_stack
                else:
                    results_637.append(result)
                                    
        if results_637 is not self.NoMatch:
            self.p_discard()
        result = results_637
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 638))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 638)]
            # print self._p_error_stack
        return result

    def RP(self):
        '''RP <- _ ")" _'''
        args = dict()
        # _ ")" _
        self.p_save()
        results_642 = []
        
        start_pos_639= self.pos
        if (-3311165420544360942, start_pos_639) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_639)] = result, self.pos
        if result is self.NoMatch:
            results_642 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 642))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 642)]
            # print self._p_error_stack
        else:
            results_642.append(result)
                            
            
            # ")"
            result = self.p_startswith(')', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 640))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 640)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_642 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 642))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 642)]
                # print self._p_error_stack
            else:
                results_642.append(result)
                                
                
                start_pos_641= self.pos
                if (-3311165420544360942, start_pos_641) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_641)] = result, self.pos
                if result is self.NoMatch:
                    results_642 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 642))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 642)]
                    # print self._p_error_stack
                else:
                    results_642.append(result)
                                    
        if results_642 is not self.NoMatch:
            self.p_discard()
        result = results_642
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 643))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 643)]
            # print self._p_error_stack
        return result

    def LSB(self):
        '''LSB <- _ "[" _'''
        args = dict()
        # _ "[" _
        self.p_save()
        results_647 = []
        
        start_pos_644= self.pos
        if (-3311165420544360942, start_pos_644) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_644)] = result, self.pos
        if result is self.NoMatch:
            results_647 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 647))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 647)]
            # print self._p_error_stack
        else:
            results_647.append(result)
                            
            
            # "["
            result = self.p_startswith('[', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 645))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 645)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_647 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 647))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 647)]
                # print self._p_error_stack
            else:
                results_647.append(result)
                                
                
                start_pos_646= self.pos
                if (-3311165420544360942, start_pos_646) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_646)] = result, self.pos
                if result is self.NoMatch:
                    results_647 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 647))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 647)]
                    # print self._p_error_stack
                else:
                    results_647.append(result)
                                    
        if results_647 is not self.NoMatch:
            self.p_discard()
        result = results_647
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 648))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 648)]
            # print self._p_error_stack
        return result

    def RSB(self):
        '''RSB <- _ "]" _'''
        args = dict()
        # _ "]" _
        self.p_save()
        results_652 = []
        
        start_pos_649= self.pos
        if (-3311165420544360942, start_pos_649) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_649)] = result, self.pos
        if result is self.NoMatch:
            results_652 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 652))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 652)]
            # print self._p_error_stack
        else:
            results_652.append(result)
                            
            
            # "]"
            result = self.p_startswith(']', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 650))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 650)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_652 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 652))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 652)]
                # print self._p_error_stack
            else:
                results_652.append(result)
                                
                
                start_pos_651= self.pos
                if (-3311165420544360942, start_pos_651) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_651)] = result, self.pos
                if result is self.NoMatch:
                    results_652 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 652))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 652)]
                    # print self._p_error_stack
                else:
                    results_652.append(result)
                                    
        if results_652 is not self.NoMatch:
            self.p_discard()
        result = results_652
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 653))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 653)]
            # print self._p_error_stack
        return result

    def LCB(self):
        '''LCB <- _ "{" _'''
        args = dict()
        # _ "{" _
        self.p_save()
        results_657 = []
        
        start_pos_654= self.pos
        if (-3311165420544360942, start_pos_654) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_654)] = result, self.pos
        if result is self.NoMatch:
            results_657 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 657))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 657)]
            # print self._p_error_stack
        else:
            results_657.append(result)
                            
            
            # "{"
            result = self.p_startswith('{', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 655))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 655)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_657 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 657))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 657)]
                # print self._p_error_stack
            else:
                results_657.append(result)
                                
                
                start_pos_656= self.pos
                if (-3311165420544360942, start_pos_656) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_656)] = result, self.pos
                if result is self.NoMatch:
                    results_657 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 657))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 657)]
                    # print self._p_error_stack
                else:
                    results_657.append(result)
                                    
        if results_657 is not self.NoMatch:
            self.p_discard()
        result = results_657
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 658))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 658)]
            # print self._p_error_stack
        return result

    def RCB(self):
        '''RCB <- _ "}" _'''
        args = dict()
        # _ "}" _
        self.p_save()
        results_662 = []
        
        start_pos_659= self.pos
        if (-3311165420544360942, start_pos_659) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_659)] = result, self.pos
        if result is self.NoMatch:
            results_662 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 662))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 662)]
            # print self._p_error_stack
        else:
            results_662.append(result)
                            
            
            # "}"
            result = self.p_startswith('}', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 660))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 660)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_662 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 662))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 662)]
                # print self._p_error_stack
            else:
                results_662.append(result)
                                
                
                start_pos_661= self.pos
                if (-3311165420544360942, start_pos_661) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_661)] = result, self.pos
                if result is self.NoMatch:
                    results_662 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 662))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 662)]
                    # print self._p_error_stack
                else:
                    results_662.append(result)
                                    
        if results_662 is not self.NoMatch:
            self.p_discard()
        result = results_662
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 663))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 663)]
            # print self._p_error_stack
        return result

    def INDENT(self):
        '''INDENT <- _ "↦" NL? _'''
        args = dict()
        # _ "↦" NL? _
        self.p_save()
        results_669 = []
        
        start_pos_664= self.pos
        if (-3311165420544360942, start_pos_664) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_664)] = result, self.pos
        if result is self.NoMatch:
            results_669 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 669))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 669)]
            # print self._p_error_stack
        else:
            results_669.append(result)
                            
            
            # "↦"
            result = self.p_startswith('↦', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 665))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 665)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_669 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 669))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 669)]
                # print self._p_error_stack
            else:
                results_669.append(result)
                                
                
                # NL?
                start_pos_666= self.pos
                if (-361559891970486465, start_pos_666) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-361559891970486465, self.pos)]
                else:
                    result = self.NL()
                    self._p_memoized[(-361559891970486465, start_pos_666)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                if result is self.NoMatch:
                    results_669 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 669))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 669)]
                    # print self._p_error_stack
                else:
                    results_669.append(result)
                                    
                    
                    start_pos_668= self.pos
                    if (-3311165420544360942, start_pos_668) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(-3311165420544360942, start_pos_668)] = result, self.pos
                    if result is self.NoMatch:
                        results_669 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 669))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 669)]
                        # print self._p_error_stack
                    else:
                        results_669.append(result)
                                        
        if results_669 is not self.NoMatch:
            self.p_discard()
        result = results_669
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 670))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 670)]
            # print self._p_error_stack
        return result

    def DEDENT(self):
        '''DEDENT <- _ "↤" NL? _'''
        args = dict()
        # _ "↤" NL? _
        self.p_save()
        results_676 = []
        
        start_pos_671= self.pos
        if (-3311165420544360942, start_pos_671) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_671)] = result, self.pos
        if result is self.NoMatch:
            results_676 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 676))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 676)]
            # print self._p_error_stack
        else:
            results_676.append(result)
                            
            
            # "↤"
            result = self.p_startswith('↤', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 672))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 672)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_676 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 676))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 676)]
                # print self._p_error_stack
            else:
                results_676.append(result)
                                
                
                # NL?
                start_pos_673= self.pos
                if (-361559891970486465, start_pos_673) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-361559891970486465, self.pos)]
                else:
                    result = self.NL()
                    self._p_memoized[(-361559891970486465, start_pos_673)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                if result is self.NoMatch:
                    results_676 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 676))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 676)]
                    # print self._p_error_stack
                else:
                    results_676.append(result)
                                    
                    
                    start_pos_675= self.pos
                    if (-3311165420544360942, start_pos_675) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(-3311165420544360942, start_pos_675)] = result, self.pos
                    if result is self.NoMatch:
                        results_676 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 676))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 676)]
                        # print self._p_error_stack
                    else:
                        results_676.append(result)
                                        
        if results_676 is not self.NoMatch:
            self.p_discard()
        result = results_676
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 677))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 677)]
            # print self._p_error_stack
        return result

    def LANG(self):
        '''LANG <- _ "lang" _'''
        args = dict()
        # _ "lang" _
        self.p_save()
        results_681 = []
        
        start_pos_678= self.pos
        if (-3311165420544360942, start_pos_678) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_678)] = result, self.pos
        if result is self.NoMatch:
            results_681 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 681))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 681)]
            # print self._p_error_stack
        else:
            results_681.append(result)
                            
            
            # "lang"
            result = self.p_startswith('lang', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 679))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 679)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_681 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 681))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 681)]
                # print self._p_error_stack
            else:
                results_681.append(result)
                                
                
                start_pos_680= self.pos
                if (-3311165420544360942, start_pos_680) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_680)] = result, self.pos
                if result is self.NoMatch:
                    results_681 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 681))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 681)]
                    # print self._p_error_stack
                else:
                    results_681.append(result)
                                    
        if results_681 is not self.NoMatch:
            self.p_discard()
        result = results_681
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 682))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 682)]
            # print self._p_error_stack
        return result

    def NET(self):
        '''NET <- _ "net" _'''
        args = dict()
        # _ "net" _
        self.p_save()
        results_686 = []
        
        start_pos_683= self.pos
        if (-3311165420544360942, start_pos_683) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_683)] = result, self.pos
        if result is self.NoMatch:
            results_686 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 686))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 686)]
            # print self._p_error_stack
        else:
            results_686.append(result)
                            
            
            # "net"
            result = self.p_startswith('net', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 684))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 684)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_686 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 686))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 686)]
                # print self._p_error_stack
            else:
                results_686.append(result)
                                
                
                start_pos_685= self.pos
                if (-3311165420544360942, start_pos_685) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_685)] = result, self.pos
                if result is self.NoMatch:
                    results_686 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 686))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 686)]
                    # print self._p_error_stack
                else:
                    results_686.append(result)
                                    
        if results_686 is not self.NoMatch:
            self.p_discard()
        result = results_686
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 687))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 687)]
            # print self._p_error_stack
        return result

    def PLACE(self):
        '''PLACE <- _ "place" _'''
        args = dict()
        # _ "place" _
        self.p_save()
        results_691 = []
        
        start_pos_688= self.pos
        if (-3311165420544360942, start_pos_688) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_688)] = result, self.pos
        if result is self.NoMatch:
            results_691 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 691))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 691)]
            # print self._p_error_stack
        else:
            results_691.append(result)
                            
            
            # "place"
            result = self.p_startswith('place', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 689))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 689)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_691 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 691))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 691)]
                # print self._p_error_stack
            else:
                results_691.append(result)
                                
                
                start_pos_690= self.pos
                if (-3311165420544360942, start_pos_690) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_690)] = result, self.pos
                if result is self.NoMatch:
                    results_691 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 691))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 691)]
                    # print self._p_error_stack
                else:
                    results_691.append(result)
                                    
        if results_691 is not self.NoMatch:
            self.p_discard()
        result = results_691
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 692))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 692)]
            # print self._p_error_stack
        return result

    def TRANS(self):
        '''TRANS <- _ "trans" _'''
        args = dict()
        # _ "trans" _
        self.p_save()
        results_696 = []
        
        start_pos_693= self.pos
        if (-3311165420544360942, start_pos_693) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_693)] = result, self.pos
        if result is self.NoMatch:
            results_696 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 696))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 696)]
            # print self._p_error_stack
        else:
            results_696.append(result)
                            
            
            # "trans"
            result = self.p_startswith('trans', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 694))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 694)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_696 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 696))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 696)]
                # print self._p_error_stack
            else:
                results_696.append(result)
                                
                
                start_pos_695= self.pos
                if (-3311165420544360942, start_pos_695) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_695)] = result, self.pos
                if result is self.NoMatch:
                    results_696 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 696))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 696)]
                    # print self._p_error_stack
                else:
                    results_696.append(result)
                                    
        if results_696 is not self.NoMatch:
            self.p_discard()
        result = results_696
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 697))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 697)]
            # print self._p_error_stack
        return result

    def VAL(self):
        '''VAL <- _ "val" _'''
        args = dict()
        # _ "val" _
        self.p_save()
        results_701 = []
        
        start_pos_698= self.pos
        if (-3311165420544360942, start_pos_698) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_698)] = result, self.pos
        if result is self.NoMatch:
            results_701 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 701))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 701)]
            # print self._p_error_stack
        else:
            results_701.append(result)
                            
            
            # "val"
            result = self.p_startswith('val', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 699))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 699)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_701 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 701))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 701)]
                # print self._p_error_stack
            else:
                results_701.append(result)
                                
                
                start_pos_700= self.pos
                if (-3311165420544360942, start_pos_700) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_700)] = result, self.pos
                if result is self.NoMatch:
                    results_701 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 701))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 701)]
                    # print self._p_error_stack
                else:
                    results_701.append(result)
                                    
        if results_701 is not self.NoMatch:
            self.p_discard()
        result = results_701
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 702))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 702)]
            # print self._p_error_stack
        return result

    def VAR(self):
        '''VAR <- _ "var" _'''
        args = dict()
        # _ "var" _
        self.p_save()
        results_706 = []
        
        start_pos_703= self.pos
        if (-3311165420544360942, start_pos_703) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_703)] = result, self.pos
        if result is self.NoMatch:
            results_706 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 706))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 706)]
            # print self._p_error_stack
        else:
            results_706.append(result)
                            
            
            # "var"
            result = self.p_startswith('var', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 704))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 704)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_706 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 706))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 706)]
                # print self._p_error_stack
            else:
                results_706.append(result)
                                
                
                start_pos_705= self.pos
                if (-3311165420544360942, start_pos_705) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_705)] = result, self.pos
                if result is self.NoMatch:
                    results_706 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 706))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 706)]
                    # print self._p_error_stack
                else:
                    results_706.append(result)
                                    
        if results_706 is not self.NoMatch:
            self.p_discard()
        result = results_706
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 707))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 707)]
            # print self._p_error_stack
        return result

    def EXPR(self):
        '''EXPR <- _ "expr" _'''
        args = dict()
        # _ "expr" _
        self.p_save()
        results_711 = []
        
        start_pos_708= self.pos
        if (-3311165420544360942, start_pos_708) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_708)] = result, self.pos
        if result is self.NoMatch:
            results_711 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 711))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 711)]
            # print self._p_error_stack
        else:
            results_711.append(result)
                            
            
            # "expr"
            result = self.p_startswith('expr', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 709))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 709)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_711 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 711))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 711)]
                # print self._p_error_stack
            else:
                results_711.append(result)
                                
                
                start_pos_710= self.pos
                if (-3311165420544360942, start_pos_710) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_710)] = result, self.pos
                if result is self.NoMatch:
                    results_711 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 711))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 711)]
                    # print self._p_error_stack
                else:
                    results_711.append(result)
                                    
        if results_711 is not self.NoMatch:
            self.p_discard()
        result = results_711
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 712))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 712)]
            # print self._p_error_stack
        return result

    def DECLARE(self):
        '''DECLARE <- _ "declare" _'''
        args = dict()
        # _ "declare" _
        self.p_save()
        results_716 = []
        
        start_pos_713= self.pos
        if (-3311165420544360942, start_pos_713) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_713)] = result, self.pos
        if result is self.NoMatch:
            results_716 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 716))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 716)]
            # print self._p_error_stack
        else:
            results_716.append(result)
                            
            
            # "declare"
            result = self.p_startswith('declare', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 714))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 714)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_716 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 716))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 716)]
                # print self._p_error_stack
            else:
                results_716.append(result)
                                
                
                start_pos_715= self.pos
                if (-3311165420544360942, start_pos_715) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_715)] = result, self.pos
                if result is self.NoMatch:
                    results_716 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 716))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 716)]
                    # print self._p_error_stack
                else:
                    results_716.append(result)
                                    
        if results_716 is not self.NoMatch:
            self.p_discard()
        result = results_716
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 717))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 717)]
            # print self._p_error_stack
        return result

    def FLUSHPLUS(self):
        '''FLUSHPLUS <- _ "flush+" _'''
        args = dict()
        # _ "flush+" _
        self.p_save()
        results_721 = []
        
        start_pos_718= self.pos
        if (-3311165420544360942, start_pos_718) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_718)] = result, self.pos
        if result is self.NoMatch:
            results_721 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 721))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 721)]
            # print self._p_error_stack
        else:
            results_721.append(result)
                            
            
            # "flush+"
            result = self.p_startswith('flush+', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 719))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 719)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_721 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 721))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 721)]
                # print self._p_error_stack
            else:
                results_721.append(result)
                                
                
                start_pos_720= self.pos
                if (-3311165420544360942, start_pos_720) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_720)] = result, self.pos
                if result is self.NoMatch:
                    results_721 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 721))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 721)]
                    # print self._p_error_stack
                else:
                    results_721.append(result)
                                    
        if results_721 is not self.NoMatch:
            self.p_discard()
        result = results_721
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 722))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 722)]
            # print self._p_error_stack
        return result

    def FLUSH(self):
        '''FLUSH <- _ "flush" _'''
        args = dict()
        # _ "flush" _
        self.p_save()
        results_726 = []
        
        start_pos_723= self.pos
        if (-3311165420544360942, start_pos_723) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_723)] = result, self.pos
        if result is self.NoMatch:
            results_726 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 726))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 726)]
            # print self._p_error_stack
        else:
            results_726.append(result)
                            
            
            # "flush"
            result = self.p_startswith('flush', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 724))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 724)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_726 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 726))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 726)]
                # print self._p_error_stack
            else:
                results_726.append(result)
                                
                
                start_pos_725= self.pos
                if (-3311165420544360942, start_pos_725) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_725)] = result, self.pos
                if result is self.NoMatch:
                    results_726 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 726))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 726)]
                    # print self._p_error_stack
                else:
                    results_726.append(result)
                                    
        if results_726 is not self.NoMatch:
            self.p_discard()
        result = results_726
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 727))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 727)]
            # print self._p_error_stack
        return result

    def FILL(self):
        '''FILL <- _ "fill" _'''
        args = dict()
        # _ "fill" _
        self.p_save()
        results_731 = []
        
        start_pos_728= self.pos
        if (-3311165420544360942, start_pos_728) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_728)] = result, self.pos
        if result is self.NoMatch:
            results_731 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 731))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 731)]
            # print self._p_error_stack
        else:
            results_731.append(result)
                            
            
            # "fill"
            result = self.p_startswith('fill', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 729))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 729)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_731 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 731))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 731)]
                # print self._p_error_stack
            else:
                results_731.append(result)
                                
                
                start_pos_730= self.pos
                if (-3311165420544360942, start_pos_730) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_730)] = result, self.pos
                if result is self.NoMatch:
                    results_731 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 731))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 731)]
                    # print self._p_error_stack
                else:
                    results_731.append(result)
                                    
        if results_731 is not self.NoMatch:
            self.p_discard()
        result = results_731
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 732))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 732)]
            # print self._p_error_stack
        return result

    def TEST(self):
        '''TEST <- _ "?" _'''
        args = dict()
        # _ "?" _
        self.p_save()
        results_736 = []
        
        start_pos_733= self.pos
        if (-3311165420544360942, start_pos_733) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_733)] = result, self.pos
        if result is self.NoMatch:
            results_736 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 736))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 736)]
            # print self._p_error_stack
        else:
            results_736.append(result)
                            
            
            # "?"
            result = self.p_startswith('?', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 734))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 734)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_736 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 736))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 736)]
                # print self._p_error_stack
            else:
                results_736.append(result)
                                
                
                start_pos_735= self.pos
                if (-3311165420544360942, start_pos_735) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_735)] = result, self.pos
                if result is self.NoMatch:
                    results_736 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 736))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 736)]
                    # print self._p_error_stack
                else:
                    results_736.append(result)
                                    
        if results_736 is not self.NoMatch:
            self.p_discard()
        result = results_736
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 737))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 737)]
            # print self._p_error_stack
        return result

    def BANG(self):
        '''BANG <- _ "!" _'''
        args = dict()
        # _ "!" _
        self.p_save()
        results_741 = []
        
        start_pos_738= self.pos
        if (-3311165420544360942, start_pos_738) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_738)] = result, self.pos
        if result is self.NoMatch:
            results_741 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 741))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 741)]
            # print self._p_error_stack
        else:
            results_741.append(result)
                            
            
            # "!"
            result = self.p_startswith('!', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 739))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 739)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_741 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 741))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 741)]
                # print self._p_error_stack
            else:
                results_741.append(result)
                                
                
                start_pos_740= self.pos
                if (-3311165420544360942, start_pos_740) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_740)] = result, self.pos
                if result is self.NoMatch:
                    results_741 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 741))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 741)]
                    # print self._p_error_stack
                else:
                    results_741.append(result)
                                    
        if results_741 is not self.NoMatch:
            self.p_discard()
        result = results_741
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 742))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 742)]
            # print self._p_error_stack
        return result

    def NUMBER(self):
        '''NUMBER <- _ ~\'[+-]?[0-9]+\''''
        args = dict()
        # _ ~'[+-]?[0-9]+'
        self.p_save()
        results_745 = []
        
        start_pos_743= self.pos
        if (-3311165420544360942, start_pos_743) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_743)] = result, self.pos
        if result is self.NoMatch:
            results_745 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 745))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 745)]
            # print self._p_error_stack
        else:
            results_745.append(result)
                            
            
            # ~'[+-]?[0-9]+'
            regex = self._p_py_constants[744]["regex"]
            m = regex.match(self.p_suffix())
            if m:
                result = self.p_suffix(m.end())
                self.pos += m.end()
            else:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 744))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 744)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_745 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 745))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 745)]
                # print self._p_error_stack
            else:
                results_745.append(result)
                                
        if results_745 is not self.NoMatch:
            self.p_discard()
        result = results_745
        if result is not self.NoMatch:
            result = self._number(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 746))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 746)]
            # print self._p_error_stack
        return result

    def NAME(self):
        '''NAME <- _ ~\'[a-z][a-z0-9_]*\'i _'''
        args = dict()
        # _ ~'[a-z][a-z0-9_]*'i _
        self.p_save()
        results_750 = []
        
        start_pos_747= self.pos
        if (-3311165420544360942, start_pos_747) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_747)] = result, self.pos
        if result is self.NoMatch:
            results_750 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 750))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 750)]
            # print self._p_error_stack
        else:
            results_750.append(result)
                            
            
            # ~'[a-z][a-z0-9_]*'i
            regex = self._p_py_constants[748]["regex"]
            m = regex.match(self.p_suffix())
            if m:
                result = self.p_suffix(m.end())
                self.pos += m.end()
            else:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 748))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 748)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_750 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 750))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 750)]
                # print self._p_error_stack
            else:
                results_750.append(result)
                                
                
                start_pos_749= self.pos
                if (-3311165420544360942, start_pos_749) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_749)] = result, self.pos
                if result is self.NoMatch:
                    results_750 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 750))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 750)]
                    # print self._p_error_stack
                else:
                    results_750.append(result)
                                    
        if results_750 is not self.NoMatch:
            self.p_discard()
        result = results_750
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 751))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 751)]
            # print self._p_error_stack
        return result

    def text(self):
        '''text <- name:NAME / code:code / string:string'''
        args = dict()
        # name:NAME / code:code / string:string
        self.p_save()
        # name:NAME
        start_pos_752= self.pos
        if (5830967878317556735, start_pos_752) in self._p_memoized:
            result, self.pos = self._p_memoized[(5830967878317556735, self.pos)]
        else:
            result = self.NAME()
            self._p_memoized[(5830967878317556735, start_pos_752)] = result, self.pos
        args['name'] = result
        if result is self.NoMatch:
            # code:code
            start_pos_754= self.pos
            if (-7377823409447125660, start_pos_754) in self._p_memoized:
                result, self.pos = self._p_memoized[(-7377823409447125660, self.pos)]
            else:
                result = self.code()
                self._p_memoized[(-7377823409447125660, start_pos_754)] = result, self.pos
            args['code'] = result
            if result is self.NoMatch:
                # string:string
                start_pos_756= self.pos
                if (-8165814204906871562, start_pos_756) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-8165814204906871562, self.pos)]
                else:
                    result = self.string()
                    self._p_memoized[(-8165814204906871562, start_pos_756)] = result, self.pos
                args['string'] = result
                if result is self.NoMatch:
                    pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 758))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 758)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self._first(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 759))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 759)]
            # print self._p_error_stack
        return result

    def code(self):
        '''code <- codec / codeb'''
        args = dict()
        # codec / codeb
        self.p_save()
        start_pos_760= self.pos
        if (-2978102139511176638, start_pos_760) in self._p_memoized:
            result, self.pos = self._p_memoized[(-2978102139511176638, self.pos)]
        else:
            result = self.codec()
            self._p_memoized[(-2978102139511176638, start_pos_760)] = result, self.pos
        if result is self.NoMatch:
            start_pos_761= self.pos
            if (-2811266167837806096, start_pos_761) in self._p_memoized:
                result, self.pos = self._p_memoized[(-2811266167837806096, self.pos)]
            else:
                result = self.codeb()
                self._p_memoized[(-2811266167837806096, start_pos_761)] = result, self.pos
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 762))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 762)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self._code(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 763))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 763)]
            # print self._p_error_stack
        return result

    def codec(self):
        '''codec <- LCB ( ~\'([^{}\\\\]|\\[{}])+\' / codec )* RCB'''
        args = dict()
        # LCB ( ~'([^{}\\\\]|\\[{}])+' / codec )* RCB
        self.p_save()
        results_770 = []
        
        start_pos_764= self.pos
        if (-7887784547123315781, start_pos_764) in self._p_memoized:
            result, self.pos = self._p_memoized[(-7887784547123315781, self.pos)]
        else:
            result = self.LCB()
            self._p_memoized[(-7887784547123315781, start_pos_764)] = result, self.pos
        if result is self.NoMatch:
            results_770 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 770))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 770)]
            # print self._p_error_stack
        else:
            results_770.append(result)
                            
            
            # ( ~'([^{}\\\\]|\\[{}])+' / codec )*
            results_768 = []
            while 42:
                # ~'([^{}\\\\]|\\[{}])+' / codec
                self.p_save()
                # ~'([^{}\\\\]|\\[{}])+'
                regex = self._p_py_constants[765]["regex"]
                m = regex.match(self.p_suffix())
                if m:
                    result = self.p_suffix(m.end())
                    self.pos += m.end()
                else:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 765))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 765)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    start_pos_766= self.pos
                    if (-2978102139511176638, start_pos_766) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-2978102139511176638, self.pos)]
                    else:
                        result = self.codec()
                        self._p_memoized[(-2978102139511176638, start_pos_766)] = result, self.pos
                    if result is self.NoMatch:
                        pass
                if result is self.NoMatch:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 767))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 767)]
                    # print self._p_error_stack
                else:
                    self.p_discard()
                if result is not self.NoMatch:
                    results_768.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_768
            if result is self.NoMatch:
                results_770 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 770))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 770)]
                # print self._p_error_stack
            else:
                results_770.append(result)
                                
                
                start_pos_769= self.pos
                if (1526843837618916909, start_pos_769) in self._p_memoized:
                    result, self.pos = self._p_memoized[(1526843837618916909, self.pos)]
                else:
                    result = self.RCB()
                    self._p_memoized[(1526843837618916909, start_pos_769)] = result, self.pos
                if result is self.NoMatch:
                    results_770 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 770))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 770)]
                    # print self._p_error_stack
                else:
                    results_770.append(result)
                                    
        if results_770 is not self.NoMatch:
            self.p_discard()
        result = results_770
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 771))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 771)]
            # print self._p_error_stack
        return result

    def codeb(self):
        '''codeb <- LSB ( ~\'([^\\[\\]\\\\]|\\[\\[\\]])+\' / codeb )* RSB'''
        args = dict()
        # LSB ( ~'([^\\[\\]\\\\]|\\[\\[\\]])+' / codeb )* RSB
        self.p_save()
        results_778 = []
        
        start_pos_772= self.pos
        if (3577512367823769253, start_pos_772) in self._p_memoized:
            result, self.pos = self._p_memoized[(3577512367823769253, self.pos)]
        else:
            result = self.LSB()
            self._p_memoized[(3577512367823769253, start_pos_772)] = result, self.pos
        if result is self.NoMatch:
            results_778 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 778))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 778)]
            # print self._p_error_stack
        else:
            results_778.append(result)
                            
            
            # ( ~'([^\\[\\]\\\\]|\\[\\[\\]])+' / codeb )*
            results_776 = []
            while 42:
                # ~'([^\\[\\]\\\\]|\\[\\[\\]])+' / codeb
                self.p_save()
                # ~'([^\\[\\]\\\\]|\\[\\[\\]])+'
                regex = self._p_py_constants[773]["regex"]
                m = regex.match(self.p_suffix())
                if m:
                    result = self.p_suffix(m.end())
                    self.pos += m.end()
                else:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 773))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 773)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    start_pos_774= self.pos
                    if (-2811266167837806096, start_pos_774) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-2811266167837806096, self.pos)]
                    else:
                        result = self.codeb()
                        self._p_memoized[(-2811266167837806096, start_pos_774)] = result, self.pos
                    if result is self.NoMatch:
                        pass
                if result is self.NoMatch:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 775))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 775)]
                    # print self._p_error_stack
                else:
                    self.p_discard()
                if result is not self.NoMatch:
                    results_776.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_776
            if result is self.NoMatch:
                results_778 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 778))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 778)]
                # print self._p_error_stack
            else:
                results_778.append(result)
                                
                
                start_pos_777= self.pos
                if (4081657635988978770, start_pos_777) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4081657635988978770, self.pos)]
                else:
                    result = self.RSB()
                    self._p_memoized[(4081657635988978770, start_pos_777)] = result, self.pos
                if result is self.NoMatch:
                    results_778 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 778))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 778)]
                    # print self._p_error_stack
                else:
                    results_778.append(result)
                                    
        if results_778 is not self.NoMatch:
            self.p_discard()
        result = results_778
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 779))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 779)]
            # print self._p_error_stack
        return result

    def string(self):
        '''string <- _ ( ~"\'{3}.*?\'{3}"s / ~\'"{3}.*?"{3}\'s / ~"\'([^\'\\\\]|\\.)*\'" / ~\'"([^"\\\\]|\\.)*"\' ) _'''
        args = dict()
        # _ ( ~"'{3}.*?'{3}"s / ~'"{3}.*?"{3}'s / ~"'([^'\\\\]|\\.)*'" / ~'"([^"\\\\]|\\.)*"' ) _
        self.p_save()
        results_787 = []
        
        start_pos_780= self.pos
        if (-3311165420544360942, start_pos_780) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-3311165420544360942, start_pos_780)] = result, self.pos
        if result is self.NoMatch:
            results_787 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 787))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 787)]
            # print self._p_error_stack
        else:
            results_787.append(result)
                            
            
            # ~"'{3}.*?'{3}"s / ~'"{3}.*?"{3}'s / ~"'([^'\\\\]|\\.)*'" / ~'"([^"\\\\]|\\.)*"'
            self.p_save()
            # ~"'{3}.*?'{3}"s
            regex = self._p_py_constants[781]["regex"]
            m = regex.match(self.p_suffix())
            if m:
                result = self.p_suffix(m.end())
                self.pos += m.end()
            else:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 781))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 781)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                # ~'"{3}.*?"{3}'s
                regex = self._p_py_constants[782]["regex"]
                m = regex.match(self.p_suffix())
                if m:
                    result = self.p_suffix(m.end())
                    self.pos += m.end()
                else:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 782))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 782)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    # ~"'([^'\\\\]|\\.)*'"
                    regex = self._p_py_constants[783]["regex"]
                    m = regex.match(self.p_suffix())
                    if m:
                        result = self.p_suffix(m.end())
                        self.pos += m.end()
                    else:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 783))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 783)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        # ~'"([^"\\\\]|\\.)*"'
                        regex = self._p_py_constants[784]["regex"]
                        m = regex.match(self.p_suffix())
                        if m:
                            result = self.p_suffix(m.end())
                            self.pos += m.end()
                        else:
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 784))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 784)]
                            # print self._p_error_stack
                            result = self.NoMatch
                        if result is self.NoMatch:
                            pass
            if result is self.NoMatch:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 785))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 785)]
                # print self._p_error_stack
            else:
                self.p_discard()
            if result is self.NoMatch:
                results_787 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 787))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 787)]
                # print self._p_error_stack
            else:
                results_787.append(result)
                                
                
                start_pos_786= self.pos
                if (-3311165420544360942, start_pos_786) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3311165420544360942, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-3311165420544360942, start_pos_786)] = result, self.pos
                if result is self.NoMatch:
                    results_787 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 787))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 787)]
                    # print self._p_error_stack
                else:
                    results_787.append(result)
                                    
        if results_787 is not self.NoMatch:
            self.p_discard()
        result = results_787
        if result is not self.NoMatch:
            result = self._string(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 788))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 788)]
            # print self._p_error_stack
        return result

    def spec(self):
        '''spec <- LANG lang:text NL declare:decl* NET net:text COLON NL INDENT nodes:( place / trans )+ DEDENT'''
        args = dict()
        # LANG lang:text NL declare:decl* NET net:text COLON NL INDENT nodes:( place / trans )+ DEDENT
        self.p_save()
        results_808 = []
        
        start_pos_789= self.pos
        if (6895801802860619002, start_pos_789) in self._p_memoized:
            result, self.pos = self._p_memoized[(6895801802860619002, self.pos)]
        else:
            result = self.LANG()
            self._p_memoized[(6895801802860619002, start_pos_789)] = result, self.pos
        if result is self.NoMatch:
            results_808 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 808))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 808)]
            # print self._p_error_stack
        else:
            results_808.append(result)
                            
            
            # lang:text
            start_pos_790= self.pos
            if (-1322404022185089166, start_pos_790) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
            else:
                result = self.text()
                self._p_memoized[(-1322404022185089166, start_pos_790)] = result, self.pos
            args['lang'] = result
            if result is self.NoMatch:
                results_808 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 808))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 808)]
                # print self._p_error_stack
            else:
                results_808.append(result)
                                
                
                start_pos_792= self.pos
                if (-361559891970486465, start_pos_792) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-361559891970486465, self.pos)]
                else:
                    result = self.NL()
                    self._p_memoized[(-361559891970486465, start_pos_792)] = result, self.pos
                if result is self.NoMatch:
                    results_808 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 808))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 808)]
                    # print self._p_error_stack
                else:
                    results_808.append(result)
                                    
                    
                    # declare:decl*
                    # decl*
                    results_794 = []
                    while 42:
                        start_pos_793= self.pos
                        if (1429594281798675435, start_pos_793) in self._p_memoized:
                            result, self.pos = self._p_memoized[(1429594281798675435, self.pos)]
                        else:
                            result = self.decl()
                            self._p_memoized[(1429594281798675435, start_pos_793)] = result, self.pos
                        if result is not self.NoMatch:
                            results_794.append(result)
                        else:
                            break
                    # print self._p_error_stack
                    result = results_794
                    args['declare'] = result
                    if result is self.NoMatch:
                        results_808 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 808))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 808)]
                        # print self._p_error_stack
                    else:
                        results_808.append(result)
                                        
                        
                        start_pos_796= self.pos
                        if (-2942229294955584856, start_pos_796) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-2942229294955584856, self.pos)]
                        else:
                            result = self.NET()
                            self._p_memoized[(-2942229294955584856, start_pos_796)] = result, self.pos
                        if result is self.NoMatch:
                            results_808 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 808))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 808)]
                            # print self._p_error_stack
                        else:
                            results_808.append(result)
                                            
                            
                            # net:text
                            start_pos_797= self.pos
                            if (-1322404022185089166, start_pos_797) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
                            else:
                                result = self.text()
                                self._p_memoized[(-1322404022185089166, start_pos_797)] = result, self.pos
                            args['net'] = result
                            if result is self.NoMatch:
                                results_808 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 808))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 808)]
                                # print self._p_error_stack
                            else:
                                results_808.append(result)
                                                
                                
                                start_pos_799= self.pos
                                if (3471066863753705485, start_pos_799) in self._p_memoized:
                                    result, self.pos = self._p_memoized[(3471066863753705485, self.pos)]
                                else:
                                    result = self.COLON()
                                    self._p_memoized[(3471066863753705485, start_pos_799)] = result, self.pos
                                if result is self.NoMatch:
                                    results_808 = self.NoMatch
                                    self.p_restore()
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 808))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 808)]
                                    # print self._p_error_stack
                                else:
                                    results_808.append(result)
                                                    
                                    
                                    start_pos_800= self.pos
                                    if (-361559891970486465, start_pos_800) in self._p_memoized:
                                        result, self.pos = self._p_memoized[(-361559891970486465, self.pos)]
                                    else:
                                        result = self.NL()
                                        self._p_memoized[(-361559891970486465, start_pos_800)] = result, self.pos
                                    if result is self.NoMatch:
                                        results_808 = self.NoMatch
                                        self.p_restore()
                                        if self._p_error_stack:
                                            head = self._p_error_stack[0]
                                        else:
                                            head = (0, 0)
                                        if self.pos <= head[0]:
                                            self._p_error_stack.append((self.pos, 808))
                                        elif self.pos > head[0]:
                                            self._p_error_stack = [(self.pos, 808)]
                                        # print self._p_error_stack
                                    else:
                                        results_808.append(result)
                                                        
                                        
                                        start_pos_801= self.pos
                                        if (5896166314092667844, start_pos_801) in self._p_memoized:
                                            result, self.pos = self._p_memoized[(5896166314092667844, self.pos)]
                                        else:
                                            result = self.INDENT()
                                            self._p_memoized[(5896166314092667844, start_pos_801)] = result, self.pos
                                        if result is self.NoMatch:
                                            results_808 = self.NoMatch
                                            self.p_restore()
                                            if self._p_error_stack:
                                                head = self._p_error_stack[0]
                                            else:
                                                head = (0, 0)
                                            if self.pos <= head[0]:
                                                self._p_error_stack.append((self.pos, 808))
                                            elif self.pos > head[0]:
                                                self._p_error_stack = [(self.pos, 808)]
                                            # print self._p_error_stack
                                        else:
                                            results_808.append(result)
                                                            
                                            
                                            # nodes:( place / trans )+
                                            # ( place / trans )+
                                            self.p_save()
                                            results_805 = []
                                            while 42:
                                                # place / trans
                                                self.p_save()
                                                start_pos_802= self.pos
                                                if (8463816419043841829, start_pos_802) in self._p_memoized:
                                                    result, self.pos = self._p_memoized[(8463816419043841829, self.pos)]
                                                else:
                                                    result = self.place()
                                                    self._p_memoized[(8463816419043841829, start_pos_802)] = result, self.pos
                                                if result is self.NoMatch:
                                                    start_pos_803= self.pos
                                                    if (8818747398869674477, start_pos_803) in self._p_memoized:
                                                        result, self.pos = self._p_memoized[(8818747398869674477, self.pos)]
                                                    else:
                                                        result = self.trans()
                                                        self._p_memoized[(8818747398869674477, start_pos_803)] = result, self.pos
                                                    if result is self.NoMatch:
                                                        pass
                                                if result is self.NoMatch:
                                                    self.p_restore()
                                                    if self._p_error_stack:
                                                        head = self._p_error_stack[0]
                                                    else:
                                                        head = (0, 0)
                                                    if self.pos <= head[0]:
                                                        self._p_error_stack.append((self.pos, 804))
                                                    elif self.pos > head[0]:
                                                        self._p_error_stack = [(self.pos, 804)]
                                                    # print self._p_error_stack
                                                else:
                                                    self.p_discard()
                                                if result is not self.NoMatch:
                                                    results_805.append(result)
                                                else:
                                                    break
                                            if not results_805:
                                                self.p_restore()
                                                if self._p_error_stack:
                                                    head = self._p_error_stack[0]
                                                else:
                                                    head = (0, 0)
                                                if self.pos <= head[0]:
                                                    self._p_error_stack.append((self.pos, 805))
                                                elif self.pos > head[0]:
                                                    self._p_error_stack = [(self.pos, 805)]
                                                # print self._p_error_stack
                                                result = self.NoMatch
                                            else:
                                                self.p_discard()
                                                result = results_805
                                            args['nodes'] = result
                                            if result is self.NoMatch:
                                                results_808 = self.NoMatch
                                                self.p_restore()
                                                if self._p_error_stack:
                                                    head = self._p_error_stack[0]
                                                else:
                                                    head = (0, 0)
                                                if self.pos <= head[0]:
                                                    self._p_error_stack.append((self.pos, 808))
                                                elif self.pos > head[0]:
                                                    self._p_error_stack = [(self.pos, 808)]
                                                # print self._p_error_stack
                                            else:
                                                results_808.append(result)
                                                                
                                                
                                                start_pos_807= self.pos
                                                if (3900992445004724228, start_pos_807) in self._p_memoized:
                                                    result, self.pos = self._p_memoized[(3900992445004724228, self.pos)]
                                                else:
                                                    result = self.DEDENT()
                                                    self._p_memoized[(3900992445004724228, start_pos_807)] = result, self.pos
                                                if result is self.NoMatch:
                                                    results_808 = self.NoMatch
                                                    self.p_restore()
                                                    if self._p_error_stack:
                                                        head = self._p_error_stack[0]
                                                    else:
                                                        head = (0, 0)
                                                    if self.pos <= head[0]:
                                                        self._p_error_stack.append((self.pos, 808))
                                                    elif self.pos > head[0]:
                                                        self._p_error_stack = [(self.pos, 808)]
                                                    # print self._p_error_stack
                                                else:
                                                    results_808.append(result)
                                                                    
        if results_808 is not self.NoMatch:
            self.p_discard()
        result = results_808
        if result is not self.NoMatch:
            result = self.on_spec(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 809))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 809)]
            # print self._p_error_stack
        return result

    def decl(self):
        '''decl <- DECLARE ( AT level:text )? source:text NL'''
        args = dict()
        # DECLARE ( AT level:text )? source:text NL
        self.p_save()
        results_819 = []
        
        start_pos_810= self.pos
        if (-8530924775810215010, start_pos_810) in self._p_memoized:
            result, self.pos = self._p_memoized[(-8530924775810215010, self.pos)]
        else:
            result = self.DECLARE()
            self._p_memoized[(-8530924775810215010, start_pos_810)] = result, self.pos
        if result is self.NoMatch:
            results_819 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 819))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 819)]
            # print self._p_error_stack
        else:
            results_819.append(result)
                            
            
            # ( AT level:text )?
            # AT level:text
            self.p_save()
            results_814 = []
            
            start_pos_811= self.pos
            if (-8080327851169991225, start_pos_811) in self._p_memoized:
                result, self.pos = self._p_memoized[(-8080327851169991225, self.pos)]
            else:
                result = self.AT()
                self._p_memoized[(-8080327851169991225, start_pos_811)] = result, self.pos
            if result is self.NoMatch:
                results_814 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 814))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 814)]
                # print self._p_error_stack
            else:
                results_814.append(result)
                                
                
                # level:text
                start_pos_812= self.pos
                if (-1322404022185089166, start_pos_812) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
                else:
                    result = self.text()
                    self._p_memoized[(-1322404022185089166, start_pos_812)] = result, self.pos
                args['level'] = result
                if result is self.NoMatch:
                    results_814 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 814))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 814)]
                    # print self._p_error_stack
                else:
                    results_814.append(result)
                                    
            if results_814 is not self.NoMatch:
                self.p_discard()
            result = results_814
            result = "" if result is self.NoMatch else result
            if result is self.NoMatch:
                # print self._p_error_stack
                self._p_error_stack.pop()
            if result is self.NoMatch:
                results_819 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 819))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 819)]
                # print self._p_error_stack
            else:
                results_819.append(result)
                                
                
                # source:text
                start_pos_816= self.pos
                if (-1322404022185089166, start_pos_816) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
                else:
                    result = self.text()
                    self._p_memoized[(-1322404022185089166, start_pos_816)] = result, self.pos
                args['source'] = result
                if result is self.NoMatch:
                    results_819 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 819))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 819)]
                    # print self._p_error_stack
                else:
                    results_819.append(result)
                                    
                    
                    start_pos_818= self.pos
                    if (-361559891970486465, start_pos_818) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-361559891970486465, self.pos)]
                    else:
                        result = self.NL()
                        self._p_memoized[(-361559891970486465, start_pos_818)] = result, self.pos
                    if result is self.NoMatch:
                        results_819 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 819))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 819)]
                        # print self._p_error_stack
                    else:
                        results_819.append(result)
                                        
        if results_819 is not self.NoMatch:
            self.p_discard()
        result = results_819
        if result is not self.NoMatch:
            result = self.on_decl(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 820))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 820)]
            # print self._p_error_stack
        return result

    def place(self):
        '''place <- PLACE name:text type:placetype? ( EQ tokens:tokens )? NL'''
        args = dict()
        # PLACE name:text type:placetype? ( EQ tokens:tokens )? NL
        self.p_save()
        results_833 = []
        
        start_pos_821= self.pos
        if (388609210007803135, start_pos_821) in self._p_memoized:
            result, self.pos = self._p_memoized[(388609210007803135, self.pos)]
        else:
            result = self.PLACE()
            self._p_memoized[(388609210007803135, start_pos_821)] = result, self.pos
        if result is self.NoMatch:
            results_833 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 833))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 833)]
            # print self._p_error_stack
        else:
            results_833.append(result)
                            
            
            # name:text
            start_pos_822= self.pos
            if (-1322404022185089166, start_pos_822) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
            else:
                result = self.text()
                self._p_memoized[(-1322404022185089166, start_pos_822)] = result, self.pos
            args['name'] = result
            if result is self.NoMatch:
                results_833 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 833))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 833)]
                # print self._p_error_stack
            else:
                results_833.append(result)
                                
                
                # type:placetype?
                # placetype?
                start_pos_824= self.pos
                if (6445876514890274696, start_pos_824) in self._p_memoized:
                    result, self.pos = self._p_memoized[(6445876514890274696, self.pos)]
                else:
                    result = self.placetype()
                    self._p_memoized[(6445876514890274696, start_pos_824)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                args['type'] = result
                if result is self.NoMatch:
                    results_833 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 833))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 833)]
                    # print self._p_error_stack
                else:
                    results_833.append(result)
                                    
                    
                    # ( EQ tokens:tokens )?
                    # EQ tokens:tokens
                    self.p_save()
                    results_830 = []
                    
                    start_pos_827= self.pos
                    if (1096315639356102708, start_pos_827) in self._p_memoized:
                        result, self.pos = self._p_memoized[(1096315639356102708, self.pos)]
                    else:
                        result = self.EQ()
                        self._p_memoized[(1096315639356102708, start_pos_827)] = result, self.pos
                    if result is self.NoMatch:
                        results_830 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 830))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 830)]
                        # print self._p_error_stack
                    else:
                        results_830.append(result)
                                        
                        
                        # tokens:tokens
                        start_pos_828= self.pos
                        if (-7942554026069076363, start_pos_828) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-7942554026069076363, self.pos)]
                        else:
                            result = self.tokens()
                            self._p_memoized[(-7942554026069076363, start_pos_828)] = result, self.pos
                        args['tokens'] = result
                        if result is self.NoMatch:
                            results_830 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 830))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 830)]
                            # print self._p_error_stack
                        else:
                            results_830.append(result)
                                            
                    if results_830 is not self.NoMatch:
                        self.p_discard()
                    result = results_830
                    result = "" if result is self.NoMatch else result
                    if result is self.NoMatch:
                        # print self._p_error_stack
                        self._p_error_stack.pop()
                    if result is self.NoMatch:
                        results_833 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 833))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 833)]
                        # print self._p_error_stack
                    else:
                        results_833.append(result)
                                        
                        
                        start_pos_832= self.pos
                        if (-361559891970486465, start_pos_832) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-361559891970486465, self.pos)]
                        else:
                            result = self.NL()
                            self._p_memoized[(-361559891970486465, start_pos_832)] = result, self.pos
                        if result is self.NoMatch:
                            results_833 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 833))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 833)]
                            # print self._p_error_stack
                        else:
                            results_833.append(result)
                                            
        if results_833 is not self.NoMatch:
            self.p_discard()
        result = results_833
        if result is not self.NoMatch:
            result = self.on_place(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 834))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 834)]
            # print self._p_error_stack
        return result

    def placetype(self):
        '''placetype <- text:text / placetuple:placetuple'''
        args = dict()
        # text:text / placetuple:placetuple
        self.p_save()
        # text:text
        start_pos_835= self.pos
        if (-1322404022185089166, start_pos_835) in self._p_memoized:
            result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
        else:
            result = self.text()
            self._p_memoized[(-1322404022185089166, start_pos_835)] = result, self.pos
        args['text'] = result
        if result is self.NoMatch:
            # placetuple:placetuple
            start_pos_837= self.pos
            if (3625465056516354541, start_pos_837) in self._p_memoized:
                result, self.pos = self._p_memoized[(3625465056516354541, self.pos)]
            else:
                result = self.placetuple()
                self._p_memoized[(3625465056516354541, start_pos_837)] = result, self.pos
            args['placetuple'] = result
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 839))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 839)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self._first(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 840))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 840)]
            # print self._p_error_stack
        return result

    def placetuple(self):
        '''placetuple <- LP placeitem ( COMMA placeitem )* RP'''
        args = dict()
        # LP placeitem ( COMMA placeitem )* RP
        self.p_save()
        results_848 = []
        
        start_pos_841= self.pos
        if (2355883229585110968, start_pos_841) in self._p_memoized:
            result, self.pos = self._p_memoized[(2355883229585110968, self.pos)]
        else:
            result = self.LP()
            self._p_memoized[(2355883229585110968, start_pos_841)] = result, self.pos
        if result is self.NoMatch:
            results_848 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 848))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 848)]
            # print self._p_error_stack
        else:
            results_848.append(result)
                            
            
            start_pos_842= self.pos
            if (-3090792276149871676, start_pos_842) in self._p_memoized:
                result, self.pos = self._p_memoized[(-3090792276149871676, self.pos)]
            else:
                result = self.placeitem()
                self._p_memoized[(-3090792276149871676, start_pos_842)] = result, self.pos
            if result is self.NoMatch:
                results_848 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 848))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 848)]
                # print self._p_error_stack
            else:
                results_848.append(result)
                                
                
                # ( COMMA placeitem )*
                results_846 = []
                while 42:
                    # COMMA placeitem
                    self.p_save()
                    results_845 = []
                    
                    start_pos_843= self.pos
                    if (1652235927043772795, start_pos_843) in self._p_memoized:
                        result, self.pos = self._p_memoized[(1652235927043772795, self.pos)]
                    else:
                        result = self.COMMA()
                        self._p_memoized[(1652235927043772795, start_pos_843)] = result, self.pos
                    if result is self.NoMatch:
                        results_845 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 845))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 845)]
                        # print self._p_error_stack
                    else:
                        results_845.append(result)
                                        
                        
                        start_pos_844= self.pos
                        if (-3090792276149871676, start_pos_844) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-3090792276149871676, self.pos)]
                        else:
                            result = self.placeitem()
                            self._p_memoized[(-3090792276149871676, start_pos_844)] = result, self.pos
                        if result is self.NoMatch:
                            results_845 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 845))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 845)]
                            # print self._p_error_stack
                        else:
                            results_845.append(result)
                                            
                    if results_845 is not self.NoMatch:
                        self.p_discard()
                    result = results_845
                    if result is not self.NoMatch:
                        results_846.append(result)
                    else:
                        break
                # print self._p_error_stack
                result = results_846
                if result is self.NoMatch:
                    results_848 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 848))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 848)]
                    # print self._p_error_stack
                else:
                    results_848.append(result)
                                    
                    
                    start_pos_847= self.pos
                    if (9066410319990028815, start_pos_847) in self._p_memoized:
                        result, self.pos = self._p_memoized[(9066410319990028815, self.pos)]
                    else:
                        result = self.RP()
                        self._p_memoized[(9066410319990028815, start_pos_847)] = result, self.pos
                    if result is self.NoMatch:
                        results_848 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 848))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 848)]
                        # print self._p_error_stack
                    else:
                        results_848.append(result)
                                        
        if results_848 is not self.NoMatch:
            self.p_discard()
        result = results_848
        if result is not self.NoMatch:
            result = self._tuple1(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 849))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 849)]
            # print self._p_error_stack
        return result

    def placeitem(self):
        '''placeitem <- text:text / placetuple:placetuple'''
        args = dict()
        # text:text / placetuple:placetuple
        self.p_save()
        # text:text
        start_pos_850= self.pos
        if (-1322404022185089166, start_pos_850) in self._p_memoized:
            result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
        else:
            result = self.text()
            self._p_memoized[(-1322404022185089166, start_pos_850)] = result, self.pos
        args['text'] = result
        if result is self.NoMatch:
            # placetuple:placetuple
            start_pos_852= self.pos
            if (3625465056516354541, start_pos_852) in self._p_memoized:
                result, self.pos = self._p_memoized[(3625465056516354541, self.pos)]
            else:
                result = self.placetuple()
                self._p_memoized[(3625465056516354541, start_pos_852)] = result, self.pos
            args['placetuple'] = result
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 854))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 854)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self._first(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 855))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 855)]
            # print self._p_error_stack
        return result

    def tokens(self):
        '''tokens <- tok ( COMMA tok )*'''
        args = dict()
        # tok ( COMMA tok )*
        self.p_save()
        results_861 = []
        
        start_pos_856= self.pos
        if (-3588020375792747993, start_pos_856) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3588020375792747993, self.pos)]
        else:
            result = self.tok()
            self._p_memoized[(-3588020375792747993, start_pos_856)] = result, self.pos
        if result is self.NoMatch:
            results_861 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 861))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 861)]
            # print self._p_error_stack
        else:
            results_861.append(result)
                            
            
            # ( COMMA tok )*
            results_860 = []
            while 42:
                # COMMA tok
                self.p_save()
                results_859 = []
                
                start_pos_857= self.pos
                if (1652235927043772795, start_pos_857) in self._p_memoized:
                    result, self.pos = self._p_memoized[(1652235927043772795, self.pos)]
                else:
                    result = self.COMMA()
                    self._p_memoized[(1652235927043772795, start_pos_857)] = result, self.pos
                if result is self.NoMatch:
                    results_859 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 859))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 859)]
                    # print self._p_error_stack
                else:
                    results_859.append(result)
                                    
                    
                    start_pos_858= self.pos
                    if (-3588020375792747993, start_pos_858) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-3588020375792747993, self.pos)]
                    else:
                        result = self.tok()
                        self._p_memoized[(-3588020375792747993, start_pos_858)] = result, self.pos
                    if result is self.NoMatch:
                        results_859 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 859))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 859)]
                        # print self._p_error_stack
                    else:
                        results_859.append(result)
                                        
                if results_859 is not self.NoMatch:
                    self.p_discard()
                result = results_859
                if result is not self.NoMatch:
                    results_860.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_860
            if result is self.NoMatch:
                results_861 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 861))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 861)]
                # print self._p_error_stack
            else:
                results_861.append(result)
                                
        if results_861 is not self.NoMatch:
            self.p_discard()
        result = results_861
        if result is not self.NoMatch:
            result = self._tuple(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 862))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 862)]
            # print self._p_error_stack
        return result

    def tok(self):
        '''tok <- number:NUMBER / text:text'''
        args = dict()
        # number:NUMBER / text:text
        self.p_save()
        # number:NUMBER
        start_pos_863= self.pos
        if (6277049243889170315, start_pos_863) in self._p_memoized:
            result, self.pos = self._p_memoized[(6277049243889170315, self.pos)]
        else:
            result = self.NUMBER()
            self._p_memoized[(6277049243889170315, start_pos_863)] = result, self.pos
        args['number'] = result
        if result is self.NoMatch:
            # text:text
            start_pos_865= self.pos
            if (-1322404022185089166, start_pos_865) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
            else:
                result = self.text()
                self._p_memoized[(-1322404022185089166, start_pos_865)] = result, self.pos
            args['text'] = result
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 867))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 867)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self._first(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 868))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 868)]
            # print self._p_error_stack
        return result

    def trans(self):
        '''trans <- TRANS name:text guard:~\'[^:]+\'? COLON NL INDENT arcs:arc+ DEDENT'''
        args = dict()
        # TRANS name:text guard:~'[^:]+'? COLON NL INDENT arcs:arc+ DEDENT
        self.p_save()
        results_882 = []
        
        start_pos_869= self.pos
        if (-8704202114929319610, start_pos_869) in self._p_memoized:
            result, self.pos = self._p_memoized[(-8704202114929319610, self.pos)]
        else:
            result = self.TRANS()
            self._p_memoized[(-8704202114929319610, start_pos_869)] = result, self.pos
        if result is self.NoMatch:
            results_882 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 882))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 882)]
            # print self._p_error_stack
        else:
            results_882.append(result)
                            
            
            # name:text
            start_pos_870= self.pos
            if (-1322404022185089166, start_pos_870) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
            else:
                result = self.text()
                self._p_memoized[(-1322404022185089166, start_pos_870)] = result, self.pos
            args['name'] = result
            if result is self.NoMatch:
                results_882 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 882))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 882)]
                # print self._p_error_stack
            else:
                results_882.append(result)
                                
                
                # guard:~'[^:]+'?
                # ~'[^:]+'?
                # ~'[^:]+'
                regex = self._p_py_constants[872]["regex"]
                m = regex.match(self.p_suffix())
                if m:
                    result = self.p_suffix(m.end())
                    self.pos += m.end()
                else:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 872))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 872)]
                    # print self._p_error_stack
                    result = self.NoMatch
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                args['guard'] = result
                if result is self.NoMatch:
                    results_882 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 882))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 882)]
                    # print self._p_error_stack
                else:
                    results_882.append(result)
                                    
                    
                    start_pos_875= self.pos
                    if (3471066863753705485, start_pos_875) in self._p_memoized:
                        result, self.pos = self._p_memoized[(3471066863753705485, self.pos)]
                    else:
                        result = self.COLON()
                        self._p_memoized[(3471066863753705485, start_pos_875)] = result, self.pos
                    if result is self.NoMatch:
                        results_882 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 882))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 882)]
                        # print self._p_error_stack
                    else:
                        results_882.append(result)
                                        
                        
                        start_pos_876= self.pos
                        if (-361559891970486465, start_pos_876) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-361559891970486465, self.pos)]
                        else:
                            result = self.NL()
                            self._p_memoized[(-361559891970486465, start_pos_876)] = result, self.pos
                        if result is self.NoMatch:
                            results_882 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 882))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 882)]
                            # print self._p_error_stack
                        else:
                            results_882.append(result)
                                            
                            
                            start_pos_877= self.pos
                            if (5896166314092667844, start_pos_877) in self._p_memoized:
                                result, self.pos = self._p_memoized[(5896166314092667844, self.pos)]
                            else:
                                result = self.INDENT()
                                self._p_memoized[(5896166314092667844, start_pos_877)] = result, self.pos
                            if result is self.NoMatch:
                                results_882 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 882))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 882)]
                                # print self._p_error_stack
                            else:
                                results_882.append(result)
                                                
                                
                                # arcs:arc+
                                # arc+
                                self.p_save()
                                results_879 = []
                                while 42:
                                    start_pos_878= self.pos
                                    if (8357683989086415832, start_pos_878) in self._p_memoized:
                                        result, self.pos = self._p_memoized[(8357683989086415832, self.pos)]
                                    else:
                                        result = self.arc()
                                        self._p_memoized[(8357683989086415832, start_pos_878)] = result, self.pos
                                    if result is not self.NoMatch:
                                        results_879.append(result)
                                    else:
                                        break
                                if not results_879:
                                    self.p_restore()
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 879))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 879)]
                                    # print self._p_error_stack
                                    result = self.NoMatch
                                else:
                                    self.p_discard()
                                    result = results_879
                                args['arcs'] = result
                                if result is self.NoMatch:
                                    results_882 = self.NoMatch
                                    self.p_restore()
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 882))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 882)]
                                    # print self._p_error_stack
                                else:
                                    results_882.append(result)
                                                    
                                    
                                    start_pos_881= self.pos
                                    if (3900992445004724228, start_pos_881) in self._p_memoized:
                                        result, self.pos = self._p_memoized[(3900992445004724228, self.pos)]
                                    else:
                                        result = self.DEDENT()
                                        self._p_memoized[(3900992445004724228, start_pos_881)] = result, self.pos
                                    if result is self.NoMatch:
                                        results_882 = self.NoMatch
                                        self.p_restore()
                                        if self._p_error_stack:
                                            head = self._p_error_stack[0]
                                        else:
                                            head = (0, 0)
                                        if self.pos <= head[0]:
                                            self._p_error_stack.append((self.pos, 882))
                                        elif self.pos > head[0]:
                                            self._p_error_stack = [(self.pos, 882)]
                                        # print self._p_error_stack
                                    else:
                                        results_882.append(result)
                                                        
        if results_882 is not self.NoMatch:
            self.p_discard()
        result = results_882
        if result is not self.NoMatch:
            result = self.on_trans(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 883))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 883)]
            # print self._p_error_stack
        return result

    def arc(self):
        '''arc <- way:( LT / GT ) place:text mod:arcmod? kind:arckind EQ label:TAIL NL'''
        args = dict()
        # way:( LT / GT ) place:text mod:arcmod? kind:arckind EQ label:TAIL NL
        self.p_save()
        results_899 = []
        
        # way:( LT / GT )
        # LT / GT
        self.p_save()
        start_pos_884= self.pos
        if (310795301520133250, start_pos_884) in self._p_memoized:
            result, self.pos = self._p_memoized[(310795301520133250, self.pos)]
        else:
            result = self.LT()
            self._p_memoized[(310795301520133250, start_pos_884)] = result, self.pos
        if result is self.NoMatch:
            start_pos_885= self.pos
            if (-4905569849247132435, start_pos_885) in self._p_memoized:
                result, self.pos = self._p_memoized[(-4905569849247132435, self.pos)]
            else:
                result = self.GT()
                self._p_memoized[(-4905569849247132435, start_pos_885)] = result, self.pos
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 886))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 886)]
            # print self._p_error_stack
        else:
            self.p_discard()
        args['way'] = result
        if result is self.NoMatch:
            results_899 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 899))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 899)]
            # print self._p_error_stack
        else:
            results_899.append(result)
                            
            
            # place:text
            start_pos_888= self.pos
            if (-1322404022185089166, start_pos_888) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
            else:
                result = self.text()
                self._p_memoized[(-1322404022185089166, start_pos_888)] = result, self.pos
            args['place'] = result
            if result is self.NoMatch:
                results_899 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 899))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 899)]
                # print self._p_error_stack
            else:
                results_899.append(result)
                                
                
                # mod:arcmod?
                # arcmod?
                start_pos_890= self.pos
                if (-851462273001373478, start_pos_890) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-851462273001373478, self.pos)]
                else:
                    result = self.arcmod()
                    self._p_memoized[(-851462273001373478, start_pos_890)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                args['mod'] = result
                if result is self.NoMatch:
                    results_899 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 899))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 899)]
                    # print self._p_error_stack
                else:
                    results_899.append(result)
                                    
                    
                    # kind:arckind
                    start_pos_893= self.pos
                    if (6410873000304521239, start_pos_893) in self._p_memoized:
                        result, self.pos = self._p_memoized[(6410873000304521239, self.pos)]
                    else:
                        result = self.arckind()
                        self._p_memoized[(6410873000304521239, start_pos_893)] = result, self.pos
                    args['kind'] = result
                    if result is self.NoMatch:
                        results_899 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 899))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 899)]
                        # print self._p_error_stack
                    else:
                        results_899.append(result)
                                        
                        
                        start_pos_895= self.pos
                        if (1096315639356102708, start_pos_895) in self._p_memoized:
                            result, self.pos = self._p_memoized[(1096315639356102708, self.pos)]
                        else:
                            result = self.EQ()
                            self._p_memoized[(1096315639356102708, start_pos_895)] = result, self.pos
                        if result is self.NoMatch:
                            results_899 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 899))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 899)]
                            # print self._p_error_stack
                        else:
                            results_899.append(result)
                                            
                            
                            # label:TAIL
                            start_pos_896= self.pos
                            if (-8325935599027314560, start_pos_896) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-8325935599027314560, self.pos)]
                            else:
                                result = self.TAIL()
                                self._p_memoized[(-8325935599027314560, start_pos_896)] = result, self.pos
                            args['label'] = result
                            if result is self.NoMatch:
                                results_899 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 899))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 899)]
                                # print self._p_error_stack
                            else:
                                results_899.append(result)
                                                
                                
                                start_pos_898= self.pos
                                if (-361559891970486465, start_pos_898) in self._p_memoized:
                                    result, self.pos = self._p_memoized[(-361559891970486465, self.pos)]
                                else:
                                    result = self.NL()
                                    self._p_memoized[(-361559891970486465, start_pos_898)] = result, self.pos
                                if result is self.NoMatch:
                                    results_899 = self.NoMatch
                                    self.p_restore()
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 899))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 899)]
                                    # print self._p_error_stack
                                else:
                                    results_899.append(result)
                                                    
        if results_899 is not self.NoMatch:
            self.p_discard()
        result = results_899
        if result is not self.NoMatch:
            result = self.on_arc(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 900))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 900)]
            # print self._p_error_stack
        return result

    def arckind(self):
        '''arckind <- VAL / VAR / EXPR / FLUSHPLUS / FLUSH / FILL / arctuple'''
        args = dict()
        # VAL / VAR / EXPR / FLUSHPLUS / FLUSH / FILL / arctuple
        self.p_save()
        start_pos_901= self.pos
        if (-3349115312886428533, start_pos_901) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3349115312886428533, self.pos)]
        else:
            result = self.VAL()
            self._p_memoized[(-3349115312886428533, start_pos_901)] = result, self.pos
        if result is self.NoMatch:
            start_pos_902= self.pos
            if (-1832575678036567118, start_pos_902) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1832575678036567118, self.pos)]
            else:
                result = self.VAR()
                self._p_memoized[(-1832575678036567118, start_pos_902)] = result, self.pos
            if result is self.NoMatch:
                start_pos_903= self.pos
                if (-1753963018608164886, start_pos_903) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-1753963018608164886, self.pos)]
                else:
                    result = self.EXPR()
                    self._p_memoized[(-1753963018608164886, start_pos_903)] = result, self.pos
                if result is self.NoMatch:
                    start_pos_904= self.pos
                    if (6426770499911766140, start_pos_904) in self._p_memoized:
                        result, self.pos = self._p_memoized[(6426770499911766140, self.pos)]
                    else:
                        result = self.FLUSHPLUS()
                        self._p_memoized[(6426770499911766140, start_pos_904)] = result, self.pos
                    if result is self.NoMatch:
                        start_pos_905= self.pos
                        if (-6247503213686650565, start_pos_905) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-6247503213686650565, self.pos)]
                        else:
                            result = self.FLUSH()
                            self._p_memoized[(-6247503213686650565, start_pos_905)] = result, self.pos
                        if result is self.NoMatch:
                            start_pos_906= self.pos
                            if (5372346489355264142, start_pos_906) in self._p_memoized:
                                result, self.pos = self._p_memoized[(5372346489355264142, self.pos)]
                            else:
                                result = self.FILL()
                                self._p_memoized[(5372346489355264142, start_pos_906)] = result, self.pos
                            if result is self.NoMatch:
                                start_pos_907= self.pos
                                if (4121306436367038340, start_pos_907) in self._p_memoized:
                                    result, self.pos = self._p_memoized[(4121306436367038340, self.pos)]
                                else:
                                    result = self.arctuple()
                                    self._p_memoized[(4121306436367038340, start_pos_907)] = result, self.pos
                                if result is self.NoMatch:
                                    pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 908))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 908)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            pass
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 909))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 909)]
            # print self._p_error_stack
        return result

    def arcmod(self):
        '''arcmod <- kind:( TEST / BANG ) guard:code?'''
        args = dict()
        # kind:( TEST / BANG ) guard:code?
        self.p_save()
        results_917 = []
        
        # kind:( TEST / BANG )
        # TEST / BANG
        self.p_save()
        start_pos_910= self.pos
        if (-867954681063273397, start_pos_910) in self._p_memoized:
            result, self.pos = self._p_memoized[(-867954681063273397, self.pos)]
        else:
            result = self.TEST()
            self._p_memoized[(-867954681063273397, start_pos_910)] = result, self.pos
        if result is self.NoMatch:
            start_pos_911= self.pos
            if (-3049601247934429374, start_pos_911) in self._p_memoized:
                result, self.pos = self._p_memoized[(-3049601247934429374, self.pos)]
            else:
                result = self.BANG()
                self._p_memoized[(-3049601247934429374, start_pos_911)] = result, self.pos
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 912))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 912)]
            # print self._p_error_stack
        else:
            self.p_discard()
        args['kind'] = result
        if result is self.NoMatch:
            results_917 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 917))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 917)]
            # print self._p_error_stack
        else:
            results_917.append(result)
                            
            
            # guard:code?
            # code?
            start_pos_914= self.pos
            if (-7377823409447125660, start_pos_914) in self._p_memoized:
                result, self.pos = self._p_memoized[(-7377823409447125660, self.pos)]
            else:
                result = self.code()
                self._p_memoized[(-7377823409447125660, start_pos_914)] = result, self.pos
            result = "" if result is self.NoMatch else result
            if result is self.NoMatch:
                # print self._p_error_stack
                self._p_error_stack.pop()
            args['guard'] = result
            if result is self.NoMatch:
                results_917 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 917))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 917)]
                # print self._p_error_stack
            else:
                results_917.append(result)
                                
        if results_917 is not self.NoMatch:
            self.p_discard()
        result = results_917
        if result is not self.NoMatch:
            result = self.on_arcmod(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 918))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 918)]
            # print self._p_error_stack
        return result

    def arctuple(self):
        '''arctuple <- LP arcitem ( COMMA arcitem )* RP'''
        args = dict()
        # LP arcitem ( COMMA arcitem )* RP
        self.p_save()
        results_926 = []
        
        start_pos_919= self.pos
        if (2355883229585110968, start_pos_919) in self._p_memoized:
            result, self.pos = self._p_memoized[(2355883229585110968, self.pos)]
        else:
            result = self.LP()
            self._p_memoized[(2355883229585110968, start_pos_919)] = result, self.pos
        if result is self.NoMatch:
            results_926 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 926))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 926)]
            # print self._p_error_stack
        else:
            results_926.append(result)
                            
            
            start_pos_920= self.pos
            if (3213543296385913660, start_pos_920) in self._p_memoized:
                result, self.pos = self._p_memoized[(3213543296385913660, self.pos)]
            else:
                result = self.arcitem()
                self._p_memoized[(3213543296385913660, start_pos_920)] = result, self.pos
            if result is self.NoMatch:
                results_926 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 926))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 926)]
                # print self._p_error_stack
            else:
                results_926.append(result)
                                
                
                # ( COMMA arcitem )*
                results_924 = []
                while 42:
                    # COMMA arcitem
                    self.p_save()
                    results_923 = []
                    
                    start_pos_921= self.pos
                    if (1652235927043772795, start_pos_921) in self._p_memoized:
                        result, self.pos = self._p_memoized[(1652235927043772795, self.pos)]
                    else:
                        result = self.COMMA()
                        self._p_memoized[(1652235927043772795, start_pos_921)] = result, self.pos
                    if result is self.NoMatch:
                        results_923 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 923))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 923)]
                        # print self._p_error_stack
                    else:
                        results_923.append(result)
                                        
                        
                        start_pos_922= self.pos
                        if (3213543296385913660, start_pos_922) in self._p_memoized:
                            result, self.pos = self._p_memoized[(3213543296385913660, self.pos)]
                        else:
                            result = self.arcitem()
                            self._p_memoized[(3213543296385913660, start_pos_922)] = result, self.pos
                        if result is self.NoMatch:
                            results_923 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 923))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 923)]
                            # print self._p_error_stack
                        else:
                            results_923.append(result)
                                            
                    if results_923 is not self.NoMatch:
                        self.p_discard()
                    result = results_923
                    if result is not self.NoMatch:
                        results_924.append(result)
                    else:
                        break
                # print self._p_error_stack
                result = results_924
                if result is self.NoMatch:
                    results_926 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 926))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 926)]
                    # print self._p_error_stack
                else:
                    results_926.append(result)
                                    
                    
                    start_pos_925= self.pos
                    if (9066410319990028815, start_pos_925) in self._p_memoized:
                        result, self.pos = self._p_memoized[(9066410319990028815, self.pos)]
                    else:
                        result = self.RP()
                        self._p_memoized[(9066410319990028815, start_pos_925)] = result, self.pos
                    if result is self.NoMatch:
                        results_926 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 926))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 926)]
                        # print self._p_error_stack
                    else:
                        results_926.append(result)
                                        
        if results_926 is not self.NoMatch:
            self.p_discard()
        result = results_926
        if result is not self.NoMatch:
            result = self._tuple1(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 927))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 927)]
            # print self._p_error_stack
        return result

    def arcitem(self):
        '''arcitem <- text:text / number:NUMBER / arctuple:arctuple'''
        args = dict()
        # text:text / number:NUMBER / arctuple:arctuple
        self.p_save()
        # text:text
        start_pos_928= self.pos
        if (-1322404022185089166, start_pos_928) in self._p_memoized:
            result, self.pos = self._p_memoized[(-1322404022185089166, self.pos)]
        else:
            result = self.text()
            self._p_memoized[(-1322404022185089166, start_pos_928)] = result, self.pos
        args['text'] = result
        if result is self.NoMatch:
            # number:NUMBER
            start_pos_930= self.pos
            if (6277049243889170315, start_pos_930) in self._p_memoized:
                result, self.pos = self._p_memoized[(6277049243889170315, self.pos)]
            else:
                result = self.NUMBER()
                self._p_memoized[(6277049243889170315, start_pos_930)] = result, self.pos
            args['number'] = result
            if result is self.NoMatch:
                # arctuple:arctuple
                start_pos_932= self.pos
                if (4121306436367038340, start_pos_932) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4121306436367038340, self.pos)]
                else:
                    result = self.arctuple()
                    self._p_memoized[(4121306436367038340, start_pos_932)] = result, self.pos
                args['arctuple'] = result
                if result is self.NoMatch:
                    pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 934))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 934)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self._first(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 935))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 935)]
            # print self._p_error_stack
        return result


    _p_expressions = {
        291: _Expr(is_syntaxic_terminal=False, expected=['__']),
        292: _Expr(is_syntaxic_terminal=False, expected=['rule']),
        293: _Expr(is_syntaxic_terminal=False, expected=['__']),
        294: _Expr(is_syntaxic_terminal=False, expected=['rule __'], exprs=True),
        295: _Expr(is_syntaxic_terminal=False, expected=['( rule __ )+'], expr=True),
        296: _Expr(is_syntaxic_terminal=False, expected=['rules:( rule __ )+'], expr=True),
        297: _Expr(is_syntaxic_terminal=False, expected=['__ rules:( rule __ )+'], exprs=True),
        298: _Expr(is_syntaxic_terminal=False, expected=['__ rules:( rule __ )+'], expr=True),
        299: _Expr(is_syntaxic_terminal=False, expected=['"`"']),
        300: _Expr(is_syntaxic_terminal=False, expected=['"`"?'], expr=True),
        301: _Expr(is_syntaxic_terminal=False, expected=['terminal:"`"?'], expr=True),
        302: _Expr(is_syntaxic_terminal=False, expected=['identifier_name']),
        303: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name'], expr=True),
        304: _Expr(is_syntaxic_terminal=False, expected=['__']),
        305: _Expr(is_syntaxic_terminal=False, expected=['alias']),
        306: _Expr(is_syntaxic_terminal=False, expected=['alias:alias'], expr=True),
        307: _Expr(is_syntaxic_terminal=False, expected=['_']),
        308: _Expr(is_syntaxic_terminal=False, expected=['alias:alias _'], exprs=True),
        309: _Expr(is_syntaxic_terminal=False, expected=['( alias:alias _ )?'], expr=True),
        310: _Expr(is_syntaxic_terminal=False, expected=['"<-"']),
        311: _Expr(is_syntaxic_terminal=False, expected=['__']),
        312: _Expr(is_syntaxic_terminal=False, expected=['expression']),
        313: _Expr(is_syntaxic_terminal=False, expected=['expr:expression'], expr=True),
        314: _Expr(is_syntaxic_terminal=False, expected=['__']),
        315: _Expr(is_syntaxic_terminal=False, expected=['code_block']),
        316: _Expr(is_syntaxic_terminal=False, expected=['__ code_block'], exprs=True),
        317: _Expr(is_syntaxic_terminal=False, expected=['( __ code_block )?'], expr=True),
        318: _Expr(is_syntaxic_terminal=False, expected=['code:( __ code_block )?'], expr=True),
        319: _Expr(is_syntaxic_terminal=False, expected=['EOS']),
        320: _Expr(is_syntaxic_terminal=False, expected=['terminal:"`"? name:identifier_name __ ( alias:alias _ )? "<-" __ expr:expression code:( __ code_block )? EOS'], exprs=True),
        321: _Expr(is_syntaxic_terminal=True, expected=['RULE'], expr=True),
        322: _Expr(is_syntaxic_terminal=False, expected=['"{"']),
        323: _Expr(is_syntaxic_terminal=False, expected=['code']),
        324: _Expr(is_syntaxic_terminal=False, expected=['code:code'], expr=True),
        325: _Expr(is_syntaxic_terminal=False, expected=['"}"']),
        326: _Expr(is_syntaxic_terminal=False, expected=['"{" code:code "}"'], exprs=True),
        327: _Expr(is_syntaxic_terminal=True, expected=['CODE_BLOCK'], expr=True),
        328: _Expr(is_syntaxic_terminal=False, expected=['[{}]']),
        329: _Expr(is_syntaxic_terminal=False, expected=['![{}]'], expr=True),
        330: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        331: _Expr(is_syntaxic_terminal=False, expected=['![{}] source_char'], exprs=True),
        332: _Expr(is_syntaxic_terminal=False, expected=['( ![{}] source_char )+'], expr=True),
        333: _Expr(is_syntaxic_terminal=False, expected=['"{"']),
        334: _Expr(is_syntaxic_terminal=False, expected=['code']),
        335: _Expr(is_syntaxic_terminal=False, expected=['"}"']),
        336: _Expr(is_syntaxic_terminal=False, expected=['"{" code "}"'], exprs=True),
        337: _Expr(is_syntaxic_terminal=False, expected=['( ![{}] source_char )+ / ( "{" code "}" )'], exprs=True),
        338: _Expr(is_syntaxic_terminal=False, expected=['( ( ![{}] source_char )+ / ( "{" code "}" ) )*'], expr=True),
        339: _Expr(is_syntaxic_terminal=False, expected=['( ( ![{}] source_char )+ / ( "{" code "}" ) )*'], expr=True),
        340: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        341: _Expr(is_syntaxic_terminal=True, expected=['ALIAS'], expr=True),
        342: _Expr(is_syntaxic_terminal=False, expected=['choice_expr']),
        343: _Expr(is_syntaxic_terminal=True, expected=['EXPRESSION'], expr=True),
        344: _Expr(is_syntaxic_terminal=False, expected=['seq_expr']),
        345: _Expr(is_syntaxic_terminal=False, expected=['first:seq_expr'], expr=True),
        346: _Expr(is_syntaxic_terminal=False, expected=['__']),
        347: _Expr(is_syntaxic_terminal=False, expected=['"/"']),
        348: _Expr(is_syntaxic_terminal=False, expected=['__']),
        349: _Expr(is_syntaxic_terminal=False, expected=['seq_expr']),
        350: _Expr(is_syntaxic_terminal=False, expected=['__ "/" __ seq_expr'], exprs=True),
        351: _Expr(is_syntaxic_terminal=False, expected=['( __ "/" __ seq_expr )*'], expr=True),
        352: _Expr(is_syntaxic_terminal=False, expected=['rest:( __ "/" __ seq_expr )*'], expr=True),
        353: _Expr(is_syntaxic_terminal=False, expected=['first:seq_expr rest:( __ "/" __ seq_expr )*'], exprs=True),
        354: _Expr(is_syntaxic_terminal=False, expected=['first:seq_expr rest:( __ "/" __ seq_expr )*'], expr=True),
        355: _Expr(is_syntaxic_terminal=False, expected=['regexp_expr']),
        356: _Expr(is_syntaxic_terminal=False, expected=['lit_expr']),
        357: _Expr(is_syntaxic_terminal=False, expected=['char_range_expr']),
        358: _Expr(is_syntaxic_terminal=False, expected=['any_char_expr']),
        359: _Expr(is_syntaxic_terminal=False, expected=['rule_expr']),
        360: _Expr(is_syntaxic_terminal=False, expected=['sub_expr']),
        361: _Expr(is_syntaxic_terminal=False, expected=['regexp_expr / lit_expr / char_range_expr / any_char_expr / rule_expr / sub_expr'], exprs=True),
        362: _Expr(is_syntaxic_terminal=False, expected=['regexp_expr / lit_expr / char_range_expr / any_char_expr / rule_expr / sub_expr'], expr=True),
        363: _Expr(is_syntaxic_terminal=False, expected=['"("']),
        364: _Expr(is_syntaxic_terminal=False, expected=['__']),
        365: _Expr(is_syntaxic_terminal=False, expected=['expression']),
        366: _Expr(is_syntaxic_terminal=False, expected=['expr:expression'], expr=True),
        367: _Expr(is_syntaxic_terminal=False, expected=['__']),
        368: _Expr(is_syntaxic_terminal=False, expected=['")"']),
        369: _Expr(is_syntaxic_terminal=False, expected=['"(" __ expr:expression __ ")"'], exprs=True),
        370: _Expr(is_syntaxic_terminal=False, expected=['"(" __ expr:expression __ ")"'], expr=True),
        371: _Expr(is_syntaxic_terminal=False, expected=['"~"']),
        372: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        373: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal'], expr=True),
        374: _Expr(is_syntaxic_terminal=False, expected=['[iLmsux]']),
        375: _Expr(is_syntaxic_terminal=False, expected=['[iLmsux]*'], expr=True),
        376: _Expr(is_syntaxic_terminal=False, expected=['flags:[iLmsux]*'], expr=True),
        377: _Expr(is_syntaxic_terminal=False, expected=['"~" lit:string_literal flags:[iLmsux]*'], exprs=True),
        378: _Expr(is_syntaxic_terminal=False, expected=['"~" lit:string_literal flags:[iLmsux]*'], expr=True),
        379: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        380: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal'], expr=True),
        381: _Expr(is_syntaxic_terminal=False, expected=['"i"']),
        382: _Expr(is_syntaxic_terminal=False, expected=['"i"?'], expr=True),
        383: _Expr(is_syntaxic_terminal=False, expected=['ignore:"i"?'], expr=True),
        384: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal ignore:"i"?'], exprs=True),
        385: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal ignore:"i"?'], expr=True),
        386: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        387: _Expr(is_syntaxic_terminal=False, expected=['double_string_char']),
        388: _Expr(is_syntaxic_terminal=False, expected=['double_string_char*'], expr=True),
        389: _Expr(is_syntaxic_terminal=False, expected=['content:double_string_char*'], expr=True),
        390: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        391: _Expr(is_syntaxic_terminal=False, expected=['\'"\' content:double_string_char* \'"\''], exprs=True),
        392: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        393: _Expr(is_syntaxic_terminal=False, expected=['single_string_char']),
        394: _Expr(is_syntaxic_terminal=False, expected=['single_string_char*'], expr=True),
        395: _Expr(is_syntaxic_terminal=False, expected=['content:single_string_char*'], expr=True),
        396: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        397: _Expr(is_syntaxic_terminal=False, expected=['"\'" content:single_string_char* "\'"'], exprs=True),
        398: _Expr(is_syntaxic_terminal=False, expected=['( \'"\' content:double_string_char* \'"\' ) / ( "\'" content:single_string_char* "\'" )'], exprs=True),
        399: _Expr(is_syntaxic_terminal=False, expected=['( \'"\' content:double_string_char* \'"\' ) / ( "\'" content:single_string_char* "\'" )'], expr=True),
        400: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        401: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        402: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        403: _Expr(is_syntaxic_terminal=False, expected=['\'"\' / "\\\\" / EOL'], exprs=True),
        404: _Expr(is_syntaxic_terminal=False, expected=['!( \'"\' / "\\\\" / EOL )'], expr=True),
        405: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        406: _Expr(is_syntaxic_terminal=False, expected=['char:source_char'], expr=True),
        407: _Expr(is_syntaxic_terminal=False, expected=['!( \'"\' / "\\\\" / EOL ) char:source_char'], exprs=True),
        408: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        409: _Expr(is_syntaxic_terminal=False, expected=['double_string_escape']),
        410: _Expr(is_syntaxic_terminal=False, expected=['char:double_string_escape'], expr=True),
        411: _Expr(is_syntaxic_terminal=False, expected=['"\\\\" char:double_string_escape'], exprs=True),
        412: _Expr(is_syntaxic_terminal=False, expected=['( !( \'"\' / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:double_string_escape )'], exprs=True),
        413: _Expr(is_syntaxic_terminal=False, expected=['( !( \'"\' / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:double_string_escape )'], expr=True),
        414: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        415: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        416: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        417: _Expr(is_syntaxic_terminal=False, expected=['"\'" / "\\\\" / EOL'], exprs=True),
        418: _Expr(is_syntaxic_terminal=False, expected=['!( "\'" / "\\\\" / EOL )'], expr=True),
        419: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        420: _Expr(is_syntaxic_terminal=False, expected=['char:source_char'], expr=True),
        421: _Expr(is_syntaxic_terminal=False, expected=['!( "\'" / "\\\\" / EOL ) char:source_char'], exprs=True),
        422: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        423: _Expr(is_syntaxic_terminal=False, expected=['single_string_escape']),
        424: _Expr(is_syntaxic_terminal=False, expected=['char:single_string_escape'], expr=True),
        425: _Expr(is_syntaxic_terminal=False, expected=['"\\\\" char:single_string_escape'], exprs=True),
        426: _Expr(is_syntaxic_terminal=False, expected=['( !( "\'" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:single_string_escape )'], exprs=True),
        427: _Expr(is_syntaxic_terminal=False, expected=['( !( "\'" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:single_string_escape )'], expr=True),
        428: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        429: _Expr(is_syntaxic_terminal=False, expected=['common_escape']),
        430: _Expr(is_syntaxic_terminal=False, expected=['"\'" / common_escape'], exprs=True),
        431: _Expr(is_syntaxic_terminal=False, expected=['"\'" / common_escape'], expr=True),
        432: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        433: _Expr(is_syntaxic_terminal=False, expected=['common_escape']),
        434: _Expr(is_syntaxic_terminal=False, expected=['\'"\' / common_escape'], exprs=True),
        435: _Expr(is_syntaxic_terminal=False, expected=['\'"\' / common_escape'], expr=True),
        436: _Expr(is_syntaxic_terminal=False, expected=['"."']),
        437: _Expr(is_syntaxic_terminal=False, expected=['"."'], expr=True),
        438: _Expr(is_syntaxic_terminal=False, expected=['identifier_name']),
        439: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name'], expr=True),
        440: _Expr(is_syntaxic_terminal=False, expected=['__']),
        441: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        442: _Expr(is_syntaxic_terminal=False, expected=['__']),
        443: _Expr(is_syntaxic_terminal=False, expected=['string_literal __'], exprs=True),
        444: _Expr(is_syntaxic_terminal=False, expected=['( string_literal __ )?'], expr=True),
        445: _Expr(is_syntaxic_terminal=False, expected=['"<-"']),
        446: _Expr(is_syntaxic_terminal=False, expected=['__ ( string_literal __ )? "<-"'], exprs=True),
        447: _Expr(is_syntaxic_terminal=False, expected=['!( __ ( string_literal __ )? "<-" )'], expr=True),
        448: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name !( __ ( string_literal __ )? "<-" )'], exprs=True),
        449: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name !( __ ( string_literal __ )? "<-" )'], expr=True),
        450: _Expr(is_syntaxic_terminal=False, expected=['labeled_expr']),
        451: _Expr(is_syntaxic_terminal=False, expected=['first:labeled_expr'], expr=True),
        452: _Expr(is_syntaxic_terminal=False, expected=['__']),
        453: _Expr(is_syntaxic_terminal=False, expected=['labeled_expr']),
        454: _Expr(is_syntaxic_terminal=False, expected=['__ labeled_expr'], exprs=True),
        455: _Expr(is_syntaxic_terminal=False, expected=['( __ labeled_expr )*'], expr=True),
        456: _Expr(is_syntaxic_terminal=False, expected=['rest:( __ labeled_expr )*'], expr=True),
        457: _Expr(is_syntaxic_terminal=False, expected=['first:labeled_expr rest:( __ labeled_expr )*'], exprs=True),
        458: _Expr(is_syntaxic_terminal=False, expected=['first:labeled_expr rest:( __ labeled_expr )*'], expr=True),
        459: _Expr(is_syntaxic_terminal=False, expected=['identifier']),
        460: _Expr(is_syntaxic_terminal=False, expected=['identifier?'], expr=True),
        461: _Expr(is_syntaxic_terminal=False, expected=['__']),
        462: _Expr(is_syntaxic_terminal=False, expected=['":"']),
        463: _Expr(is_syntaxic_terminal=False, expected=['__']),
        464: _Expr(is_syntaxic_terminal=False, expected=['identifier? __ ":" __'], exprs=True),
        465: _Expr(is_syntaxic_terminal=False, expected=['( identifier? __ ":" __ )?'], expr=True),
        466: _Expr(is_syntaxic_terminal=False, expected=['label:( identifier? __ ":" __ )?'], expr=True),
        467: _Expr(is_syntaxic_terminal=False, expected=['prefixed_expr']),
        468: _Expr(is_syntaxic_terminal=False, expected=['expr:prefixed_expr'], expr=True),
        469: _Expr(is_syntaxic_terminal=False, expected=['label:( identifier? __ ":" __ )? expr:prefixed_expr'], exprs=True),
        470: _Expr(is_syntaxic_terminal=False, expected=['label:( identifier? __ ":" __ )? expr:prefixed_expr'], expr=True),
        471: _Expr(is_syntaxic_terminal=False, expected=['prefix']),
        472: _Expr(is_syntaxic_terminal=False, expected=['__']),
        473: _Expr(is_syntaxic_terminal=False, expected=['prefix __'], exprs=True),
        474: _Expr(is_syntaxic_terminal=False, expected=['( prefix __ )?'], expr=True),
        475: _Expr(is_syntaxic_terminal=False, expected=['prefix:( prefix __ )?'], expr=True),
        476: _Expr(is_syntaxic_terminal=False, expected=['suffixed_expr']),
        477: _Expr(is_syntaxic_terminal=False, expected=['expr:suffixed_expr'], expr=True),
        478: _Expr(is_syntaxic_terminal=False, expected=['prefix:( prefix __ )? expr:suffixed_expr'], exprs=True),
        479: _Expr(is_syntaxic_terminal=False, expected=['prefix:( prefix __ )? expr:suffixed_expr'], expr=True),
        480: _Expr(is_syntaxic_terminal=False, expected=['primary_expr']),
        481: _Expr(is_syntaxic_terminal=False, expected=['expr:primary_expr'], expr=True),
        482: _Expr(is_syntaxic_terminal=False, expected=['__']),
        483: _Expr(is_syntaxic_terminal=False, expected=['suffix']),
        484: _Expr(is_syntaxic_terminal=False, expected=['__ suffix'], exprs=True),
        485: _Expr(is_syntaxic_terminal=False, expected=['( __ suffix )?'], expr=True),
        486: _Expr(is_syntaxic_terminal=False, expected=['suffix:( __ suffix )?'], expr=True),
        487: _Expr(is_syntaxic_terminal=False, expected=['expr:primary_expr suffix:( __ suffix )?'], exprs=True),
        488: _Expr(is_syntaxic_terminal=False, expected=['expr:primary_expr suffix:( __ suffix )?'], expr=True),
        489: _Expr(is_syntaxic_terminal=False, expected=['[?+*]']),
        490: _Expr(is_syntaxic_terminal=False, expected=['[?+*]'], expr=True),
        491: _Expr(is_syntaxic_terminal=False, expected=['[!&]']),
        492: _Expr(is_syntaxic_terminal=False, expected=['[!&]'], expr=True),
        493: _Expr(is_syntaxic_terminal=False, expected=['"["']),
        494: _Expr(is_syntaxic_terminal=False, expected=['class_char_range']),
        495: _Expr(is_syntaxic_terminal=False, expected=['class_char']),
        496: _Expr(is_syntaxic_terminal=False, expected=['class_char_range / class_char'], exprs=True),
        497: _Expr(is_syntaxic_terminal=False, expected=['( class_char_range / class_char )*'], expr=True),
        498: _Expr(is_syntaxic_terminal=False, expected=['content:( class_char_range / class_char )*'], expr=True),
        499: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        500: _Expr(is_syntaxic_terminal=False, expected=['"i"']),
        501: _Expr(is_syntaxic_terminal=False, expected=['"i"?'], expr=True),
        502: _Expr(is_syntaxic_terminal=False, expected=['ignore:"i"?'], expr=True),
        503: _Expr(is_syntaxic_terminal=False, expected=['"[" content:( class_char_range / class_char )* "]" ignore:"i"?'], exprs=True),
        504: _Expr(is_syntaxic_terminal=False, expected=['"[" content:( class_char_range / class_char )* "]" ignore:"i"?'], expr=True),
        505: _Expr(is_syntaxic_terminal=False, expected=['class_char']),
        506: _Expr(is_syntaxic_terminal=False, expected=['start:class_char'], expr=True),
        507: _Expr(is_syntaxic_terminal=False, expected=['"-"']),
        508: _Expr(is_syntaxic_terminal=False, expected=['class_char']),
        509: _Expr(is_syntaxic_terminal=False, expected=['end:class_char'], expr=True),
        510: _Expr(is_syntaxic_terminal=False, expected=['start:class_char "-" end:class_char'], exprs=True),
        511: _Expr(is_syntaxic_terminal=False, expected=['start:class_char "-" end:class_char'], expr=True),
        512: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        513: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        514: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        515: _Expr(is_syntaxic_terminal=False, expected=['"]" / "\\\\" / EOL'], exprs=True),
        516: _Expr(is_syntaxic_terminal=False, expected=['!( "]" / "\\\\" / EOL )'], expr=True),
        517: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        518: _Expr(is_syntaxic_terminal=False, expected=['char:source_char'], expr=True),
        519: _Expr(is_syntaxic_terminal=False, expected=['!( "]" / "\\\\" / EOL ) char:source_char'], exprs=True),
        520: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        521: _Expr(is_syntaxic_terminal=False, expected=['char_class_escape']),
        522: _Expr(is_syntaxic_terminal=False, expected=['char:char_class_escape'], expr=True),
        523: _Expr(is_syntaxic_terminal=False, expected=['"\\\\" char:char_class_escape'], exprs=True),
        524: _Expr(is_syntaxic_terminal=False, expected=['( !( "]" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:char_class_escape )'], exprs=True),
        525: _Expr(is_syntaxic_terminal=False, expected=['( !( "]" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:char_class_escape )'], expr=True),
        526: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        527: _Expr(is_syntaxic_terminal=False, expected=['common_escape']),
        528: _Expr(is_syntaxic_terminal=False, expected=['"]" / common_escape'], exprs=True),
        529: _Expr(is_syntaxic_terminal=False, expected=['"]" / common_escape'], expr=True),
        530: _Expr(is_syntaxic_terminal=False, expected=['single_char_escape']),
        531: _Expr(is_syntaxic_terminal=False, expected=['single_char_escape'], expr=True),
        532: _Expr(is_syntaxic_terminal=False, expected=['"a"']),
        533: _Expr(is_syntaxic_terminal=False, expected=['"b"']),
        534: _Expr(is_syntaxic_terminal=False, expected=['"n"']),
        535: _Expr(is_syntaxic_terminal=False, expected=['"f"']),
        536: _Expr(is_syntaxic_terminal=False, expected=['"r"']),
        537: _Expr(is_syntaxic_terminal=False, expected=['"t"']),
        538: _Expr(is_syntaxic_terminal=False, expected=['"v"']),
        539: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        540: _Expr(is_syntaxic_terminal=False, expected=['"a" / "b" / "n" / "f" / "r" / "t" / "v" / "\\\\"'], exprs=True),
        541: _Expr(is_syntaxic_terminal=False, expected=['"a" / "b" / "n" / "f" / "r" / "t" / "v" / "\\\\"'], expr=True),
        542: _Expr(is_syntaxic_terminal=False, expected=['"#"']),
        543: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        544: _Expr(is_syntaxic_terminal=False, expected=['!EOL'], expr=True),
        545: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        546: _Expr(is_syntaxic_terminal=False, expected=['!EOL source_char'], exprs=True),
        547: _Expr(is_syntaxic_terminal=False, expected=['( !EOL source_char )*'], expr=True),
        548: _Expr(is_syntaxic_terminal=False, expected=['"#" ( !EOL source_char )*'], exprs=True),
        549: _Expr(is_syntaxic_terminal=False, expected=['"#" ( !EOL source_char )*'], expr=True),
        550: _Expr(is_syntaxic_terminal=False, expected=['.']),
        551: _Expr(is_syntaxic_terminal=False, expected=['.'], expr=True),
        552: _Expr(is_syntaxic_terminal=False, expected=['identifier_name']),
        553: _Expr(is_syntaxic_terminal=False, expected=['identifier_name'], expr=True),
        554: _Expr(is_syntaxic_terminal=False, expected=['identifier_start']),
        555: _Expr(is_syntaxic_terminal=False, expected=['identifier_part']),
        556: _Expr(is_syntaxic_terminal=False, expected=['identifier_part*'], expr=True),
        557: _Expr(is_syntaxic_terminal=False, expected=['identifier_start identifier_part*'], exprs=True),
        558: _Expr(is_syntaxic_terminal=False, expected=['identifier_start identifier_part*'], expr=True),
        559: _Expr(is_syntaxic_terminal=False, expected=['[A-Za-z_]']),
        560: _Expr(is_syntaxic_terminal=False, expected=['[A-Za-z_]'], expr=True),
        561: _Expr(is_syntaxic_terminal=False, expected=['identifier_start']),
        562: _Expr(is_syntaxic_terminal=False, expected=['[0-9]']),
        563: _Expr(is_syntaxic_terminal=False, expected=['identifier_start / [0-9]'], exprs=True),
        564: _Expr(is_syntaxic_terminal=False, expected=['identifier_start / [0-9]'], expr=True),
        565: _Expr(is_syntaxic_terminal=False, expected=['whitespace']),
        566: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        567: _Expr(is_syntaxic_terminal=False, expected=['comment']),
        568: _Expr(is_syntaxic_terminal=False, expected=['whitespace / EOL / comment'], exprs=True),
        569: _Expr(is_syntaxic_terminal=False, expected=['( whitespace / EOL / comment )*'], expr=True),
        570: _Expr(is_syntaxic_terminal=False, expected=['( whitespace / EOL / comment )*'], expr=True),
        571: _Expr(is_syntaxic_terminal=False, expected=['whitespace']),
        572: _Expr(is_syntaxic_terminal=False, expected=['whitespace*'], expr=True),
        573: _Expr(is_syntaxic_terminal=False, expected=['whitespace*'], expr=True),
        574: _Expr(is_syntaxic_terminal=False, expected=['[ \\t\\r]']),
        575: _Expr(is_syntaxic_terminal=False, expected=['[ \\t\\r]'], expr=True),
        576: _Expr(is_syntaxic_terminal=False, expected=['"\\n"']),
        577: _Expr(is_syntaxic_terminal=False, expected=['"\\n"'], expr=True),
        578: _Expr(is_syntaxic_terminal=False, expected=['_']),
        579: _Expr(is_syntaxic_terminal=False, expected=['comment']),
        580: _Expr(is_syntaxic_terminal=False, expected=['comment?'], expr=True),
        581: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        582: _Expr(is_syntaxic_terminal=False, expected=['_ comment? EOL'], exprs=True),
        583: _Expr(is_syntaxic_terminal=False, expected=['__']),
        584: _Expr(is_syntaxic_terminal=False, expected=['EOF']),
        585: _Expr(is_syntaxic_terminal=False, expected=['__ EOF'], exprs=True),
        586: _Expr(is_syntaxic_terminal=False, expected=['( _ comment? EOL ) / ( __ EOF )'], exprs=True),
        587: _Expr(is_syntaxic_terminal=False, expected=['( _ comment? EOL ) / ( __ EOF )'], expr=True),
        588: _Expr(is_syntaxic_terminal=False, expected=['.']),
        589: _Expr(is_syntaxic_terminal=False, expected=['!.'], expr=True),
        590: _Expr(is_syntaxic_terminal=False, expected=['!.'], expr=True),
        591: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        592: _Expr(is_syntaxic_terminal=False, expected=['NL?'], expr=True),
        593: _Expr(is_syntaxic_terminal=False, expected=['spec']),
        594: _Expr(is_syntaxic_terminal=False, expected=['spec:spec'], expr=True),
        595: _Expr(is_syntaxic_terminal=False, expected=['NL? spec:spec'], exprs=True),
        596: _Expr(is_syntaxic_terminal=False, expected=['NL? spec:spec'], expr=True),
        597: _Expr(is_syntaxic_terminal=False, expected=["~'([\\t ]*(#.*)?\\n)+'"]),
        598: _Expr(is_syntaxic_terminal=False, expected=["~'([\\t ]*(#.*)?\\n)+'"], expr=True),
        599: _Expr(is_syntaxic_terminal=False, expected=["~'[\\t ]+'"]),
        600: _Expr(is_syntaxic_terminal=False, expected=["~'[\\t ]+'?"], expr=True),
        601: _Expr(is_syntaxic_terminal=False, expected=["~'[\\t ]+'?"], expr=True),
        602: _Expr(is_syntaxic_terminal=False, expected=["~'.+'"]),
        603: _Expr(is_syntaxic_terminal=False, expected=["~'.+'"], expr=True),
        604: _Expr(is_syntaxic_terminal=False, expected=['_']),
        605: _Expr(is_syntaxic_terminal=False, expected=['":"']),
        606: _Expr(is_syntaxic_terminal=False, expected=['_']),
        607: _Expr(is_syntaxic_terminal=False, expected=['_ ":" _'], exprs=True),
        608: _Expr(is_syntaxic_terminal=False, expected=['_ ":" _'], expr=True),
        609: _Expr(is_syntaxic_terminal=False, expected=['_']),
        610: _Expr(is_syntaxic_terminal=False, expected=['","']),
        611: _Expr(is_syntaxic_terminal=False, expected=['_']),
        612: _Expr(is_syntaxic_terminal=False, expected=['_ "," _'], exprs=True),
        613: _Expr(is_syntaxic_terminal=False, expected=['_ "," _'], expr=True),
        614: _Expr(is_syntaxic_terminal=False, expected=['_']),
        615: _Expr(is_syntaxic_terminal=False, expected=['"@"']),
        616: _Expr(is_syntaxic_terminal=False, expected=['_']),
        617: _Expr(is_syntaxic_terminal=False, expected=['_ "@" _'], exprs=True),
        618: _Expr(is_syntaxic_terminal=False, expected=['_ "@" _'], expr=True),
        619: _Expr(is_syntaxic_terminal=False, expected=['_']),
        620: _Expr(is_syntaxic_terminal=False, expected=['"="']),
        621: _Expr(is_syntaxic_terminal=False, expected=['_']),
        622: _Expr(is_syntaxic_terminal=False, expected=['_ "=" _'], exprs=True),
        623: _Expr(is_syntaxic_terminal=False, expected=['_ "=" _'], expr=True),
        624: _Expr(is_syntaxic_terminal=False, expected=['_']),
        625: _Expr(is_syntaxic_terminal=False, expected=['"<"']),
        626: _Expr(is_syntaxic_terminal=False, expected=['_']),
        627: _Expr(is_syntaxic_terminal=False, expected=['_ "<" _'], exprs=True),
        628: _Expr(is_syntaxic_terminal=False, expected=['_ "<" _'], expr=True),
        629: _Expr(is_syntaxic_terminal=False, expected=['_']),
        630: _Expr(is_syntaxic_terminal=False, expected=['">"']),
        631: _Expr(is_syntaxic_terminal=False, expected=['_']),
        632: _Expr(is_syntaxic_terminal=False, expected=['_ ">" _'], exprs=True),
        633: _Expr(is_syntaxic_terminal=False, expected=['_ ">" _'], expr=True),
        634: _Expr(is_syntaxic_terminal=False, expected=['_']),
        635: _Expr(is_syntaxic_terminal=False, expected=['"("']),
        636: _Expr(is_syntaxic_terminal=False, expected=['_']),
        637: _Expr(is_syntaxic_terminal=False, expected=['_ "(" _'], exprs=True),
        638: _Expr(is_syntaxic_terminal=False, expected=['_ "(" _'], expr=True),
        639: _Expr(is_syntaxic_terminal=False, expected=['_']),
        640: _Expr(is_syntaxic_terminal=False, expected=['")"']),
        641: _Expr(is_syntaxic_terminal=False, expected=['_']),
        642: _Expr(is_syntaxic_terminal=False, expected=['_ ")" _'], exprs=True),
        643: _Expr(is_syntaxic_terminal=False, expected=['_ ")" _'], expr=True),
        644: _Expr(is_syntaxic_terminal=False, expected=['_']),
        645: _Expr(is_syntaxic_terminal=False, expected=['"["']),
        646: _Expr(is_syntaxic_terminal=False, expected=['_']),
        647: _Expr(is_syntaxic_terminal=False, expected=['_ "[" _'], exprs=True),
        648: _Expr(is_syntaxic_terminal=False, expected=['_ "[" _'], expr=True),
        649: _Expr(is_syntaxic_terminal=False, expected=['_']),
        650: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        651: _Expr(is_syntaxic_terminal=False, expected=['_']),
        652: _Expr(is_syntaxic_terminal=False, expected=['_ "]" _'], exprs=True),
        653: _Expr(is_syntaxic_terminal=False, expected=['_ "]" _'], expr=True),
        654: _Expr(is_syntaxic_terminal=False, expected=['_']),
        655: _Expr(is_syntaxic_terminal=False, expected=['"{"']),
        656: _Expr(is_syntaxic_terminal=False, expected=['_']),
        657: _Expr(is_syntaxic_terminal=False, expected=['_ "{" _'], exprs=True),
        658: _Expr(is_syntaxic_terminal=False, expected=['_ "{" _'], expr=True),
        659: _Expr(is_syntaxic_terminal=False, expected=['_']),
        660: _Expr(is_syntaxic_terminal=False, expected=['"}"']),
        661: _Expr(is_syntaxic_terminal=False, expected=['_']),
        662: _Expr(is_syntaxic_terminal=False, expected=['_ "}" _'], exprs=True),
        663: _Expr(is_syntaxic_terminal=False, expected=['_ "}" _'], expr=True),
        664: _Expr(is_syntaxic_terminal=False, expected=['_']),
        665: _Expr(is_syntaxic_terminal=False, expected=['"↦"']),
        666: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        667: _Expr(is_syntaxic_terminal=False, expected=['NL?'], expr=True),
        668: _Expr(is_syntaxic_terminal=False, expected=['_']),
        669: _Expr(is_syntaxic_terminal=False, expected=['_ "↦" NL? _'], exprs=True),
        670: _Expr(is_syntaxic_terminal=False, expected=['_ "↦" NL? _'], expr=True),
        671: _Expr(is_syntaxic_terminal=False, expected=['_']),
        672: _Expr(is_syntaxic_terminal=False, expected=['"↤"']),
        673: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        674: _Expr(is_syntaxic_terminal=False, expected=['NL?'], expr=True),
        675: _Expr(is_syntaxic_terminal=False, expected=['_']),
        676: _Expr(is_syntaxic_terminal=False, expected=['_ "↤" NL? _'], exprs=True),
        677: _Expr(is_syntaxic_terminal=False, expected=['_ "↤" NL? _'], expr=True),
        678: _Expr(is_syntaxic_terminal=False, expected=['_']),
        679: _Expr(is_syntaxic_terminal=False, expected=['"lang"']),
        680: _Expr(is_syntaxic_terminal=False, expected=['_']),
        681: _Expr(is_syntaxic_terminal=False, expected=['_ "lang" _'], exprs=True),
        682: _Expr(is_syntaxic_terminal=False, expected=['_ "lang" _'], expr=True),
        683: _Expr(is_syntaxic_terminal=False, expected=['_']),
        684: _Expr(is_syntaxic_terminal=False, expected=['"net"']),
        685: _Expr(is_syntaxic_terminal=False, expected=['_']),
        686: _Expr(is_syntaxic_terminal=False, expected=['_ "net" _'], exprs=True),
        687: _Expr(is_syntaxic_terminal=False, expected=['_ "net" _'], expr=True),
        688: _Expr(is_syntaxic_terminal=False, expected=['_']),
        689: _Expr(is_syntaxic_terminal=False, expected=['"place"']),
        690: _Expr(is_syntaxic_terminal=False, expected=['_']),
        691: _Expr(is_syntaxic_terminal=False, expected=['_ "place" _'], exprs=True),
        692: _Expr(is_syntaxic_terminal=False, expected=['_ "place" _'], expr=True),
        693: _Expr(is_syntaxic_terminal=False, expected=['_']),
        694: _Expr(is_syntaxic_terminal=False, expected=['"trans"']),
        695: _Expr(is_syntaxic_terminal=False, expected=['_']),
        696: _Expr(is_syntaxic_terminal=False, expected=['_ "trans" _'], exprs=True),
        697: _Expr(is_syntaxic_terminal=False, expected=['_ "trans" _'], expr=True),
        698: _Expr(is_syntaxic_terminal=False, expected=['_']),
        699: _Expr(is_syntaxic_terminal=False, expected=['"val"']),
        700: _Expr(is_syntaxic_terminal=False, expected=['_']),
        701: _Expr(is_syntaxic_terminal=False, expected=['_ "val" _'], exprs=True),
        702: _Expr(is_syntaxic_terminal=False, expected=['_ "val" _'], expr=True),
        703: _Expr(is_syntaxic_terminal=False, expected=['_']),
        704: _Expr(is_syntaxic_terminal=False, expected=['"var"']),
        705: _Expr(is_syntaxic_terminal=False, expected=['_']),
        706: _Expr(is_syntaxic_terminal=False, expected=['_ "var" _'], exprs=True),
        707: _Expr(is_syntaxic_terminal=False, expected=['_ "var" _'], expr=True),
        708: _Expr(is_syntaxic_terminal=False, expected=['_']),
        709: _Expr(is_syntaxic_terminal=False, expected=['"expr"']),
        710: _Expr(is_syntaxic_terminal=False, expected=['_']),
        711: _Expr(is_syntaxic_terminal=False, expected=['_ "expr" _'], exprs=True),
        712: _Expr(is_syntaxic_terminal=False, expected=['_ "expr" _'], expr=True),
        713: _Expr(is_syntaxic_terminal=False, expected=['_']),
        714: _Expr(is_syntaxic_terminal=False, expected=['"declare"']),
        715: _Expr(is_syntaxic_terminal=False, expected=['_']),
        716: _Expr(is_syntaxic_terminal=False, expected=['_ "declare" _'], exprs=True),
        717: _Expr(is_syntaxic_terminal=False, expected=['_ "declare" _'], expr=True),
        718: _Expr(is_syntaxic_terminal=False, expected=['_']),
        719: _Expr(is_syntaxic_terminal=False, expected=['"flush+"']),
        720: _Expr(is_syntaxic_terminal=False, expected=['_']),
        721: _Expr(is_syntaxic_terminal=False, expected=['_ "flush+" _'], exprs=True),
        722: _Expr(is_syntaxic_terminal=False, expected=['_ "flush+" _'], expr=True),
        723: _Expr(is_syntaxic_terminal=False, expected=['_']),
        724: _Expr(is_syntaxic_terminal=False, expected=['"flush"']),
        725: _Expr(is_syntaxic_terminal=False, expected=['_']),
        726: _Expr(is_syntaxic_terminal=False, expected=['_ "flush" _'], exprs=True),
        727: _Expr(is_syntaxic_terminal=False, expected=['_ "flush" _'], expr=True),
        728: _Expr(is_syntaxic_terminal=False, expected=['_']),
        729: _Expr(is_syntaxic_terminal=False, expected=['"fill"']),
        730: _Expr(is_syntaxic_terminal=False, expected=['_']),
        731: _Expr(is_syntaxic_terminal=False, expected=['_ "fill" _'], exprs=True),
        732: _Expr(is_syntaxic_terminal=False, expected=['_ "fill" _'], expr=True),
        733: _Expr(is_syntaxic_terminal=False, expected=['_']),
        734: _Expr(is_syntaxic_terminal=False, expected=['"?"']),
        735: _Expr(is_syntaxic_terminal=False, expected=['_']),
        736: _Expr(is_syntaxic_terminal=False, expected=['_ "?" _'], exprs=True),
        737: _Expr(is_syntaxic_terminal=False, expected=['_ "?" _'], expr=True),
        738: _Expr(is_syntaxic_terminal=False, expected=['_']),
        739: _Expr(is_syntaxic_terminal=False, expected=['"!"']),
        740: _Expr(is_syntaxic_terminal=False, expected=['_']),
        741: _Expr(is_syntaxic_terminal=False, expected=['_ "!" _'], exprs=True),
        742: _Expr(is_syntaxic_terminal=False, expected=['_ "!" _'], expr=True),
        743: _Expr(is_syntaxic_terminal=False, expected=['_']),
        744: _Expr(is_syntaxic_terminal=False, expected=["~'[+-]?[0-9]+'"]),
        745: _Expr(is_syntaxic_terminal=False, expected=["_ ~'[+-]?[0-9]+'"], exprs=True),
        746: _Expr(is_syntaxic_terminal=False, expected=["_ ~'[+-]?[0-9]+'"], expr=True),
        747: _Expr(is_syntaxic_terminal=False, expected=['_']),
        748: _Expr(is_syntaxic_terminal=False, expected=["~'[a-z][a-z0-9_]*'i"]),
        749: _Expr(is_syntaxic_terminal=False, expected=['_']),
        750: _Expr(is_syntaxic_terminal=False, expected=["_ ~'[a-z][a-z0-9_]*'i _"], exprs=True),
        751: _Expr(is_syntaxic_terminal=False, expected=["_ ~'[a-z][a-z0-9_]*'i _"], expr=True),
        752: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        753: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        754: _Expr(is_syntaxic_terminal=False, expected=['code']),
        755: _Expr(is_syntaxic_terminal=False, expected=['code:code'], expr=True),
        756: _Expr(is_syntaxic_terminal=False, expected=['string']),
        757: _Expr(is_syntaxic_terminal=False, expected=['string:string'], expr=True),
        758: _Expr(is_syntaxic_terminal=False, expected=['name:NAME / code:code / string:string'], exprs=True),
        759: _Expr(is_syntaxic_terminal=False, expected=['name:NAME / code:code / string:string'], expr=True),
        760: _Expr(is_syntaxic_terminal=False, expected=['codec']),
        761: _Expr(is_syntaxic_terminal=False, expected=['codeb']),
        762: _Expr(is_syntaxic_terminal=False, expected=['codec / codeb'], exprs=True),
        763: _Expr(is_syntaxic_terminal=False, expected=['codec / codeb'], expr=True),
        764: _Expr(is_syntaxic_terminal=False, expected=['LCB']),
        765: _Expr(is_syntaxic_terminal=False, expected=["~'([^{}\\\\\\\\]|\\\\[{}])+'"]),
        766: _Expr(is_syntaxic_terminal=False, expected=['codec']),
        767: _Expr(is_syntaxic_terminal=False, expected=["~'([^{}\\\\\\\\]|\\\\[{}])+' / codec"], exprs=True),
        768: _Expr(is_syntaxic_terminal=False, expected=["( ~'([^{}\\\\\\\\]|\\\\[{}])+' / codec )*"], expr=True),
        769: _Expr(is_syntaxic_terminal=False, expected=['RCB']),
        770: _Expr(is_syntaxic_terminal=False, expected=["LCB ( ~'([^{}\\\\\\\\]|\\\\[{}])+' / codec )* RCB"], exprs=True),
        771: _Expr(is_syntaxic_terminal=False, expected=["LCB ( ~'([^{}\\\\\\\\]|\\\\[{}])+' / codec )* RCB"], expr=True),
        772: _Expr(is_syntaxic_terminal=False, expected=['LSB']),
        773: _Expr(is_syntaxic_terminal=False, expected=["~'([^\\\\[\\\\]\\\\\\\\]|\\\\[\\\\[\\\\]])+'"]),
        774: _Expr(is_syntaxic_terminal=False, expected=['codeb']),
        775: _Expr(is_syntaxic_terminal=False, expected=["~'([^\\\\[\\\\]\\\\\\\\]|\\\\[\\\\[\\\\]])+' / codeb"], exprs=True),
        776: _Expr(is_syntaxic_terminal=False, expected=["( ~'([^\\\\[\\\\]\\\\\\\\]|\\\\[\\\\[\\\\]])+' / codeb )*"], expr=True),
        777: _Expr(is_syntaxic_terminal=False, expected=['RSB']),
        778: _Expr(is_syntaxic_terminal=False, expected=["LSB ( ~'([^\\\\[\\\\]\\\\\\\\]|\\\\[\\\\[\\\\]])+' / codeb )* RSB"], exprs=True),
        779: _Expr(is_syntaxic_terminal=False, expected=["LSB ( ~'([^\\\\[\\\\]\\\\\\\\]|\\\\[\\\\[\\\\]])+' / codeb )* RSB"], expr=True),
        780: _Expr(is_syntaxic_terminal=False, expected=['_']),
        781: _Expr(is_syntaxic_terminal=False, expected=['~"\'{3}.*?\'{3}"s']),
        782: _Expr(is_syntaxic_terminal=False, expected=['~\'"{3}.*?"{3}\'s']),
        783: _Expr(is_syntaxic_terminal=False, expected=['~"\'([^\'\\\\\\\\]|\\\\.)*\'"']),
        784: _Expr(is_syntaxic_terminal=False, expected=['~\'"([^"\\\\\\\\]|\\\\.)*"\'']),
        785: _Expr(is_syntaxic_terminal=False, expected=['~"\'{3}.*?\'{3}"s / ~\'"{3}.*?"{3}\'s / ~"\'([^\'\\\\\\\\]|\\\\.)*\'" / ~\'"([^"\\\\\\\\]|\\\\.)*"\''], exprs=True),
        786: _Expr(is_syntaxic_terminal=False, expected=['_']),
        787: _Expr(is_syntaxic_terminal=False, expected=['_ ( ~"\'{3}.*?\'{3}"s / ~\'"{3}.*?"{3}\'s / ~"\'([^\'\\\\\\\\]|\\\\.)*\'" / ~\'"([^"\\\\\\\\]|\\\\.)*"\' ) _'], exprs=True),
        788: _Expr(is_syntaxic_terminal=False, expected=['_ ( ~"\'{3}.*?\'{3}"s / ~\'"{3}.*?"{3}\'s / ~"\'([^\'\\\\\\\\]|\\\\.)*\'" / ~\'"([^"\\\\\\\\]|\\\\.)*"\' ) _'], expr=True),
        789: _Expr(is_syntaxic_terminal=False, expected=['LANG']),
        790: _Expr(is_syntaxic_terminal=False, expected=['text']),
        791: _Expr(is_syntaxic_terminal=False, expected=['lang:text'], expr=True),
        792: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        793: _Expr(is_syntaxic_terminal=False, expected=['decl']),
        794: _Expr(is_syntaxic_terminal=False, expected=['decl*'], expr=True),
        795: _Expr(is_syntaxic_terminal=False, expected=['declare:decl*'], expr=True),
        796: _Expr(is_syntaxic_terminal=False, expected=['NET']),
        797: _Expr(is_syntaxic_terminal=False, expected=['text']),
        798: _Expr(is_syntaxic_terminal=False, expected=['net:text'], expr=True),
        799: _Expr(is_syntaxic_terminal=False, expected=['COLON']),
        800: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        801: _Expr(is_syntaxic_terminal=False, expected=['INDENT']),
        802: _Expr(is_syntaxic_terminal=False, expected=['place']),
        803: _Expr(is_syntaxic_terminal=False, expected=['trans']),
        804: _Expr(is_syntaxic_terminal=False, expected=['place / trans'], exprs=True),
        805: _Expr(is_syntaxic_terminal=False, expected=['( place / trans )+'], expr=True),
        806: _Expr(is_syntaxic_terminal=False, expected=['nodes:( place / trans )+'], expr=True),
        807: _Expr(is_syntaxic_terminal=False, expected=['DEDENT']),
        808: _Expr(is_syntaxic_terminal=False, expected=['LANG lang:text NL declare:decl* NET net:text COLON NL INDENT nodes:( place / trans )+ DEDENT'], exprs=True),
        809: _Expr(is_syntaxic_terminal=False, expected=['LANG lang:text NL declare:decl* NET net:text COLON NL INDENT nodes:( place / trans )+ DEDENT'], expr=True),
        810: _Expr(is_syntaxic_terminal=False, expected=['DECLARE']),
        811: _Expr(is_syntaxic_terminal=False, expected=['AT']),
        812: _Expr(is_syntaxic_terminal=False, expected=['text']),
        813: _Expr(is_syntaxic_terminal=False, expected=['level:text'], expr=True),
        814: _Expr(is_syntaxic_terminal=False, expected=['AT level:text'], exprs=True),
        815: _Expr(is_syntaxic_terminal=False, expected=['( AT level:text )?'], expr=True),
        816: _Expr(is_syntaxic_terminal=False, expected=['text']),
        817: _Expr(is_syntaxic_terminal=False, expected=['source:text'], expr=True),
        818: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        819: _Expr(is_syntaxic_terminal=False, expected=['DECLARE ( AT level:text )? source:text NL'], exprs=True),
        820: _Expr(is_syntaxic_terminal=False, expected=['DECLARE ( AT level:text )? source:text NL'], expr=True),
        821: _Expr(is_syntaxic_terminal=False, expected=['PLACE']),
        822: _Expr(is_syntaxic_terminal=False, expected=['text']),
        823: _Expr(is_syntaxic_terminal=False, expected=['name:text'], expr=True),
        824: _Expr(is_syntaxic_terminal=False, expected=['placetype']),
        825: _Expr(is_syntaxic_terminal=False, expected=['placetype?'], expr=True),
        826: _Expr(is_syntaxic_terminal=False, expected=['type:placetype?'], expr=True),
        827: _Expr(is_syntaxic_terminal=False, expected=['EQ']),
        828: _Expr(is_syntaxic_terminal=False, expected=['tokens']),
        829: _Expr(is_syntaxic_terminal=False, expected=['tokens:tokens'], expr=True),
        830: _Expr(is_syntaxic_terminal=False, expected=['EQ tokens:tokens'], exprs=True),
        831: _Expr(is_syntaxic_terminal=False, expected=['( EQ tokens:tokens )?'], expr=True),
        832: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        833: _Expr(is_syntaxic_terminal=False, expected=['PLACE name:text type:placetype? ( EQ tokens:tokens )? NL'], exprs=True),
        834: _Expr(is_syntaxic_terminal=False, expected=['PLACE name:text type:placetype? ( EQ tokens:tokens )? NL'], expr=True),
        835: _Expr(is_syntaxic_terminal=False, expected=['text']),
        836: _Expr(is_syntaxic_terminal=False, expected=['text:text'], expr=True),
        837: _Expr(is_syntaxic_terminal=False, expected=['placetuple']),
        838: _Expr(is_syntaxic_terminal=False, expected=['placetuple:placetuple'], expr=True),
        839: _Expr(is_syntaxic_terminal=False, expected=['text:text / placetuple:placetuple'], exprs=True),
        840: _Expr(is_syntaxic_terminal=False, expected=['text:text / placetuple:placetuple'], expr=True),
        841: _Expr(is_syntaxic_terminal=False, expected=['LP']),
        842: _Expr(is_syntaxic_terminal=False, expected=['placeitem']),
        843: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        844: _Expr(is_syntaxic_terminal=False, expected=['placeitem']),
        845: _Expr(is_syntaxic_terminal=False, expected=['COMMA placeitem'], exprs=True),
        846: _Expr(is_syntaxic_terminal=False, expected=['( COMMA placeitem )*'], expr=True),
        847: _Expr(is_syntaxic_terminal=False, expected=['RP']),
        848: _Expr(is_syntaxic_terminal=False, expected=['LP placeitem ( COMMA placeitem )* RP'], exprs=True),
        849: _Expr(is_syntaxic_terminal=False, expected=['LP placeitem ( COMMA placeitem )* RP'], expr=True),
        850: _Expr(is_syntaxic_terminal=False, expected=['text']),
        851: _Expr(is_syntaxic_terminal=False, expected=['text:text'], expr=True),
        852: _Expr(is_syntaxic_terminal=False, expected=['placetuple']),
        853: _Expr(is_syntaxic_terminal=False, expected=['placetuple:placetuple'], expr=True),
        854: _Expr(is_syntaxic_terminal=False, expected=['text:text / placetuple:placetuple'], exprs=True),
        855: _Expr(is_syntaxic_terminal=False, expected=['text:text / placetuple:placetuple'], expr=True),
        856: _Expr(is_syntaxic_terminal=False, expected=['tok']),
        857: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        858: _Expr(is_syntaxic_terminal=False, expected=['tok']),
        859: _Expr(is_syntaxic_terminal=False, expected=['COMMA tok'], exprs=True),
        860: _Expr(is_syntaxic_terminal=False, expected=['( COMMA tok )*'], expr=True),
        861: _Expr(is_syntaxic_terminal=False, expected=['tok ( COMMA tok )*'], exprs=True),
        862: _Expr(is_syntaxic_terminal=False, expected=['tok ( COMMA tok )*'], expr=True),
        863: _Expr(is_syntaxic_terminal=False, expected=['NUMBER']),
        864: _Expr(is_syntaxic_terminal=False, expected=['number:NUMBER'], expr=True),
        865: _Expr(is_syntaxic_terminal=False, expected=['text']),
        866: _Expr(is_syntaxic_terminal=False, expected=['text:text'], expr=True),
        867: _Expr(is_syntaxic_terminal=False, expected=['number:NUMBER / text:text'], exprs=True),
        868: _Expr(is_syntaxic_terminal=False, expected=['number:NUMBER / text:text'], expr=True),
        869: _Expr(is_syntaxic_terminal=False, expected=['TRANS']),
        870: _Expr(is_syntaxic_terminal=False, expected=['text']),
        871: _Expr(is_syntaxic_terminal=False, expected=['name:text'], expr=True),
        872: _Expr(is_syntaxic_terminal=False, expected=["~'[^:]+'"]),
        873: _Expr(is_syntaxic_terminal=False, expected=["~'[^:]+'?"], expr=True),
        874: _Expr(is_syntaxic_terminal=False, expected=["guard:~'[^:]+'?"], expr=True),
        875: _Expr(is_syntaxic_terminal=False, expected=['COLON']),
        876: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        877: _Expr(is_syntaxic_terminal=False, expected=['INDENT']),
        878: _Expr(is_syntaxic_terminal=False, expected=['arc']),
        879: _Expr(is_syntaxic_terminal=False, expected=['arc+'], expr=True),
        880: _Expr(is_syntaxic_terminal=False, expected=['arcs:arc+'], expr=True),
        881: _Expr(is_syntaxic_terminal=False, expected=['DEDENT']),
        882: _Expr(is_syntaxic_terminal=False, expected=["TRANS name:text guard:~'[^:]+'? COLON NL INDENT arcs:arc+ DEDENT"], exprs=True),
        883: _Expr(is_syntaxic_terminal=False, expected=["TRANS name:text guard:~'[^:]+'? COLON NL INDENT arcs:arc+ DEDENT"], expr=True),
        884: _Expr(is_syntaxic_terminal=False, expected=['LT']),
        885: _Expr(is_syntaxic_terminal=False, expected=['GT']),
        886: _Expr(is_syntaxic_terminal=False, expected=['LT / GT'], exprs=True),
        887: _Expr(is_syntaxic_terminal=False, expected=['way:( LT / GT )'], expr=True),
        888: _Expr(is_syntaxic_terminal=False, expected=['text']),
        889: _Expr(is_syntaxic_terminal=False, expected=['place:text'], expr=True),
        890: _Expr(is_syntaxic_terminal=False, expected=['arcmod']),
        891: _Expr(is_syntaxic_terminal=False, expected=['arcmod?'], expr=True),
        892: _Expr(is_syntaxic_terminal=False, expected=['mod:arcmod?'], expr=True),
        893: _Expr(is_syntaxic_terminal=False, expected=['arckind']),
        894: _Expr(is_syntaxic_terminal=False, expected=['kind:arckind'], expr=True),
        895: _Expr(is_syntaxic_terminal=False, expected=['EQ']),
        896: _Expr(is_syntaxic_terminal=False, expected=['TAIL']),
        897: _Expr(is_syntaxic_terminal=False, expected=['label:TAIL'], expr=True),
        898: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        899: _Expr(is_syntaxic_terminal=False, expected=['way:( LT / GT ) place:text mod:arcmod? kind:arckind EQ label:TAIL NL'], exprs=True),
        900: _Expr(is_syntaxic_terminal=False, expected=['way:( LT / GT ) place:text mod:arcmod? kind:arckind EQ label:TAIL NL'], expr=True),
        901: _Expr(is_syntaxic_terminal=False, expected=['VAL']),
        902: _Expr(is_syntaxic_terminal=False, expected=['VAR']),
        903: _Expr(is_syntaxic_terminal=False, expected=['EXPR']),
        904: _Expr(is_syntaxic_terminal=False, expected=['FLUSHPLUS']),
        905: _Expr(is_syntaxic_terminal=False, expected=['FLUSH']),
        906: _Expr(is_syntaxic_terminal=False, expected=['FILL']),
        907: _Expr(is_syntaxic_terminal=False, expected=['arctuple']),
        908: _Expr(is_syntaxic_terminal=False, expected=['VAL / VAR / EXPR / FLUSHPLUS / FLUSH / FILL / arctuple'], exprs=True),
        909: _Expr(is_syntaxic_terminal=False, expected=['VAL / VAR / EXPR / FLUSHPLUS / FLUSH / FILL / arctuple'], expr=True),
        910: _Expr(is_syntaxic_terminal=False, expected=['TEST']),
        911: _Expr(is_syntaxic_terminal=False, expected=['BANG']),
        912: _Expr(is_syntaxic_terminal=False, expected=['TEST / BANG'], exprs=True),
        913: _Expr(is_syntaxic_terminal=False, expected=['kind:( TEST / BANG )'], expr=True),
        914: _Expr(is_syntaxic_terminal=False, expected=['code']),
        915: _Expr(is_syntaxic_terminal=False, expected=['code?'], expr=True),
        916: _Expr(is_syntaxic_terminal=False, expected=['guard:code?'], expr=True),
        917: _Expr(is_syntaxic_terminal=False, expected=['kind:( TEST / BANG ) guard:code?'], exprs=True),
        918: _Expr(is_syntaxic_terminal=False, expected=['kind:( TEST / BANG ) guard:code?'], expr=True),
        919: _Expr(is_syntaxic_terminal=False, expected=['LP']),
        920: _Expr(is_syntaxic_terminal=False, expected=['arcitem']),
        921: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        922: _Expr(is_syntaxic_terminal=False, expected=['arcitem']),
        923: _Expr(is_syntaxic_terminal=False, expected=['COMMA arcitem'], exprs=True),
        924: _Expr(is_syntaxic_terminal=False, expected=['( COMMA arcitem )*'], expr=True),
        925: _Expr(is_syntaxic_terminal=False, expected=['RP']),
        926: _Expr(is_syntaxic_terminal=False, expected=['LP arcitem ( COMMA arcitem )* RP'], exprs=True),
        927: _Expr(is_syntaxic_terminal=False, expected=['LP arcitem ( COMMA arcitem )* RP'], expr=True),
        928: _Expr(is_syntaxic_terminal=False, expected=['text']),
        929: _Expr(is_syntaxic_terminal=False, expected=['text:text'], expr=True),
        930: _Expr(is_syntaxic_terminal=False, expected=['NUMBER']),
        931: _Expr(is_syntaxic_terminal=False, expected=['number:NUMBER'], expr=True),
        932: _Expr(is_syntaxic_terminal=False, expected=['arctuple']),
        933: _Expr(is_syntaxic_terminal=False, expected=['arctuple:arctuple'], expr=True),
        934: _Expr(is_syntaxic_terminal=False, expected=['text:text / number:NUMBER / arctuple:arctuple'], exprs=True),
        935: _Expr(is_syntaxic_terminal=False, expected=['text:text / number:NUMBER / arctuple:arctuple'], expr=True),
    }
