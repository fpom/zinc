"""
This module was generated by fastidious:

    /home/franck/.anaconda3/lib/python3.7/site-packages/fastidious-0.1.dev0-py3.7.egg/fastidious/__main__.py generate -o zinc/io/metaparse.py zinc.io.meta_peg.MetaParser

DO NOT EDIT BY HAND unless you know what you do.

More info at https://github.com/lisael/fastidious
"""

# coding: utf-8

import ast

class node (object) :
    def __init__ (self, tag, **children) :
        self.__dict__.update(tag=tag, **children)
        self._fields = list(children)
    def __setitem__ (self, key, val) :
        setattr(self, key, val)
        if key not in self._fields :
            self._fields.append(key)
    def __getitem__ (self, key) :
        return getattr(self, key)
    def __iter__ (self) :
        for name in self._fields :
            yield name, self[name]
    def __repr__ (self) :
        return "\n".join(self._repr())
    def _repr (self, indent=0) :
        TAB = " |   " * indent
        if not self._fields :
            yield TAB + self.tag
        else :
            yield TAB + "%s :" % self.tag
            for name, child in self :
                if name.startswith("_") :
                    pass
                elif isinstance(child, node) :
                    for i, line in enumerate(child._repr(indent + 1)) :
                        if i == 0 :
                            yield TAB + " + %s = %s" % (name, line.lstrip(" |"))
                        else :
                            yield line
                elif isinstance(child, list) and child and isinstance(child[0], node) :
                    for n, c in enumerate(child) :
                        for i, line in enumerate(c._repr(1)) :
                            if i == 0 :
                                l = line.lstrip("| ")
                                yield TAB + " + %s[%s] = %s" % (name, n, l)
                            else :
                                yield TAB + line
                else :
                    yield TAB + " + %s = %r" % (name, child)

class Nest (object) :
    def __init__ (self, blocks) :
        self.pred = {}
        self.succ = {}
        self.rep = {}
        self.opt = {}
        self.first = {}
        self.last = {}
        for spec in blocks :
            _spec = []
            first = True
            for name in spec :
                _name = name.lstrip("*?")
                self.rep[_name] = name.startswith("*")
                self.opt[_name] = name.startswith("?") or self.rep[_name]
                self.succ[_name] = set()
                self.pred[_name] = set()
                _spec.append(_name)
                self.first[_name] = first
                first = first and self.opt[_name]
            last = True
            for name in reversed(_spec) :
                self.last[name] = last
                last = last and self.opt[name]
            for one, two in zip(_spec, _spec[1:]) :
                if self.rep[two] :
                    self.pred[two].update({one, two} | self.pred[one])
                elif self.opt[two] :
                    self.pred[two].update({one} | self.pred[one])
                else :
                    self.pred[two].add(one)
        for two, preds in self.pred.items() :
            for one in preds :
                self.succ[one].add(two)

import re

if not hasattr(__builtins__, 'basestring'):
    basestring = str


class _Expr:
    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            self.__dict__[k] = v


class MetaParser(object):
    __default__ = 'INPUT'
    class ParserError(Exception):
        pass

    __compound__ = []
    __default__ = "INPUT"
    __grammar__ = r"""
    INPUT     <- NL? :model {@model}
    NL        <- ~"([\t ]*(#.*)?\n)+" {_drop}
    _         <- ~"[\t ]+"? {_drop}
    COLON     <- _ ":" _ {_drop}
    COMMA     <- _ "," _ {p_flatten}
    AT        <- _ "@" _ {p_flatten}
    EQ        <- _ "=" _ {p_flatten}
    LP        <- _ "(" _ {p_flatten}
    RP        <- _ ")" _ {p_flatten}
    LSB       <- _ "[" _ {p_flatten}
    RSB       <- _ "]" _ {p_flatten}
    LCB       <- _ "{" _ {p_flatten}
    RCB       <- _ "}" _ {p_flatten}
    INDENT    <- _ "↦" NL? _ {_drop}
    DEDENT    <- _ "↤" NL? _ {_drop}
    NUMBER    <- _ ~"[+-]?[0-9]+" {_number}
    NAME      <- _ ~"[a-z][a-z0-9_]*"i _ {p_flatten}
    atom      <- :name / num:NUMBER / :code / :string {_first}
    name      <- name:NAME {_name}
    code      <- codec / codeb {_code}
    codec     <- LCB (~"([^{}\\\\]|[{}])+" / codec)* RCB {p_flatten}
    codeb     <- LSB (~"([^\\[\\]\\\\]|[\\[\\]])+" / codeb)* RSB {p_flatten}
    string    <- _ ( ~"'{3}.*?'{3}"s
                   / ~'"{3}.*?"{3}'s
                   / ~"'([^'\\\\]|\\.)*'"
                   / ~'"([^"\\\\]|\\.)*"' ) _ {_string}
    """
    def _drop (self, match) :
        return ""
    def _number (self, match) :
        return node("const", value=int(self.p_flatten(match)), type="int")
    def _name (self, match, name) :
        return node("const", value=name, type="name")
    def _code (self, match) :
        return node("const", value=self.p_flatten(match).strip()[1:-1], type="code")
    def _string (self, match) :
        return node("const", value=ast.literal_eval(self.p_flatten(match).strip()),
                    type="str")
    def _tuple (self, match) :
        lst = []
        for m in match :
            if isinstance(m, list) :
                lst.extend(i[1] for i in m)
            else :
                lst.append(m)
        return tuple(lst)
    def _first (self, match, **args) :
        for k, v in args.items() :
            if v is not self.NoMatch :
                if isinstance(v, node) :
                    return v
                else :
                    return node(k, value=v)
        return self.NoMatch
    __grammar__ += r"""
    model   <- stmt:stmt+
    stmt    <- :call / :block {_first}
    call    <- name:NAME :args NL
    args    <- LP ( pos:posargs
                  / kw:kwargs
                  / pos:posargs COMMA kw:kwargs )? RP
    posargs <- atom (COMMA atom)* {_tuple}
    kwargs  <- kwa (COMMA kwa) {_tuple}
    kwa     <- name:NAME "EQ" :atom
    block   <- deco:deco? name:NAME args:args? COLON NL INDENT stmt:stmt+ DEDENT
    deco    <- AT name:NAME args:args? NL
    """
    def _glue (self, stmt) :
        n = self.nest
        s = []
        l = None
        for child in stmt :
            if child.tag == "call" :
                s.append(child)
                l = None
            elif n.pred[child.tag] :
                if l in n.pred[child.tag] :
                    s[-1][child.tag] = child
                elif l and n.last[l] and n.first[child.tag] :
                    l = child.tag
                    s.append(child)
                elif l :
                    self.p_parse_error("invalid block %r after %r" % (child.tag, l),
                                       child._pos)
                else :
                    self.p_parse_error("unexpected block %r" % child.tag,
                                       child._pos)
            else :
                if l and not n.last[l] :
                    self.p_parse_error("invalid block %r after %r" % (child.tag, l),
                                       child._pos)
                if not n.first[child.tag] :
                    self.p_parse_error("unexpected block %r" % child.tag,
                                       child._pos)
                l = child.tag
                s.append(child)
        return s
    def on_model (self, match, stmt) :
        return node("model", body=self._glue(stmt), _pos=self.pos)
    def on_call (self, match, name, args) :
        return node("call", name=name, largs=args.l, kargs=args.k, _pos=self.pos)
    def on_args (self, match, pos=None, kw=None) :
        if pos is self.NoMatch or not pos :
            pos = []
        if kw is self.NoMatch or not kw :
            kw = {}
        return node("args", l=list(pos), k=dict(kw))
    def on_kwa (self, name, atom) :
        return name, atom
    def on_block (self, match, name, stmt, args=None, deco=None) :
        if args is self.NoMatch or not args :
            args = None
        if deco is self.NoMatch or not deco :
            deco = None
        return node(name, body=self._glue(stmt), args=args, deco=deco, _pos=self.pos)
    def on_deco (self, match, name, args=[]) :
        return node("deco", name=name, args=args)
    def __INIT__ (self) :
        self.nest = Nest(self.__compound__)
    _p_py_constants = {597: {'regex': re.compile('([\t ]*(#.*)?\n)+', 32)}, 599: {'regex': re.compile('[\t ]+', 32)}, 667: {'regex': re.compile('[+-]?[0-9]+', 32)}, 671: {'regex': re.compile('(?i)[a-z][a-z0-9_]*', 34)}, 693: {'regex': re.compile('([^{}\\\\]|[{}])+', 32)}, 701: {'regex': re.compile('([^\\[\\]\\\\]|[\\[\\]])+', 32)}, 709: {'regex': re.compile("(?s)'{3}.*?'{3}", 48)}, 710: {'regex': re.compile('(?s)"{3}.*?"{3}', 48)}, 711: {'regex': re.compile("'([^'\\\\]|\\.)*'", 32)}, 712: {'regex': re.compile('"([^"\\\\]|\\.)*"', 32)}}
    __memoize__ = True
    # __debug___ = True
    __debug___ = False
    __code_gen__ = True
    _p_action_classes = []

    class NoMatch(object):
        pass

    def __init__(self, input):
        self.input = input
        self.pos = 0
        self.last_pos = 0
        self.start = 0
        self.args_stack = {}
        self._debug_indent = 0
        self._p_savepoint_stack = []
        self._p_memoized = {}

        self._p_error_stack = [(0, 0)]
        if hasattr(self, "__INIT__"):
            self.__INIT__()

    def p_nomatch(self, id):
        head = self._p_error_stack[0]
        if self.pos <= head[0]:
            self._p_error_stack.append((self.pos, id))
        elif self.pos > head[0]:
            self._p_error_stack = [(self.pos, id)]

    def p_suffix(self, length=None, elipsis=False):
        "Return the rest of the input"
        if length is not None:
            result = self.input[self.pos:self.pos + length]
            if elipsis and len(result) == length:
                result += "..."
            return result
        return self.input[self.pos:]

    def p_debug(self, message):
        "Format and print debug messages"
        print("{}{} `{}`".format(self._debug_indent * " ",
                                 message, repr(self.p_suffix(10))))

    def p_peek(self):
        "return the next char, w/o consuming it"
        try:
            return self.input[self.pos]
        except IndexError:
            return None

    def p_next(self):
        "Consume and return the next char"
        try:
            self.pos += 1
            return self.input[self.pos - 1]
        except IndexError:
            self.pos -= 1
            return None

    def p_save(self):
        "Push a savepoint on the stack (internal use)"
        self._p_savepoint_stack.append((self.pos, self.start))

    def p_restore(self):
        """
        Pop a savepoint on the stack, and restore the parser state
        (internal use)
        """
        self.pos, self.start = self._p_savepoint_stack.pop()

    def p_discard(self):
        "Pop and forget a savepoint (internal use)"
        self.last_pos = self._p_savepoint_stack.pop()[0]

    def _p_get_line(self, pos):
        return self.input[:pos].count('\n') + 1

    @property
    def p_current_line(self):
        "Return current line number"
        return self._p_get_line(self.pos)

    @property
    def p_last_line(self):
        "Return last line number"
        return self._p_get_line(self.last_pos)

    def _p_get_col(self, pos):
        prefix = self.input[:pos]
        nlidx = prefix.rfind('\n')
        if nlidx == -1:
            return pos
        return pos - nlidx

    @property
    def p_current_col(self):
        "Return current column in line"
        return self._p_get_col(self.pos)

    @property
    def p_last_col(self):
        "Return last column in line"
        return self._p_get_col(self.last_pos)

    def p_pretty_pos(self, pos=None):
        "Print current line and a pretty cursor below. Used in error messages"
        if pos is None :
            pos = self.pos
        col = self._p_get_col(pos) - 1
        suffix = self.input[pos - col:]
        end = suffix.find("\n")
        if end != -1:
            suffix = suffix[:end]
        return "%s\n%s" % (suffix, "-" * col + "^")

    def p_parse_error(self, message, pos=None):
        if pos is None :
            pos = self.pos
        raise self.ParserError(
            "Error at line %s, col %s: %s" % (
                self._p_get_line(pos),
                self._p_get_col(pos) - 1,
                message
            )
        )

    def p_syntax_error(self, *expected):
        def prettify(i):
            if i.replace("_", "").isalnum():
                return i
            return "`%s`" % i
        expected = set(expected)
        expected = [prettify(item) for item in expected]
        expected = " or ".join(expected)
        raise self.ParserError(
            "Syntax error at line %s, col %s:"
            "\n\n%s\n\n"
            "Got `%s` expected %s "
            "" % (
                self.p_current_line,
                self.p_current_col - 1,
                self.p_pretty_pos(),
                self.p_suffix(10, elipsis=True).replace(
                    '\n', "\\n") or "EOF",
                expected)
        )

    def p_startswith(self, st, ignorecase=False):
        "Return True if the input starts with `st` at current position"
        length = len(st)
        matcher = result = self.input[self.pos:self.pos + length]
        if ignorecase:
            matcher = result.lower()
            st = st.lower()
        if matcher == st:
            self.pos += length
            return result
        return False

    def p_flatten(self, obj, **kwargs):
        """ Flatten a list of lists of lists... of strings into a string

        This is usually used as the action for sequence expressions:

        .. code-block::

            my_rule <- 'a' . 'c' {p_flatten}

        With the input "abc" and no action, this rule returns [ 'a', 'b', 'c'].
        { p_flatten } procuces "abc".

        >>> parser.p_flatten(['a', ['b', 'c']])
        'abc'

        """
        if isinstance(obj, basestring):
            return obj
        result = ""
        for i in obj:
            result += self.p_flatten(i)
        return result

    @classmethod
    def p_parse(cls, input, methodname=None, parse_all=True):
        """
        Parse the `input` using `methodname` as entry point.

        If `parse_all` is true, the input MUST be fully consumed at the end of
        the parsing, otherwise p_parse raises an exception.
        """
        if methodname is None:
            methodname = cls.__default__
        p = cls(input)
        result = getattr(p, methodname)()
        if result is cls.NoMatch or parse_all and p.p_peek() is not None:
            p.p_raise()
        return result

    def p_raise(self):
        expected = []
        current_pos = -1

        if self.__debug___:
            print(self._p_error_stack)

        # check aliased rules
        for pos, id in self._p_error_stack:
            if pos < current_pos:
                break
            try:
                expr = self._p_expressions[id]
            except KeyError:
                continue
            else:
                if expr.is_syntaxic_terminal:
                    current_pos = pos
                    expected += expr.expected

        # none found, fallback to default tips
        if not expected:
            current_pos = -1
            for pos, id in self._p_error_stack:
                if current_pos > -1 and pos < current_pos:
                    continue
                current_pos = pos
                try:
                    expr = self._p_expressions[id]
                except KeyError:
                    continue
                else:
                    if hasattr(expr, "expr") or hasattr(expr, "exprs"):
                        continue
                    expected += expr.expected
        self.pos = current_pos
        self.p_syntax_error(*expected)
    def INPUT(self):
        '''INPUT <- NL? model:model'''
        args = dict()
        # NL? model:model
        self.p_save()
        results_595 = []
        
        # NL?
        start_pos_591= self.pos
        if (4144447232125309470, start_pos_591) in self._p_memoized:
            result, self.pos = self._p_memoized[(4144447232125309470, self.pos)]
        else:
            result = self.NL()
            self._p_memoized[(4144447232125309470, start_pos_591)] = result, self.pos
        result = "" if result is self.NoMatch else result
        if result is self.NoMatch:
            # print self._p_error_stack
            self._p_error_stack.pop()
        if result is self.NoMatch:
            results_595 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 595))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 595)]
            # print self._p_error_stack
        else:
            results_595.append(result)
                            
            
            # model:model
            start_pos_593= self.pos
            if (-7396831059608763805, start_pos_593) in self._p_memoized:
                result, self.pos = self._p_memoized[(-7396831059608763805, self.pos)]
            else:
                result = self.model()
                self._p_memoized[(-7396831059608763805, start_pos_593)] = result, self.pos
            args['model'] = result
            if result is self.NoMatch:
                results_595 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 595))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 595)]
                # print self._p_error_stack
            else:
                results_595.append(result)
                                
        if results_595 is not self.NoMatch:
            self.p_discard()
        result = results_595
        if result is not self.NoMatch:
            result = args['model']
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 596))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 596)]
            # print self._p_error_stack
        return result

    def NL(self):
        '''NL <- ~\'([\t ]*(#.*)?\n)+\''''
        args = dict()
        # ~'([\t ]*(#.*)?\n)+'
        regex = self._p_py_constants[597]["regex"]
        m = regex.match(self.p_suffix())
        if m:
            result = self.p_suffix(m.end())
            self.pos += m.end()
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 597))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 597)]
            # print self._p_error_stack
            result = self.NoMatch
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 598))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 598)]
            # print self._p_error_stack
        return result

    def _(self):
        '''_ <- ~\'[\t ]+\'?'''
        args = dict()
        # ~'[\t ]+'?
        # ~'[\t ]+'
        regex = self._p_py_constants[599]["regex"]
        m = regex.match(self.p_suffix())
        if m:
            result = self.p_suffix(m.end())
            self.pos += m.end()
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 599))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 599)]
            # print self._p_error_stack
            result = self.NoMatch
        result = "" if result is self.NoMatch else result
        if result is self.NoMatch:
            # print self._p_error_stack
            self._p_error_stack.pop()
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 601))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 601)]
            # print self._p_error_stack
        return result

    def COLON(self):
        '''COLON <- _ ":" _'''
        args = dict()
        # _ ":" _
        self.p_save()
        results_605 = []
        
        start_pos_602= self.pos
        if (-699997255014926103, start_pos_602) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_602)] = result, self.pos
        if result is self.NoMatch:
            results_605 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 605))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 605)]
            # print self._p_error_stack
        else:
            results_605.append(result)
                            
            
            # ":"
            result = self.p_startswith(':', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 603))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 603)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_605 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 605))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 605)]
                # print self._p_error_stack
            else:
                results_605.append(result)
                                
                
                start_pos_604= self.pos
                if (-699997255014926103, start_pos_604) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_604)] = result, self.pos
                if result is self.NoMatch:
                    results_605 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 605))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 605)]
                    # print self._p_error_stack
                else:
                    results_605.append(result)
                                    
        if results_605 is not self.NoMatch:
            self.p_discard()
        result = results_605
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 606))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 606)]
            # print self._p_error_stack
        return result

    def COMMA(self):
        '''COMMA <- _ "," _'''
        args = dict()
        # _ "," _
        self.p_save()
        results_610 = []
        
        start_pos_607= self.pos
        if (-699997255014926103, start_pos_607) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_607)] = result, self.pos
        if result is self.NoMatch:
            results_610 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 610))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 610)]
            # print self._p_error_stack
        else:
            results_610.append(result)
                            
            
            # ","
            result = self.p_startswith(',', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 608))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 608)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_610 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 610))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 610)]
                # print self._p_error_stack
            else:
                results_610.append(result)
                                
                
                start_pos_609= self.pos
                if (-699997255014926103, start_pos_609) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_609)] = result, self.pos
                if result is self.NoMatch:
                    results_610 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 610))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 610)]
                    # print self._p_error_stack
                else:
                    results_610.append(result)
                                    
        if results_610 is not self.NoMatch:
            self.p_discard()
        result = results_610
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 611))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 611)]
            # print self._p_error_stack
        return result

    def AT(self):
        '''AT <- _ "@" _'''
        args = dict()
        # _ "@" _
        self.p_save()
        results_615 = []
        
        start_pos_612= self.pos
        if (-699997255014926103, start_pos_612) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_612)] = result, self.pos
        if result is self.NoMatch:
            results_615 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 615))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 615)]
            # print self._p_error_stack
        else:
            results_615.append(result)
                            
            
            # "@"
            result = self.p_startswith('@', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 613))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 613)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_615 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 615))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 615)]
                # print self._p_error_stack
            else:
                results_615.append(result)
                                
                
                start_pos_614= self.pos
                if (-699997255014926103, start_pos_614) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_614)] = result, self.pos
                if result is self.NoMatch:
                    results_615 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 615))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 615)]
                    # print self._p_error_stack
                else:
                    results_615.append(result)
                                    
        if results_615 is not self.NoMatch:
            self.p_discard()
        result = results_615
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 616))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 616)]
            # print self._p_error_stack
        return result

    def EQ(self):
        '''EQ <- _ "=" _'''
        args = dict()
        # _ "=" _
        self.p_save()
        results_620 = []
        
        start_pos_617= self.pos
        if (-699997255014926103, start_pos_617) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_617)] = result, self.pos
        if result is self.NoMatch:
            results_620 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 620))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 620)]
            # print self._p_error_stack
        else:
            results_620.append(result)
                            
            
            # "="
            result = self.p_startswith('=', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 618))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 618)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_620 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 620))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 620)]
                # print self._p_error_stack
            else:
                results_620.append(result)
                                
                
                start_pos_619= self.pos
                if (-699997255014926103, start_pos_619) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_619)] = result, self.pos
                if result is self.NoMatch:
                    results_620 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 620))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 620)]
                    # print self._p_error_stack
                else:
                    results_620.append(result)
                                    
        if results_620 is not self.NoMatch:
            self.p_discard()
        result = results_620
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 621))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 621)]
            # print self._p_error_stack
        return result

    def LP(self):
        '''LP <- _ "(" _'''
        args = dict()
        # _ "(" _
        self.p_save()
        results_625 = []
        
        start_pos_622= self.pos
        if (-699997255014926103, start_pos_622) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_622)] = result, self.pos
        if result is self.NoMatch:
            results_625 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 625))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 625)]
            # print self._p_error_stack
        else:
            results_625.append(result)
                            
            
            # "("
            result = self.p_startswith('(', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 623))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 623)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_625 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 625))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 625)]
                # print self._p_error_stack
            else:
                results_625.append(result)
                                
                
                start_pos_624= self.pos
                if (-699997255014926103, start_pos_624) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_624)] = result, self.pos
                if result is self.NoMatch:
                    results_625 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 625))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 625)]
                    # print self._p_error_stack
                else:
                    results_625.append(result)
                                    
        if results_625 is not self.NoMatch:
            self.p_discard()
        result = results_625
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 626))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 626)]
            # print self._p_error_stack
        return result

    def RP(self):
        '''RP <- _ ")" _'''
        args = dict()
        # _ ")" _
        self.p_save()
        results_630 = []
        
        start_pos_627= self.pos
        if (-699997255014926103, start_pos_627) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_627)] = result, self.pos
        if result is self.NoMatch:
            results_630 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 630))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 630)]
            # print self._p_error_stack
        else:
            results_630.append(result)
                            
            
            # ")"
            result = self.p_startswith(')', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 628))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 628)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_630 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 630))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 630)]
                # print self._p_error_stack
            else:
                results_630.append(result)
                                
                
                start_pos_629= self.pos
                if (-699997255014926103, start_pos_629) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_629)] = result, self.pos
                if result is self.NoMatch:
                    results_630 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 630))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 630)]
                    # print self._p_error_stack
                else:
                    results_630.append(result)
                                    
        if results_630 is not self.NoMatch:
            self.p_discard()
        result = results_630
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 631))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 631)]
            # print self._p_error_stack
        return result

    def LSB(self):
        '''LSB <- _ "[" _'''
        args = dict()
        # _ "[" _
        self.p_save()
        results_635 = []
        
        start_pos_632= self.pos
        if (-699997255014926103, start_pos_632) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_632)] = result, self.pos
        if result is self.NoMatch:
            results_635 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 635))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 635)]
            # print self._p_error_stack
        else:
            results_635.append(result)
                            
            
            # "["
            result = self.p_startswith('[', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 633))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 633)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_635 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 635))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 635)]
                # print self._p_error_stack
            else:
                results_635.append(result)
                                
                
                start_pos_634= self.pos
                if (-699997255014926103, start_pos_634) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_634)] = result, self.pos
                if result is self.NoMatch:
                    results_635 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 635))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 635)]
                    # print self._p_error_stack
                else:
                    results_635.append(result)
                                    
        if results_635 is not self.NoMatch:
            self.p_discard()
        result = results_635
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 636))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 636)]
            # print self._p_error_stack
        return result

    def RSB(self):
        '''RSB <- _ "]" _'''
        args = dict()
        # _ "]" _
        self.p_save()
        results_640 = []
        
        start_pos_637= self.pos
        if (-699997255014926103, start_pos_637) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_637)] = result, self.pos
        if result is self.NoMatch:
            results_640 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 640))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 640)]
            # print self._p_error_stack
        else:
            results_640.append(result)
                            
            
            # "]"
            result = self.p_startswith(']', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 638))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 638)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_640 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 640))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 640)]
                # print self._p_error_stack
            else:
                results_640.append(result)
                                
                
                start_pos_639= self.pos
                if (-699997255014926103, start_pos_639) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_639)] = result, self.pos
                if result is self.NoMatch:
                    results_640 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 640))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 640)]
                    # print self._p_error_stack
                else:
                    results_640.append(result)
                                    
        if results_640 is not self.NoMatch:
            self.p_discard()
        result = results_640
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 641))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 641)]
            # print self._p_error_stack
        return result

    def LCB(self):
        '''LCB <- _ "{" _'''
        args = dict()
        # _ "{" _
        self.p_save()
        results_645 = []
        
        start_pos_642= self.pos
        if (-699997255014926103, start_pos_642) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_642)] = result, self.pos
        if result is self.NoMatch:
            results_645 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 645))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 645)]
            # print self._p_error_stack
        else:
            results_645.append(result)
                            
            
            # "{"
            result = self.p_startswith('{', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 643))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 643)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_645 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 645))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 645)]
                # print self._p_error_stack
            else:
                results_645.append(result)
                                
                
                start_pos_644= self.pos
                if (-699997255014926103, start_pos_644) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_644)] = result, self.pos
                if result is self.NoMatch:
                    results_645 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 645))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 645)]
                    # print self._p_error_stack
                else:
                    results_645.append(result)
                                    
        if results_645 is not self.NoMatch:
            self.p_discard()
        result = results_645
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 646))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 646)]
            # print self._p_error_stack
        return result

    def RCB(self):
        '''RCB <- _ "}" _'''
        args = dict()
        # _ "}" _
        self.p_save()
        results_650 = []
        
        start_pos_647= self.pos
        if (-699997255014926103, start_pos_647) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_647)] = result, self.pos
        if result is self.NoMatch:
            results_650 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 650))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 650)]
            # print self._p_error_stack
        else:
            results_650.append(result)
                            
            
            # "}"
            result = self.p_startswith('}', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 648))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 648)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_650 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 650))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 650)]
                # print self._p_error_stack
            else:
                results_650.append(result)
                                
                
                start_pos_649= self.pos
                if (-699997255014926103, start_pos_649) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_649)] = result, self.pos
                if result is self.NoMatch:
                    results_650 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 650))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 650)]
                    # print self._p_error_stack
                else:
                    results_650.append(result)
                                    
        if results_650 is not self.NoMatch:
            self.p_discard()
        result = results_650
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 651))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 651)]
            # print self._p_error_stack
        return result

    def INDENT(self):
        '''INDENT <- _ "↦" NL? _'''
        args = dict()
        # _ "↦" NL? _
        self.p_save()
        results_657 = []
        
        start_pos_652= self.pos
        if (-699997255014926103, start_pos_652) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_652)] = result, self.pos
        if result is self.NoMatch:
            results_657 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 657))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 657)]
            # print self._p_error_stack
        else:
            results_657.append(result)
                            
            
            # "↦"
            result = self.p_startswith('↦', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 653))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 653)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_657 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 657))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 657)]
                # print self._p_error_stack
            else:
                results_657.append(result)
                                
                
                # NL?
                start_pos_654= self.pos
                if (4144447232125309470, start_pos_654) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4144447232125309470, self.pos)]
                else:
                    result = self.NL()
                    self._p_memoized[(4144447232125309470, start_pos_654)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                if result is self.NoMatch:
                    results_657 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 657))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 657)]
                    # print self._p_error_stack
                else:
                    results_657.append(result)
                                    
                    
                    start_pos_656= self.pos
                    if (-699997255014926103, start_pos_656) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(-699997255014926103, start_pos_656)] = result, self.pos
                    if result is self.NoMatch:
                        results_657 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 657))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 657)]
                        # print self._p_error_stack
                    else:
                        results_657.append(result)
                                        
        if results_657 is not self.NoMatch:
            self.p_discard()
        result = results_657
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 658))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 658)]
            # print self._p_error_stack
        return result

    def DEDENT(self):
        '''DEDENT <- _ "↤" NL? _'''
        args = dict()
        # _ "↤" NL? _
        self.p_save()
        results_664 = []
        
        start_pos_659= self.pos
        if (-699997255014926103, start_pos_659) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_659)] = result, self.pos
        if result is self.NoMatch:
            results_664 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 664))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 664)]
            # print self._p_error_stack
        else:
            results_664.append(result)
                            
            
            # "↤"
            result = self.p_startswith('↤', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 660))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 660)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_664 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 664))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 664)]
                # print self._p_error_stack
            else:
                results_664.append(result)
                                
                
                # NL?
                start_pos_661= self.pos
                if (4144447232125309470, start_pos_661) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4144447232125309470, self.pos)]
                else:
                    result = self.NL()
                    self._p_memoized[(4144447232125309470, start_pos_661)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                if result is self.NoMatch:
                    results_664 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 664))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 664)]
                    # print self._p_error_stack
                else:
                    results_664.append(result)
                                    
                    
                    start_pos_663= self.pos
                    if (-699997255014926103, start_pos_663) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                    else:
                        result = self._()
                        self._p_memoized[(-699997255014926103, start_pos_663)] = result, self.pos
                    if result is self.NoMatch:
                        results_664 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 664))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 664)]
                        # print self._p_error_stack
                    else:
                        results_664.append(result)
                                        
        if results_664 is not self.NoMatch:
            self.p_discard()
        result = results_664
        if result is not self.NoMatch:
            result = self._drop(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 665))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 665)]
            # print self._p_error_stack
        return result

    def NUMBER(self):
        '''NUMBER <- _ ~\'[+-]?[0-9]+\''''
        args = dict()
        # _ ~'[+-]?[0-9]+'
        self.p_save()
        results_668 = []
        
        start_pos_666= self.pos
        if (-699997255014926103, start_pos_666) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_666)] = result, self.pos
        if result is self.NoMatch:
            results_668 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 668))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 668)]
            # print self._p_error_stack
        else:
            results_668.append(result)
                            
            
            # ~'[+-]?[0-9]+'
            regex = self._p_py_constants[667]["regex"]
            m = regex.match(self.p_suffix())
            if m:
                result = self.p_suffix(m.end())
                self.pos += m.end()
            else:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 667))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 667)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_668 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 668))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 668)]
                # print self._p_error_stack
            else:
                results_668.append(result)
                                
        if results_668 is not self.NoMatch:
            self.p_discard()
        result = results_668
        if result is not self.NoMatch:
            result = self._number(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 669))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 669)]
            # print self._p_error_stack
        return result

    def NAME(self):
        '''NAME <- _ ~\'[a-z][a-z0-9_]*\'i _'''
        args = dict()
        # _ ~'[a-z][a-z0-9_]*'i _
        self.p_save()
        results_673 = []
        
        start_pos_670= self.pos
        if (-699997255014926103, start_pos_670) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_670)] = result, self.pos
        if result is self.NoMatch:
            results_673 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 673))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 673)]
            # print self._p_error_stack
        else:
            results_673.append(result)
                            
            
            # ~'[a-z][a-z0-9_]*'i
            regex = self._p_py_constants[671]["regex"]
            m = regex.match(self.p_suffix())
            if m:
                result = self.p_suffix(m.end())
                self.pos += m.end()
            else:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 671))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 671)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_673 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 673))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 673)]
                # print self._p_error_stack
            else:
                results_673.append(result)
                                
                
                start_pos_672= self.pos
                if (-699997255014926103, start_pos_672) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_672)] = result, self.pos
                if result is self.NoMatch:
                    results_673 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 673))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 673)]
                    # print self._p_error_stack
                else:
                    results_673.append(result)
                                    
        if results_673 is not self.NoMatch:
            self.p_discard()
        result = results_673
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 674))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 674)]
            # print self._p_error_stack
        return result

    def atom(self):
        '''atom <- name:name / num:NUMBER / code:code / string:string'''
        args = dict()
        # name:name / num:NUMBER / code:code / string:string
        self.p_save()
        # name:name
        start_pos_675= self.pos
        if (-6269800881392625162, start_pos_675) in self._p_memoized:
            result, self.pos = self._p_memoized[(-6269800881392625162, self.pos)]
        else:
            result = self.name()
            self._p_memoized[(-6269800881392625162, start_pos_675)] = result, self.pos
        args['name'] = result
        if result is self.NoMatch:
            # num:NUMBER
            start_pos_677= self.pos
            if (-1386720164688176666, start_pos_677) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1386720164688176666, self.pos)]
            else:
                result = self.NUMBER()
                self._p_memoized[(-1386720164688176666, start_pos_677)] = result, self.pos
            args['num'] = result
            if result is self.NoMatch:
                # code:code
                start_pos_679= self.pos
                if (7817502943178179626, start_pos_679) in self._p_memoized:
                    result, self.pos = self._p_memoized[(7817502943178179626, self.pos)]
                else:
                    result = self.code()
                    self._p_memoized[(7817502943178179626, start_pos_679)] = result, self.pos
                args['code'] = result
                if result is self.NoMatch:
                    # string:string
                    start_pos_681= self.pos
                    if (6686401281859812250, start_pos_681) in self._p_memoized:
                        result, self.pos = self._p_memoized[(6686401281859812250, self.pos)]
                    else:
                        result = self.string()
                        self._p_memoized[(6686401281859812250, start_pos_681)] = result, self.pos
                    args['string'] = result
                    if result is self.NoMatch:
                        pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 683))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 683)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self._first(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 684))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 684)]
            # print self._p_error_stack
        return result

    def name(self):
        '''name <- name:NAME'''
        args = dict()
        # name:NAME
        start_pos_685= self.pos
        if (8007414548437939493, start_pos_685) in self._p_memoized:
            result, self.pos = self._p_memoized[(8007414548437939493, self.pos)]
        else:
            result = self.NAME()
            self._p_memoized[(8007414548437939493, start_pos_685)] = result, self.pos
        args['name'] = result
        if result is not self.NoMatch:
            result = self._name(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 687))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 687)]
            # print self._p_error_stack
        return result

    def code(self):
        '''code <- codec / codeb'''
        args = dict()
        # codec / codeb
        self.p_save()
        start_pos_688= self.pos
        if (5949310379018661182, start_pos_688) in self._p_memoized:
            result, self.pos = self._p_memoized[(5949310379018661182, self.pos)]
        else:
            result = self.codec()
            self._p_memoized[(5949310379018661182, start_pos_688)] = result, self.pos
        if result is self.NoMatch:
            start_pos_689= self.pos
            if (-1680243738643571780, start_pos_689) in self._p_memoized:
                result, self.pos = self._p_memoized[(-1680243738643571780, self.pos)]
            else:
                result = self.codeb()
                self._p_memoized[(-1680243738643571780, start_pos_689)] = result, self.pos
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 690))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 690)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self._code(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 691))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 691)]
            # print self._p_error_stack
        return result

    def codec(self):
        '''codec <- LCB ( ~\'([^{}\\\\]|[{}])+\' / codec )* RCB'''
        args = dict()
        # LCB ( ~'([^{}\\\\]|[{}])+' / codec )* RCB
        self.p_save()
        results_698 = []
        
        start_pos_692= self.pos
        if (6693254335442545643, start_pos_692) in self._p_memoized:
            result, self.pos = self._p_memoized[(6693254335442545643, self.pos)]
        else:
            result = self.LCB()
            self._p_memoized[(6693254335442545643, start_pos_692)] = result, self.pos
        if result is self.NoMatch:
            results_698 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 698))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 698)]
            # print self._p_error_stack
        else:
            results_698.append(result)
                            
            
            # ( ~'([^{}\\\\]|[{}])+' / codec )*
            results_696 = []
            while 42:
                # ~'([^{}\\\\]|[{}])+' / codec
                self.p_save()
                # ~'([^{}\\\\]|[{}])+'
                regex = self._p_py_constants[693]["regex"]
                m = regex.match(self.p_suffix())
                if m:
                    result = self.p_suffix(m.end())
                    self.pos += m.end()
                else:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 693))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 693)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    start_pos_694= self.pos
                    if (5949310379018661182, start_pos_694) in self._p_memoized:
                        result, self.pos = self._p_memoized[(5949310379018661182, self.pos)]
                    else:
                        result = self.codec()
                        self._p_memoized[(5949310379018661182, start_pos_694)] = result, self.pos
                    if result is self.NoMatch:
                        pass
                if result is self.NoMatch:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 695))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 695)]
                    # print self._p_error_stack
                else:
                    self.p_discard()
                if result is not self.NoMatch:
                    results_696.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_696
            if result is self.NoMatch:
                results_698 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 698))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 698)]
                # print self._p_error_stack
            else:
                results_698.append(result)
                                
                
                start_pos_697= self.pos
                if (878463418509615905, start_pos_697) in self._p_memoized:
                    result, self.pos = self._p_memoized[(878463418509615905, self.pos)]
                else:
                    result = self.RCB()
                    self._p_memoized[(878463418509615905, start_pos_697)] = result, self.pos
                if result is self.NoMatch:
                    results_698 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 698))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 698)]
                    # print self._p_error_stack
                else:
                    results_698.append(result)
                                    
        if results_698 is not self.NoMatch:
            self.p_discard()
        result = results_698
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 699))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 699)]
            # print self._p_error_stack
        return result

    def codeb(self):
        '''codeb <- LSB ( ~\'([^\\[\\]\\\\]|[\\[\\]])+\' / codeb )* RSB'''
        args = dict()
        # LSB ( ~'([^\\[\\]\\\\]|[\\[\\]])+' / codeb )* RSB
        self.p_save()
        results_706 = []
        
        start_pos_700= self.pos
        if (8111932399340609821, start_pos_700) in self._p_memoized:
            result, self.pos = self._p_memoized[(8111932399340609821, self.pos)]
        else:
            result = self.LSB()
            self._p_memoized[(8111932399340609821, start_pos_700)] = result, self.pos
        if result is self.NoMatch:
            results_706 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 706))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 706)]
            # print self._p_error_stack
        else:
            results_706.append(result)
                            
            
            # ( ~'([^\\[\\]\\\\]|[\\[\\]])+' / codeb )*
            results_704 = []
            while 42:
                # ~'([^\\[\\]\\\\]|[\\[\\]])+' / codeb
                self.p_save()
                # ~'([^\\[\\]\\\\]|[\\[\\]])+'
                regex = self._p_py_constants[701]["regex"]
                m = regex.match(self.p_suffix())
                if m:
                    result = self.p_suffix(m.end())
                    self.pos += m.end()
                else:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 701))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 701)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    start_pos_702= self.pos
                    if (-1680243738643571780, start_pos_702) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-1680243738643571780, self.pos)]
                    else:
                        result = self.codeb()
                        self._p_memoized[(-1680243738643571780, start_pos_702)] = result, self.pos
                    if result is self.NoMatch:
                        pass
                if result is self.NoMatch:
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 703))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 703)]
                    # print self._p_error_stack
                else:
                    self.p_discard()
                if result is not self.NoMatch:
                    results_704.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_704
            if result is self.NoMatch:
                results_706 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 706))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 706)]
                # print self._p_error_stack
            else:
                results_706.append(result)
                                
                
                start_pos_705= self.pos
                if (-4991048402067691831, start_pos_705) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-4991048402067691831, self.pos)]
                else:
                    result = self.RSB()
                    self._p_memoized[(-4991048402067691831, start_pos_705)] = result, self.pos
                if result is self.NoMatch:
                    results_706 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 706))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 706)]
                    # print self._p_error_stack
                else:
                    results_706.append(result)
                                    
        if results_706 is not self.NoMatch:
            self.p_discard()
        result = results_706
        if result is not self.NoMatch:
            result = self.p_flatten(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 707))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 707)]
            # print self._p_error_stack
        return result

    def string(self):
        '''string <- _ ( ~"\'{3}.*?\'{3}"s / ~\'"{3}.*?"{3}\'s / ~"\'([^\'\\\\]|\\.)*\'" / ~\'"([^"\\\\]|\\.)*"\' ) _'''
        args = dict()
        # _ ( ~"'{3}.*?'{3}"s / ~'"{3}.*?"{3}'s / ~"'([^'\\\\]|\\.)*'" / ~'"([^"\\\\]|\\.)*"' ) _
        self.p_save()
        results_715 = []
        
        start_pos_708= self.pos
        if (-699997255014926103, start_pos_708) in self._p_memoized:
            result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
        else:
            result = self._()
            self._p_memoized[(-699997255014926103, start_pos_708)] = result, self.pos
        if result is self.NoMatch:
            results_715 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 715))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 715)]
            # print self._p_error_stack
        else:
            results_715.append(result)
                            
            
            # ~"'{3}.*?'{3}"s / ~'"{3}.*?"{3}'s / ~"'([^'\\\\]|\\.)*'" / ~'"([^"\\\\]|\\.)*"'
            self.p_save()
            # ~"'{3}.*?'{3}"s
            regex = self._p_py_constants[709]["regex"]
            m = regex.match(self.p_suffix())
            if m:
                result = self.p_suffix(m.end())
                self.pos += m.end()
            else:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 709))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 709)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                # ~'"{3}.*?"{3}'s
                regex = self._p_py_constants[710]["regex"]
                m = regex.match(self.p_suffix())
                if m:
                    result = self.p_suffix(m.end())
                    self.pos += m.end()
                else:
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 710))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 710)]
                    # print self._p_error_stack
                    result = self.NoMatch
                if result is self.NoMatch:
                    # ~"'([^'\\\\]|\\.)*'"
                    regex = self._p_py_constants[711]["regex"]
                    m = regex.match(self.p_suffix())
                    if m:
                        result = self.p_suffix(m.end())
                        self.pos += m.end()
                    else:
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 711))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 711)]
                        # print self._p_error_stack
                        result = self.NoMatch
                    if result is self.NoMatch:
                        # ~'"([^"\\\\]|\\.)*"'
                        regex = self._p_py_constants[712]["regex"]
                        m = regex.match(self.p_suffix())
                        if m:
                            result = self.p_suffix(m.end())
                            self.pos += m.end()
                        else:
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 712))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 712)]
                            # print self._p_error_stack
                            result = self.NoMatch
                        if result is self.NoMatch:
                            pass
            if result is self.NoMatch:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 713))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 713)]
                # print self._p_error_stack
            else:
                self.p_discard()
            if result is self.NoMatch:
                results_715 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 715))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 715)]
                # print self._p_error_stack
            else:
                results_715.append(result)
                                
                
                start_pos_714= self.pos
                if (-699997255014926103, start_pos_714) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-699997255014926103, self.pos)]
                else:
                    result = self._()
                    self._p_memoized[(-699997255014926103, start_pos_714)] = result, self.pos
                if result is self.NoMatch:
                    results_715 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 715))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 715)]
                    # print self._p_error_stack
                else:
                    results_715.append(result)
                                    
        if results_715 is not self.NoMatch:
            self.p_discard()
        result = results_715
        if result is not self.NoMatch:
            result = self._string(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 716))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 716)]
            # print self._p_error_stack
        return result

    def model(self):
        '''model <- stmt:stmt+'''
        args = dict()
        # stmt:stmt+
        # stmt+
        self.p_save()
        results_718 = []
        while 42:
            start_pos_717= self.pos
            if (3677739026703000584, start_pos_717) in self._p_memoized:
                result, self.pos = self._p_memoized[(3677739026703000584, self.pos)]
            else:
                result = self.stmt()
                self._p_memoized[(3677739026703000584, start_pos_717)] = result, self.pos
            if result is not self.NoMatch:
                results_718.append(result)
            else:
                break
        if not results_718:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 718))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 718)]
            # print self._p_error_stack
            result = self.NoMatch
        else:
            self.p_discard()
            result = results_718
        args['stmt'] = result
        if result is not self.NoMatch:
            result = self.on_model(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 720))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 720)]
            # print self._p_error_stack
        return result

    def stmt(self):
        '''stmt <- call:call / block:block'''
        args = dict()
        # call:call / block:block
        self.p_save()
        # call:call
        start_pos_721= self.pos
        if (-6878247899007947638, start_pos_721) in self._p_memoized:
            result, self.pos = self._p_memoized[(-6878247899007947638, self.pos)]
        else:
            result = self.call()
            self._p_memoized[(-6878247899007947638, start_pos_721)] = result, self.pos
        args['call'] = result
        if result is self.NoMatch:
            # block:block
            start_pos_723= self.pos
            if (-2058285304300232917, start_pos_723) in self._p_memoized:
                result, self.pos = self._p_memoized[(-2058285304300232917, self.pos)]
            else:
                result = self.block()
                self._p_memoized[(-2058285304300232917, start_pos_723)] = result, self.pos
            args['block'] = result
            if result is self.NoMatch:
                pass
        if result is self.NoMatch:
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 725))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 725)]
            # print self._p_error_stack
        else:
            self.p_discard()
        if result is not self.NoMatch:
            result = self._first(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 726))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 726)]
            # print self._p_error_stack
        return result

    def call(self):
        '''call <- name:NAME args:args NL'''
        args = dict()
        # name:NAME args:args NL
        self.p_save()
        results_732 = []
        
        # name:NAME
        start_pos_727= self.pos
        if (8007414548437939493, start_pos_727) in self._p_memoized:
            result, self.pos = self._p_memoized[(8007414548437939493, self.pos)]
        else:
            result = self.NAME()
            self._p_memoized[(8007414548437939493, start_pos_727)] = result, self.pos
        args['name'] = result
        if result is self.NoMatch:
            results_732 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 732))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 732)]
            # print self._p_error_stack
        else:
            results_732.append(result)
                            
            
            # args:args
            start_pos_729= self.pos
            if (4125793608775969864, start_pos_729) in self._p_memoized:
                result, self.pos = self._p_memoized[(4125793608775969864, self.pos)]
            else:
                result = self.args()
                self._p_memoized[(4125793608775969864, start_pos_729)] = result, self.pos
            args['args'] = result
            if result is self.NoMatch:
                results_732 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 732))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 732)]
                # print self._p_error_stack
            else:
                results_732.append(result)
                                
                
                start_pos_731= self.pos
                if (4144447232125309470, start_pos_731) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4144447232125309470, self.pos)]
                else:
                    result = self.NL()
                    self._p_memoized[(4144447232125309470, start_pos_731)] = result, self.pos
                if result is self.NoMatch:
                    results_732 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 732))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 732)]
                    # print self._p_error_stack
                else:
                    results_732.append(result)
                                    
        if results_732 is not self.NoMatch:
            self.p_discard()
        result = results_732
        if result is not self.NoMatch:
            result = self.on_call(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 733))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 733)]
            # print self._p_error_stack
        return result

    def args(self):
        '''args <- LP ( pos:posargs / kw:kwargs / ( pos:posargs COMMA kw:kwargs ) )? RP'''
        args = dict()
        # LP ( pos:posargs / kw:kwargs / ( pos:posargs COMMA kw:kwargs ) )? RP
        self.p_save()
        results_748 = []
        
        start_pos_734= self.pos
        if (-492624457306476555, start_pos_734) in self._p_memoized:
            result, self.pos = self._p_memoized[(-492624457306476555, self.pos)]
        else:
            result = self.LP()
            self._p_memoized[(-492624457306476555, start_pos_734)] = result, self.pos
        if result is self.NoMatch:
            results_748 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 748))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 748)]
            # print self._p_error_stack
        else:
            results_748.append(result)
                            
            
            # ( pos:posargs / kw:kwargs / ( pos:posargs COMMA kw:kwargs ) )?
            # pos:posargs / kw:kwargs / ( pos:posargs COMMA kw:kwargs )
            self.p_save()
            # pos:posargs
            start_pos_735= self.pos
            if (7254405329311443008, start_pos_735) in self._p_memoized:
                result, self.pos = self._p_memoized[(7254405329311443008, self.pos)]
            else:
                result = self.posargs()
                self._p_memoized[(7254405329311443008, start_pos_735)] = result, self.pos
            args['pos'] = result
            if result is self.NoMatch:
                # kw:kwargs
                start_pos_737= self.pos
                if (-1095173371008102345, start_pos_737) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-1095173371008102345, self.pos)]
                else:
                    result = self.kwargs()
                    self._p_memoized[(-1095173371008102345, start_pos_737)] = result, self.pos
                args['kw'] = result
                if result is self.NoMatch:
                    # pos:posargs COMMA kw:kwargs
                    self.p_save()
                    results_744 = []
                    
                    # pos:posargs
                    start_pos_739= self.pos
                    if (7254405329311443008, start_pos_739) in self._p_memoized:
                        result, self.pos = self._p_memoized[(7254405329311443008, self.pos)]
                    else:
                        result = self.posargs()
                        self._p_memoized[(7254405329311443008, start_pos_739)] = result, self.pos
                    args['pos'] = result
                    if result is self.NoMatch:
                        results_744 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 744))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 744)]
                        # print self._p_error_stack
                    else:
                        results_744.append(result)
                                        
                        
                        start_pos_741= self.pos
                        if (-2046442409359943707, start_pos_741) in self._p_memoized:
                            result, self.pos = self._p_memoized[(-2046442409359943707, self.pos)]
                        else:
                            result = self.COMMA()
                            self._p_memoized[(-2046442409359943707, start_pos_741)] = result, self.pos
                        if result is self.NoMatch:
                            results_744 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 744))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 744)]
                            # print self._p_error_stack
                        else:
                            results_744.append(result)
                                            
                            
                            # kw:kwargs
                            start_pos_742= self.pos
                            if (-1095173371008102345, start_pos_742) in self._p_memoized:
                                result, self.pos = self._p_memoized[(-1095173371008102345, self.pos)]
                            else:
                                result = self.kwargs()
                                self._p_memoized[(-1095173371008102345, start_pos_742)] = result, self.pos
                            args['kw'] = result
                            if result is self.NoMatch:
                                results_744 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 744))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 744)]
                                # print self._p_error_stack
                            else:
                                results_744.append(result)
                                                
                    if results_744 is not self.NoMatch:
                        self.p_discard()
                    result = results_744
                    if result is self.NoMatch:
                        pass
            if result is self.NoMatch:
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 745))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 745)]
                # print self._p_error_stack
            else:
                self.p_discard()
            result = "" if result is self.NoMatch else result
            if result is self.NoMatch:
                # print self._p_error_stack
                self._p_error_stack.pop()
            if result is self.NoMatch:
                results_748 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 748))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 748)]
                # print self._p_error_stack
            else:
                results_748.append(result)
                                
                
                start_pos_747= self.pos
                if (8367019064757852761, start_pos_747) in self._p_memoized:
                    result, self.pos = self._p_memoized[(8367019064757852761, self.pos)]
                else:
                    result = self.RP()
                    self._p_memoized[(8367019064757852761, start_pos_747)] = result, self.pos
                if result is self.NoMatch:
                    results_748 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 748))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 748)]
                    # print self._p_error_stack
                else:
                    results_748.append(result)
                                    
        if results_748 is not self.NoMatch:
            self.p_discard()
        result = results_748
        if result is not self.NoMatch:
            result = self.on_args(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 749))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 749)]
            # print self._p_error_stack
        return result

    def posargs(self):
        '''posargs <- atom ( COMMA atom )*'''
        args = dict()
        # atom ( COMMA atom )*
        self.p_save()
        results_755 = []
        
        start_pos_750= self.pos
        if (-3565430766822273561, start_pos_750) in self._p_memoized:
            result, self.pos = self._p_memoized[(-3565430766822273561, self.pos)]
        else:
            result = self.atom()
            self._p_memoized[(-3565430766822273561, start_pos_750)] = result, self.pos
        if result is self.NoMatch:
            results_755 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 755))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 755)]
            # print self._p_error_stack
        else:
            results_755.append(result)
                            
            
            # ( COMMA atom )*
            results_754 = []
            while 42:
                # COMMA atom
                self.p_save()
                results_753 = []
                
                start_pos_751= self.pos
                if (-2046442409359943707, start_pos_751) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-2046442409359943707, self.pos)]
                else:
                    result = self.COMMA()
                    self._p_memoized[(-2046442409359943707, start_pos_751)] = result, self.pos
                if result is self.NoMatch:
                    results_753 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 753))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 753)]
                    # print self._p_error_stack
                else:
                    results_753.append(result)
                                    
                    
                    start_pos_752= self.pos
                    if (-3565430766822273561, start_pos_752) in self._p_memoized:
                        result, self.pos = self._p_memoized[(-3565430766822273561, self.pos)]
                    else:
                        result = self.atom()
                        self._p_memoized[(-3565430766822273561, start_pos_752)] = result, self.pos
                    if result is self.NoMatch:
                        results_753 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 753))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 753)]
                        # print self._p_error_stack
                    else:
                        results_753.append(result)
                                        
                if results_753 is not self.NoMatch:
                    self.p_discard()
                result = results_753
                if result is not self.NoMatch:
                    results_754.append(result)
                else:
                    break
            # print self._p_error_stack
            result = results_754
            if result is self.NoMatch:
                results_755 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 755))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 755)]
                # print self._p_error_stack
            else:
                results_755.append(result)
                                
        if results_755 is not self.NoMatch:
            self.p_discard()
        result = results_755
        if result is not self.NoMatch:
            result = self._tuple(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 756))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 756)]
            # print self._p_error_stack
        return result

    def kwargs(self):
        '''kwargs <- kwa ( COMMA kwa )'''
        args = dict()
        # kwa ( COMMA kwa )
        self.p_save()
        results_761 = []
        
        start_pos_757= self.pos
        if (7928988747421468998, start_pos_757) in self._p_memoized:
            result, self.pos = self._p_memoized[(7928988747421468998, self.pos)]
        else:
            result = self.kwa()
            self._p_memoized[(7928988747421468998, start_pos_757)] = result, self.pos
        if result is self.NoMatch:
            results_761 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 761))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 761)]
            # print self._p_error_stack
        else:
            results_761.append(result)
                            
            
            # COMMA kwa
            self.p_save()
            results_760 = []
            
            start_pos_758= self.pos
            if (-2046442409359943707, start_pos_758) in self._p_memoized:
                result, self.pos = self._p_memoized[(-2046442409359943707, self.pos)]
            else:
                result = self.COMMA()
                self._p_memoized[(-2046442409359943707, start_pos_758)] = result, self.pos
            if result is self.NoMatch:
                results_760 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 760))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 760)]
                # print self._p_error_stack
            else:
                results_760.append(result)
                                
                
                start_pos_759= self.pos
                if (7928988747421468998, start_pos_759) in self._p_memoized:
                    result, self.pos = self._p_memoized[(7928988747421468998, self.pos)]
                else:
                    result = self.kwa()
                    self._p_memoized[(7928988747421468998, start_pos_759)] = result, self.pos
                if result is self.NoMatch:
                    results_760 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 760))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 760)]
                    # print self._p_error_stack
                else:
                    results_760.append(result)
                                    
            if results_760 is not self.NoMatch:
                self.p_discard()
            result = results_760
            if result is self.NoMatch:
                results_761 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 761))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 761)]
                # print self._p_error_stack
            else:
                results_761.append(result)
                                
        if results_761 is not self.NoMatch:
            self.p_discard()
        result = results_761
        if result is not self.NoMatch:
            result = self._tuple(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 762))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 762)]
            # print self._p_error_stack
        return result

    def kwa(self):
        '''kwa <- name:NAME "EQ" atom:atom'''
        args = dict()
        # name:NAME "EQ" atom:atom
        self.p_save()
        results_768 = []
        
        # name:NAME
        start_pos_763= self.pos
        if (8007414548437939493, start_pos_763) in self._p_memoized:
            result, self.pos = self._p_memoized[(8007414548437939493, self.pos)]
        else:
            result = self.NAME()
            self._p_memoized[(8007414548437939493, start_pos_763)] = result, self.pos
        args['name'] = result
        if result is self.NoMatch:
            results_768 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 768))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 768)]
            # print self._p_error_stack
        else:
            results_768.append(result)
                            
            
            # "EQ"
            result = self.p_startswith('EQ', False)
            if not result:
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 765))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 765)]
                # print self._p_error_stack
                result = self.NoMatch
            if result is self.NoMatch:
                results_768 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 768))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 768)]
                # print self._p_error_stack
            else:
                results_768.append(result)
                                
                
                # atom:atom
                start_pos_766= self.pos
                if (-3565430766822273561, start_pos_766) in self._p_memoized:
                    result, self.pos = self._p_memoized[(-3565430766822273561, self.pos)]
                else:
                    result = self.atom()
                    self._p_memoized[(-3565430766822273561, start_pos_766)] = result, self.pos
                args['atom'] = result
                if result is self.NoMatch:
                    results_768 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 768))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 768)]
                    # print self._p_error_stack
                else:
                    results_768.append(result)
                                    
        if results_768 is not self.NoMatch:
            self.p_discard()
        result = results_768
        if result is not self.NoMatch:
            result = self.on_kwa(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 769))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 769)]
            # print self._p_error_stack
        return result

    def block(self):
        '''block <- deco:deco? name:NAME args:args? COLON NL INDENT stmt:stmt+ DEDENT'''
        args = dict()
        # deco:deco? name:NAME args:args? COLON NL INDENT stmt:stmt+ DEDENT
        self.p_save()
        results_785 = []
        
        # deco:deco?
        # deco?
        start_pos_770= self.pos
        if (-9032469735705933737, start_pos_770) in self._p_memoized:
            result, self.pos = self._p_memoized[(-9032469735705933737, self.pos)]
        else:
            result = self.deco()
            self._p_memoized[(-9032469735705933737, start_pos_770)] = result, self.pos
        result = "" if result is self.NoMatch else result
        if result is self.NoMatch:
            # print self._p_error_stack
            self._p_error_stack.pop()
        args['deco'] = result
        if result is self.NoMatch:
            results_785 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 785))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 785)]
            # print self._p_error_stack
        else:
            results_785.append(result)
                            
            
            # name:NAME
            start_pos_773= self.pos
            if (8007414548437939493, start_pos_773) in self._p_memoized:
                result, self.pos = self._p_memoized[(8007414548437939493, self.pos)]
            else:
                result = self.NAME()
                self._p_memoized[(8007414548437939493, start_pos_773)] = result, self.pos
            args['name'] = result
            if result is self.NoMatch:
                results_785 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 785))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 785)]
                # print self._p_error_stack
            else:
                results_785.append(result)
                                
                
                # args:args?
                # args?
                start_pos_775= self.pos
                if (4125793608775969864, start_pos_775) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4125793608775969864, self.pos)]
                else:
                    result = self.args()
                    self._p_memoized[(4125793608775969864, start_pos_775)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                args['args'] = result
                if result is self.NoMatch:
                    results_785 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 785))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 785)]
                    # print self._p_error_stack
                else:
                    results_785.append(result)
                                    
                    
                    start_pos_778= self.pos
                    if (9202710657822913959, start_pos_778) in self._p_memoized:
                        result, self.pos = self._p_memoized[(9202710657822913959, self.pos)]
                    else:
                        result = self.COLON()
                        self._p_memoized[(9202710657822913959, start_pos_778)] = result, self.pos
                    if result is self.NoMatch:
                        results_785 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 785))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 785)]
                        # print self._p_error_stack
                    else:
                        results_785.append(result)
                                        
                        
                        start_pos_779= self.pos
                        if (4144447232125309470, start_pos_779) in self._p_memoized:
                            result, self.pos = self._p_memoized[(4144447232125309470, self.pos)]
                        else:
                            result = self.NL()
                            self._p_memoized[(4144447232125309470, start_pos_779)] = result, self.pos
                        if result is self.NoMatch:
                            results_785 = self.NoMatch
                            self.p_restore()
                            if self._p_error_stack:
                                head = self._p_error_stack[0]
                            else:
                                head = (0, 0)
                            if self.pos <= head[0]:
                                self._p_error_stack.append((self.pos, 785))
                            elif self.pos > head[0]:
                                self._p_error_stack = [(self.pos, 785)]
                            # print self._p_error_stack
                        else:
                            results_785.append(result)
                                            
                            
                            start_pos_780= self.pos
                            if (2447668809790277206, start_pos_780) in self._p_memoized:
                                result, self.pos = self._p_memoized[(2447668809790277206, self.pos)]
                            else:
                                result = self.INDENT()
                                self._p_memoized[(2447668809790277206, start_pos_780)] = result, self.pos
                            if result is self.NoMatch:
                                results_785 = self.NoMatch
                                self.p_restore()
                                if self._p_error_stack:
                                    head = self._p_error_stack[0]
                                else:
                                    head = (0, 0)
                                if self.pos <= head[0]:
                                    self._p_error_stack.append((self.pos, 785))
                                elif self.pos > head[0]:
                                    self._p_error_stack = [(self.pos, 785)]
                                # print self._p_error_stack
                            else:
                                results_785.append(result)
                                                
                                
                                # stmt:stmt+
                                # stmt+
                                self.p_save()
                                results_782 = []
                                while 42:
                                    start_pos_781= self.pos
                                    if (3677739026703000584, start_pos_781) in self._p_memoized:
                                        result, self.pos = self._p_memoized[(3677739026703000584, self.pos)]
                                    else:
                                        result = self.stmt()
                                        self._p_memoized[(3677739026703000584, start_pos_781)] = result, self.pos
                                    if result is not self.NoMatch:
                                        results_782.append(result)
                                    else:
                                        break
                                if not results_782:
                                    self.p_restore()
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 782))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 782)]
                                    # print self._p_error_stack
                                    result = self.NoMatch
                                else:
                                    self.p_discard()
                                    result = results_782
                                args['stmt'] = result
                                if result is self.NoMatch:
                                    results_785 = self.NoMatch
                                    self.p_restore()
                                    if self._p_error_stack:
                                        head = self._p_error_stack[0]
                                    else:
                                        head = (0, 0)
                                    if self.pos <= head[0]:
                                        self._p_error_stack.append((self.pos, 785))
                                    elif self.pos > head[0]:
                                        self._p_error_stack = [(self.pos, 785)]
                                    # print self._p_error_stack
                                else:
                                    results_785.append(result)
                                                    
                                    
                                    start_pos_784= self.pos
                                    if (-7252020445238361376, start_pos_784) in self._p_memoized:
                                        result, self.pos = self._p_memoized[(-7252020445238361376, self.pos)]
                                    else:
                                        result = self.DEDENT()
                                        self._p_memoized[(-7252020445238361376, start_pos_784)] = result, self.pos
                                    if result is self.NoMatch:
                                        results_785 = self.NoMatch
                                        self.p_restore()
                                        if self._p_error_stack:
                                            head = self._p_error_stack[0]
                                        else:
                                            head = (0, 0)
                                        if self.pos <= head[0]:
                                            self._p_error_stack.append((self.pos, 785))
                                        elif self.pos > head[0]:
                                            self._p_error_stack = [(self.pos, 785)]
                                        # print self._p_error_stack
                                    else:
                                        results_785.append(result)
                                                        
        if results_785 is not self.NoMatch:
            self.p_discard()
        result = results_785
        if result is not self.NoMatch:
            result = self.on_block(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 786))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 786)]
            # print self._p_error_stack
        return result

    def deco(self):
        '''deco <- AT name:NAME args:args? NL'''
        args = dict()
        # AT name:NAME args:args? NL
        self.p_save()
        results_794 = []
        
        start_pos_787= self.pos
        if (-75745347037561785, start_pos_787) in self._p_memoized:
            result, self.pos = self._p_memoized[(-75745347037561785, self.pos)]
        else:
            result = self.AT()
            self._p_memoized[(-75745347037561785, start_pos_787)] = result, self.pos
        if result is self.NoMatch:
            results_794 = self.NoMatch
            self.p_restore()
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 794))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 794)]
            # print self._p_error_stack
        else:
            results_794.append(result)
                            
            
            # name:NAME
            start_pos_788= self.pos
            if (8007414548437939493, start_pos_788) in self._p_memoized:
                result, self.pos = self._p_memoized[(8007414548437939493, self.pos)]
            else:
                result = self.NAME()
                self._p_memoized[(8007414548437939493, start_pos_788)] = result, self.pos
            args['name'] = result
            if result is self.NoMatch:
                results_794 = self.NoMatch
                self.p_restore()
                if self._p_error_stack:
                    head = self._p_error_stack[0]
                else:
                    head = (0, 0)
                if self.pos <= head[0]:
                    self._p_error_stack.append((self.pos, 794))
                elif self.pos > head[0]:
                    self._p_error_stack = [(self.pos, 794)]
                # print self._p_error_stack
            else:
                results_794.append(result)
                                
                
                # args:args?
                # args?
                start_pos_790= self.pos
                if (4125793608775969864, start_pos_790) in self._p_memoized:
                    result, self.pos = self._p_memoized[(4125793608775969864, self.pos)]
                else:
                    result = self.args()
                    self._p_memoized[(4125793608775969864, start_pos_790)] = result, self.pos
                result = "" if result is self.NoMatch else result
                if result is self.NoMatch:
                    # print self._p_error_stack
                    self._p_error_stack.pop()
                args['args'] = result
                if result is self.NoMatch:
                    results_794 = self.NoMatch
                    self.p_restore()
                    if self._p_error_stack:
                        head = self._p_error_stack[0]
                    else:
                        head = (0, 0)
                    if self.pos <= head[0]:
                        self._p_error_stack.append((self.pos, 794))
                    elif self.pos > head[0]:
                        self._p_error_stack = [(self.pos, 794)]
                    # print self._p_error_stack
                else:
                    results_794.append(result)
                                    
                    
                    start_pos_793= self.pos
                    if (4144447232125309470, start_pos_793) in self._p_memoized:
                        result, self.pos = self._p_memoized[(4144447232125309470, self.pos)]
                    else:
                        result = self.NL()
                        self._p_memoized[(4144447232125309470, start_pos_793)] = result, self.pos
                    if result is self.NoMatch:
                        results_794 = self.NoMatch
                        self.p_restore()
                        if self._p_error_stack:
                            head = self._p_error_stack[0]
                        else:
                            head = (0, 0)
                        if self.pos <= head[0]:
                            self._p_error_stack.append((self.pos, 794))
                        elif self.pos > head[0]:
                            self._p_error_stack = [(self.pos, 794)]
                        # print self._p_error_stack
                    else:
                        results_794.append(result)
                                        
        if results_794 is not self.NoMatch:
            self.p_discard()
        result = results_794
        if result is not self.NoMatch:
            result = self.on_deco(result, **args)
        else:
            if self._p_error_stack:
                head = self._p_error_stack[0]
            else:
                head = (0, 0)
            if self.pos <= head[0]:
                self._p_error_stack.append((self.pos, 795))
            elif self.pos > head[0]:
                self._p_error_stack = [(self.pos, 795)]
            # print self._p_error_stack
        return result


    _p_expressions = {
        291: _Expr(is_syntaxic_terminal=False, expected=['__']),
        292: _Expr(is_syntaxic_terminal=False, expected=['rule']),
        293: _Expr(is_syntaxic_terminal=False, expected=['__']),
        294: _Expr(is_syntaxic_terminal=False, expected=['rule __'], exprs=True),
        295: _Expr(is_syntaxic_terminal=False, expected=['( rule __ )+'], expr=True),
        296: _Expr(is_syntaxic_terminal=False, expected=['rules:( rule __ )+'], expr=True),
        297: _Expr(is_syntaxic_terminal=False, expected=['__ rules:( rule __ )+'], exprs=True),
        298: _Expr(is_syntaxic_terminal=False, expected=['__ rules:( rule __ )+'], expr=True),
        299: _Expr(is_syntaxic_terminal=False, expected=['"`"']),
        300: _Expr(is_syntaxic_terminal=False, expected=['"`"?'], expr=True),
        301: _Expr(is_syntaxic_terminal=False, expected=['terminal:"`"?'], expr=True),
        302: _Expr(is_syntaxic_terminal=False, expected=['identifier_name']),
        303: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name'], expr=True),
        304: _Expr(is_syntaxic_terminal=False, expected=['__']),
        305: _Expr(is_syntaxic_terminal=False, expected=['alias']),
        306: _Expr(is_syntaxic_terminal=False, expected=['alias:alias'], expr=True),
        307: _Expr(is_syntaxic_terminal=False, expected=['_']),
        308: _Expr(is_syntaxic_terminal=False, expected=['alias:alias _'], exprs=True),
        309: _Expr(is_syntaxic_terminal=False, expected=['( alias:alias _ )?'], expr=True),
        310: _Expr(is_syntaxic_terminal=False, expected=['"<-"']),
        311: _Expr(is_syntaxic_terminal=False, expected=['__']),
        312: _Expr(is_syntaxic_terminal=False, expected=['expression']),
        313: _Expr(is_syntaxic_terminal=False, expected=['expr:expression'], expr=True),
        314: _Expr(is_syntaxic_terminal=False, expected=['__']),
        315: _Expr(is_syntaxic_terminal=False, expected=['code_block']),
        316: _Expr(is_syntaxic_terminal=False, expected=['__ code_block'], exprs=True),
        317: _Expr(is_syntaxic_terminal=False, expected=['( __ code_block )?'], expr=True),
        318: _Expr(is_syntaxic_terminal=False, expected=['code:( __ code_block )?'], expr=True),
        319: _Expr(is_syntaxic_terminal=False, expected=['EOS']),
        320: _Expr(is_syntaxic_terminal=False, expected=['terminal:"`"? name:identifier_name __ ( alias:alias _ )? "<-" __ expr:expression code:( __ code_block )? EOS'], exprs=True),
        321: _Expr(is_syntaxic_terminal=True, expected=['RULE'], expr=True),
        322: _Expr(is_syntaxic_terminal=False, expected=['"{"']),
        323: _Expr(is_syntaxic_terminal=False, expected=['code']),
        324: _Expr(is_syntaxic_terminal=False, expected=['code:code'], expr=True),
        325: _Expr(is_syntaxic_terminal=False, expected=['"}"']),
        326: _Expr(is_syntaxic_terminal=False, expected=['"{" code:code "}"'], exprs=True),
        327: _Expr(is_syntaxic_terminal=True, expected=['CODE_BLOCK'], expr=True),
        328: _Expr(is_syntaxic_terminal=False, expected=['[{}]']),
        329: _Expr(is_syntaxic_terminal=False, expected=['![{}]'], expr=True),
        330: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        331: _Expr(is_syntaxic_terminal=False, expected=['![{}] source_char'], exprs=True),
        332: _Expr(is_syntaxic_terminal=False, expected=['( ![{}] source_char )+'], expr=True),
        333: _Expr(is_syntaxic_terminal=False, expected=['"{"']),
        334: _Expr(is_syntaxic_terminal=False, expected=['code']),
        335: _Expr(is_syntaxic_terminal=False, expected=['"}"']),
        336: _Expr(is_syntaxic_terminal=False, expected=['"{" code "}"'], exprs=True),
        337: _Expr(is_syntaxic_terminal=False, expected=['( ![{}] source_char )+ / ( "{" code "}" )'], exprs=True),
        338: _Expr(is_syntaxic_terminal=False, expected=['( ( ![{}] source_char )+ / ( "{" code "}" ) )*'], expr=True),
        339: _Expr(is_syntaxic_terminal=False, expected=['( ( ![{}] source_char )+ / ( "{" code "}" ) )*'], expr=True),
        340: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        341: _Expr(is_syntaxic_terminal=True, expected=['ALIAS'], expr=True),
        342: _Expr(is_syntaxic_terminal=False, expected=['choice_expr']),
        343: _Expr(is_syntaxic_terminal=True, expected=['EXPRESSION'], expr=True),
        344: _Expr(is_syntaxic_terminal=False, expected=['seq_expr']),
        345: _Expr(is_syntaxic_terminal=False, expected=['first:seq_expr'], expr=True),
        346: _Expr(is_syntaxic_terminal=False, expected=['__']),
        347: _Expr(is_syntaxic_terminal=False, expected=['"/"']),
        348: _Expr(is_syntaxic_terminal=False, expected=['__']),
        349: _Expr(is_syntaxic_terminal=False, expected=['seq_expr']),
        350: _Expr(is_syntaxic_terminal=False, expected=['__ "/" __ seq_expr'], exprs=True),
        351: _Expr(is_syntaxic_terminal=False, expected=['( __ "/" __ seq_expr )*'], expr=True),
        352: _Expr(is_syntaxic_terminal=False, expected=['rest:( __ "/" __ seq_expr )*'], expr=True),
        353: _Expr(is_syntaxic_terminal=False, expected=['first:seq_expr rest:( __ "/" __ seq_expr )*'], exprs=True),
        354: _Expr(is_syntaxic_terminal=False, expected=['first:seq_expr rest:( __ "/" __ seq_expr )*'], expr=True),
        355: _Expr(is_syntaxic_terminal=False, expected=['regexp_expr']),
        356: _Expr(is_syntaxic_terminal=False, expected=['lit_expr']),
        357: _Expr(is_syntaxic_terminal=False, expected=['char_range_expr']),
        358: _Expr(is_syntaxic_terminal=False, expected=['any_char_expr']),
        359: _Expr(is_syntaxic_terminal=False, expected=['rule_expr']),
        360: _Expr(is_syntaxic_terminal=False, expected=['sub_expr']),
        361: _Expr(is_syntaxic_terminal=False, expected=['regexp_expr / lit_expr / char_range_expr / any_char_expr / rule_expr / sub_expr'], exprs=True),
        362: _Expr(is_syntaxic_terminal=False, expected=['regexp_expr / lit_expr / char_range_expr / any_char_expr / rule_expr / sub_expr'], expr=True),
        363: _Expr(is_syntaxic_terminal=False, expected=['"("']),
        364: _Expr(is_syntaxic_terminal=False, expected=['__']),
        365: _Expr(is_syntaxic_terminal=False, expected=['expression']),
        366: _Expr(is_syntaxic_terminal=False, expected=['expr:expression'], expr=True),
        367: _Expr(is_syntaxic_terminal=False, expected=['__']),
        368: _Expr(is_syntaxic_terminal=False, expected=['")"']),
        369: _Expr(is_syntaxic_terminal=False, expected=['"(" __ expr:expression __ ")"'], exprs=True),
        370: _Expr(is_syntaxic_terminal=False, expected=['"(" __ expr:expression __ ")"'], expr=True),
        371: _Expr(is_syntaxic_terminal=False, expected=['"~"']),
        372: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        373: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal'], expr=True),
        374: _Expr(is_syntaxic_terminal=False, expected=['[iLmsux]']),
        375: _Expr(is_syntaxic_terminal=False, expected=['[iLmsux]*'], expr=True),
        376: _Expr(is_syntaxic_terminal=False, expected=['flags:[iLmsux]*'], expr=True),
        377: _Expr(is_syntaxic_terminal=False, expected=['"~" lit:string_literal flags:[iLmsux]*'], exprs=True),
        378: _Expr(is_syntaxic_terminal=False, expected=['"~" lit:string_literal flags:[iLmsux]*'], expr=True),
        379: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        380: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal'], expr=True),
        381: _Expr(is_syntaxic_terminal=False, expected=['"i"']),
        382: _Expr(is_syntaxic_terminal=False, expected=['"i"?'], expr=True),
        383: _Expr(is_syntaxic_terminal=False, expected=['ignore:"i"?'], expr=True),
        384: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal ignore:"i"?'], exprs=True),
        385: _Expr(is_syntaxic_terminal=False, expected=['lit:string_literal ignore:"i"?'], expr=True),
        386: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        387: _Expr(is_syntaxic_terminal=False, expected=['double_string_char']),
        388: _Expr(is_syntaxic_terminal=False, expected=['double_string_char*'], expr=True),
        389: _Expr(is_syntaxic_terminal=False, expected=['content:double_string_char*'], expr=True),
        390: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        391: _Expr(is_syntaxic_terminal=False, expected=['\'"\' content:double_string_char* \'"\''], exprs=True),
        392: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        393: _Expr(is_syntaxic_terminal=False, expected=['single_string_char']),
        394: _Expr(is_syntaxic_terminal=False, expected=['single_string_char*'], expr=True),
        395: _Expr(is_syntaxic_terminal=False, expected=['content:single_string_char*'], expr=True),
        396: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        397: _Expr(is_syntaxic_terminal=False, expected=['"\'" content:single_string_char* "\'"'], exprs=True),
        398: _Expr(is_syntaxic_terminal=False, expected=['( \'"\' content:double_string_char* \'"\' ) / ( "\'" content:single_string_char* "\'" )'], exprs=True),
        399: _Expr(is_syntaxic_terminal=False, expected=['( \'"\' content:double_string_char* \'"\' ) / ( "\'" content:single_string_char* "\'" )'], expr=True),
        400: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        401: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        402: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        403: _Expr(is_syntaxic_terminal=False, expected=['\'"\' / "\\\\" / EOL'], exprs=True),
        404: _Expr(is_syntaxic_terminal=False, expected=['!( \'"\' / "\\\\" / EOL )'], expr=True),
        405: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        406: _Expr(is_syntaxic_terminal=False, expected=['char:source_char'], expr=True),
        407: _Expr(is_syntaxic_terminal=False, expected=['!( \'"\' / "\\\\" / EOL ) char:source_char'], exprs=True),
        408: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        409: _Expr(is_syntaxic_terminal=False, expected=['double_string_escape']),
        410: _Expr(is_syntaxic_terminal=False, expected=['char:double_string_escape'], expr=True),
        411: _Expr(is_syntaxic_terminal=False, expected=['"\\\\" char:double_string_escape'], exprs=True),
        412: _Expr(is_syntaxic_terminal=False, expected=['( !( \'"\' / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:double_string_escape )'], exprs=True),
        413: _Expr(is_syntaxic_terminal=False, expected=['( !( \'"\' / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:double_string_escape )'], expr=True),
        414: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        415: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        416: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        417: _Expr(is_syntaxic_terminal=False, expected=['"\'" / "\\\\" / EOL'], exprs=True),
        418: _Expr(is_syntaxic_terminal=False, expected=['!( "\'" / "\\\\" / EOL )'], expr=True),
        419: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        420: _Expr(is_syntaxic_terminal=False, expected=['char:source_char'], expr=True),
        421: _Expr(is_syntaxic_terminal=False, expected=['!( "\'" / "\\\\" / EOL ) char:source_char'], exprs=True),
        422: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        423: _Expr(is_syntaxic_terminal=False, expected=['single_string_escape']),
        424: _Expr(is_syntaxic_terminal=False, expected=['char:single_string_escape'], expr=True),
        425: _Expr(is_syntaxic_terminal=False, expected=['"\\\\" char:single_string_escape'], exprs=True),
        426: _Expr(is_syntaxic_terminal=False, expected=['( !( "\'" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:single_string_escape )'], exprs=True),
        427: _Expr(is_syntaxic_terminal=False, expected=['( !( "\'" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:single_string_escape )'], expr=True),
        428: _Expr(is_syntaxic_terminal=False, expected=['"\'"']),
        429: _Expr(is_syntaxic_terminal=False, expected=['common_escape']),
        430: _Expr(is_syntaxic_terminal=False, expected=['"\'" / common_escape'], exprs=True),
        431: _Expr(is_syntaxic_terminal=False, expected=['"\'" / common_escape'], expr=True),
        432: _Expr(is_syntaxic_terminal=False, expected=['\'"\'']),
        433: _Expr(is_syntaxic_terminal=False, expected=['common_escape']),
        434: _Expr(is_syntaxic_terminal=False, expected=['\'"\' / common_escape'], exprs=True),
        435: _Expr(is_syntaxic_terminal=False, expected=['\'"\' / common_escape'], expr=True),
        436: _Expr(is_syntaxic_terminal=False, expected=['"."']),
        437: _Expr(is_syntaxic_terminal=False, expected=['"."'], expr=True),
        438: _Expr(is_syntaxic_terminal=False, expected=['identifier_name']),
        439: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name'], expr=True),
        440: _Expr(is_syntaxic_terminal=False, expected=['__']),
        441: _Expr(is_syntaxic_terminal=False, expected=['string_literal']),
        442: _Expr(is_syntaxic_terminal=False, expected=['__']),
        443: _Expr(is_syntaxic_terminal=False, expected=['string_literal __'], exprs=True),
        444: _Expr(is_syntaxic_terminal=False, expected=['( string_literal __ )?'], expr=True),
        445: _Expr(is_syntaxic_terminal=False, expected=['"<-"']),
        446: _Expr(is_syntaxic_terminal=False, expected=['__ ( string_literal __ )? "<-"'], exprs=True),
        447: _Expr(is_syntaxic_terminal=False, expected=['!( __ ( string_literal __ )? "<-" )'], expr=True),
        448: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name !( __ ( string_literal __ )? "<-" )'], exprs=True),
        449: _Expr(is_syntaxic_terminal=False, expected=['name:identifier_name !( __ ( string_literal __ )? "<-" )'], expr=True),
        450: _Expr(is_syntaxic_terminal=False, expected=['labeled_expr']),
        451: _Expr(is_syntaxic_terminal=False, expected=['first:labeled_expr'], expr=True),
        452: _Expr(is_syntaxic_terminal=False, expected=['__']),
        453: _Expr(is_syntaxic_terminal=False, expected=['labeled_expr']),
        454: _Expr(is_syntaxic_terminal=False, expected=['__ labeled_expr'], exprs=True),
        455: _Expr(is_syntaxic_terminal=False, expected=['( __ labeled_expr )*'], expr=True),
        456: _Expr(is_syntaxic_terminal=False, expected=['rest:( __ labeled_expr )*'], expr=True),
        457: _Expr(is_syntaxic_terminal=False, expected=['first:labeled_expr rest:( __ labeled_expr )*'], exprs=True),
        458: _Expr(is_syntaxic_terminal=False, expected=['first:labeled_expr rest:( __ labeled_expr )*'], expr=True),
        459: _Expr(is_syntaxic_terminal=False, expected=['identifier']),
        460: _Expr(is_syntaxic_terminal=False, expected=['identifier?'], expr=True),
        461: _Expr(is_syntaxic_terminal=False, expected=['__']),
        462: _Expr(is_syntaxic_terminal=False, expected=['":"']),
        463: _Expr(is_syntaxic_terminal=False, expected=['__']),
        464: _Expr(is_syntaxic_terminal=False, expected=['identifier? __ ":" __'], exprs=True),
        465: _Expr(is_syntaxic_terminal=False, expected=['( identifier? __ ":" __ )?'], expr=True),
        466: _Expr(is_syntaxic_terminal=False, expected=['label:( identifier? __ ":" __ )?'], expr=True),
        467: _Expr(is_syntaxic_terminal=False, expected=['prefixed_expr']),
        468: _Expr(is_syntaxic_terminal=False, expected=['expr:prefixed_expr'], expr=True),
        469: _Expr(is_syntaxic_terminal=False, expected=['label:( identifier? __ ":" __ )? expr:prefixed_expr'], exprs=True),
        470: _Expr(is_syntaxic_terminal=False, expected=['label:( identifier? __ ":" __ )? expr:prefixed_expr'], expr=True),
        471: _Expr(is_syntaxic_terminal=False, expected=['prefix']),
        472: _Expr(is_syntaxic_terminal=False, expected=['__']),
        473: _Expr(is_syntaxic_terminal=False, expected=['prefix __'], exprs=True),
        474: _Expr(is_syntaxic_terminal=False, expected=['( prefix __ )?'], expr=True),
        475: _Expr(is_syntaxic_terminal=False, expected=['prefix:( prefix __ )?'], expr=True),
        476: _Expr(is_syntaxic_terminal=False, expected=['suffixed_expr']),
        477: _Expr(is_syntaxic_terminal=False, expected=['expr:suffixed_expr'], expr=True),
        478: _Expr(is_syntaxic_terminal=False, expected=['prefix:( prefix __ )? expr:suffixed_expr'], exprs=True),
        479: _Expr(is_syntaxic_terminal=False, expected=['prefix:( prefix __ )? expr:suffixed_expr'], expr=True),
        480: _Expr(is_syntaxic_terminal=False, expected=['primary_expr']),
        481: _Expr(is_syntaxic_terminal=False, expected=['expr:primary_expr'], expr=True),
        482: _Expr(is_syntaxic_terminal=False, expected=['__']),
        483: _Expr(is_syntaxic_terminal=False, expected=['suffix']),
        484: _Expr(is_syntaxic_terminal=False, expected=['__ suffix'], exprs=True),
        485: _Expr(is_syntaxic_terminal=False, expected=['( __ suffix )?'], expr=True),
        486: _Expr(is_syntaxic_terminal=False, expected=['suffix:( __ suffix )?'], expr=True),
        487: _Expr(is_syntaxic_terminal=False, expected=['expr:primary_expr suffix:( __ suffix )?'], exprs=True),
        488: _Expr(is_syntaxic_terminal=False, expected=['expr:primary_expr suffix:( __ suffix )?'], expr=True),
        489: _Expr(is_syntaxic_terminal=False, expected=['[?+*]']),
        490: _Expr(is_syntaxic_terminal=False, expected=['[?+*]'], expr=True),
        491: _Expr(is_syntaxic_terminal=False, expected=['[!&]']),
        492: _Expr(is_syntaxic_terminal=False, expected=['[!&]'], expr=True),
        493: _Expr(is_syntaxic_terminal=False, expected=['"["']),
        494: _Expr(is_syntaxic_terminal=False, expected=['class_char_range']),
        495: _Expr(is_syntaxic_terminal=False, expected=['class_char']),
        496: _Expr(is_syntaxic_terminal=False, expected=['class_char_range / class_char'], exprs=True),
        497: _Expr(is_syntaxic_terminal=False, expected=['( class_char_range / class_char )*'], expr=True),
        498: _Expr(is_syntaxic_terminal=False, expected=['content:( class_char_range / class_char )*'], expr=True),
        499: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        500: _Expr(is_syntaxic_terminal=False, expected=['"i"']),
        501: _Expr(is_syntaxic_terminal=False, expected=['"i"?'], expr=True),
        502: _Expr(is_syntaxic_terminal=False, expected=['ignore:"i"?'], expr=True),
        503: _Expr(is_syntaxic_terminal=False, expected=['"[" content:( class_char_range / class_char )* "]" ignore:"i"?'], exprs=True),
        504: _Expr(is_syntaxic_terminal=False, expected=['"[" content:( class_char_range / class_char )* "]" ignore:"i"?'], expr=True),
        505: _Expr(is_syntaxic_terminal=False, expected=['class_char']),
        506: _Expr(is_syntaxic_terminal=False, expected=['start:class_char'], expr=True),
        507: _Expr(is_syntaxic_terminal=False, expected=['"-"']),
        508: _Expr(is_syntaxic_terminal=False, expected=['class_char']),
        509: _Expr(is_syntaxic_terminal=False, expected=['end:class_char'], expr=True),
        510: _Expr(is_syntaxic_terminal=False, expected=['start:class_char "-" end:class_char'], exprs=True),
        511: _Expr(is_syntaxic_terminal=False, expected=['start:class_char "-" end:class_char'], expr=True),
        512: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        513: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        514: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        515: _Expr(is_syntaxic_terminal=False, expected=['"]" / "\\\\" / EOL'], exprs=True),
        516: _Expr(is_syntaxic_terminal=False, expected=['!( "]" / "\\\\" / EOL )'], expr=True),
        517: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        518: _Expr(is_syntaxic_terminal=False, expected=['char:source_char'], expr=True),
        519: _Expr(is_syntaxic_terminal=False, expected=['!( "]" / "\\\\" / EOL ) char:source_char'], exprs=True),
        520: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        521: _Expr(is_syntaxic_terminal=False, expected=['char_class_escape']),
        522: _Expr(is_syntaxic_terminal=False, expected=['char:char_class_escape'], expr=True),
        523: _Expr(is_syntaxic_terminal=False, expected=['"\\\\" char:char_class_escape'], exprs=True),
        524: _Expr(is_syntaxic_terminal=False, expected=['( !( "]" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:char_class_escape )'], exprs=True),
        525: _Expr(is_syntaxic_terminal=False, expected=['( !( "]" / "\\\\" / EOL ) char:source_char ) / ( "\\\\" char:char_class_escape )'], expr=True),
        526: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        527: _Expr(is_syntaxic_terminal=False, expected=['common_escape']),
        528: _Expr(is_syntaxic_terminal=False, expected=['"]" / common_escape'], exprs=True),
        529: _Expr(is_syntaxic_terminal=False, expected=['"]" / common_escape'], expr=True),
        530: _Expr(is_syntaxic_terminal=False, expected=['single_char_escape']),
        531: _Expr(is_syntaxic_terminal=False, expected=['single_char_escape'], expr=True),
        532: _Expr(is_syntaxic_terminal=False, expected=['"a"']),
        533: _Expr(is_syntaxic_terminal=False, expected=['"b"']),
        534: _Expr(is_syntaxic_terminal=False, expected=['"n"']),
        535: _Expr(is_syntaxic_terminal=False, expected=['"f"']),
        536: _Expr(is_syntaxic_terminal=False, expected=['"r"']),
        537: _Expr(is_syntaxic_terminal=False, expected=['"t"']),
        538: _Expr(is_syntaxic_terminal=False, expected=['"v"']),
        539: _Expr(is_syntaxic_terminal=False, expected=['"\\\\"']),
        540: _Expr(is_syntaxic_terminal=False, expected=['"a" / "b" / "n" / "f" / "r" / "t" / "v" / "\\\\"'], exprs=True),
        541: _Expr(is_syntaxic_terminal=False, expected=['"a" / "b" / "n" / "f" / "r" / "t" / "v" / "\\\\"'], expr=True),
        542: _Expr(is_syntaxic_terminal=False, expected=['"#"']),
        543: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        544: _Expr(is_syntaxic_terminal=False, expected=['!EOL'], expr=True),
        545: _Expr(is_syntaxic_terminal=False, expected=['source_char']),
        546: _Expr(is_syntaxic_terminal=False, expected=['!EOL source_char'], exprs=True),
        547: _Expr(is_syntaxic_terminal=False, expected=['( !EOL source_char )*'], expr=True),
        548: _Expr(is_syntaxic_terminal=False, expected=['"#" ( !EOL source_char )*'], exprs=True),
        549: _Expr(is_syntaxic_terminal=False, expected=['"#" ( !EOL source_char )*'], expr=True),
        550: _Expr(is_syntaxic_terminal=False, expected=['.']),
        551: _Expr(is_syntaxic_terminal=False, expected=['.'], expr=True),
        552: _Expr(is_syntaxic_terminal=False, expected=['identifier_name']),
        553: _Expr(is_syntaxic_terminal=False, expected=['identifier_name'], expr=True),
        554: _Expr(is_syntaxic_terminal=False, expected=['identifier_start']),
        555: _Expr(is_syntaxic_terminal=False, expected=['identifier_part']),
        556: _Expr(is_syntaxic_terminal=False, expected=['identifier_part*'], expr=True),
        557: _Expr(is_syntaxic_terminal=False, expected=['identifier_start identifier_part*'], exprs=True),
        558: _Expr(is_syntaxic_terminal=False, expected=['identifier_start identifier_part*'], expr=True),
        559: _Expr(is_syntaxic_terminal=False, expected=['[A-Za-z_]']),
        560: _Expr(is_syntaxic_terminal=False, expected=['[A-Za-z_]'], expr=True),
        561: _Expr(is_syntaxic_terminal=False, expected=['identifier_start']),
        562: _Expr(is_syntaxic_terminal=False, expected=['[0-9]']),
        563: _Expr(is_syntaxic_terminal=False, expected=['identifier_start / [0-9]'], exprs=True),
        564: _Expr(is_syntaxic_terminal=False, expected=['identifier_start / [0-9]'], expr=True),
        565: _Expr(is_syntaxic_terminal=False, expected=['whitespace']),
        566: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        567: _Expr(is_syntaxic_terminal=False, expected=['comment']),
        568: _Expr(is_syntaxic_terminal=False, expected=['whitespace / EOL / comment'], exprs=True),
        569: _Expr(is_syntaxic_terminal=False, expected=['( whitespace / EOL / comment )*'], expr=True),
        570: _Expr(is_syntaxic_terminal=False, expected=['( whitespace / EOL / comment )*'], expr=True),
        571: _Expr(is_syntaxic_terminal=False, expected=['whitespace']),
        572: _Expr(is_syntaxic_terminal=False, expected=['whitespace*'], expr=True),
        573: _Expr(is_syntaxic_terminal=False, expected=['whitespace*'], expr=True),
        574: _Expr(is_syntaxic_terminal=False, expected=['[ \\t\\r]']),
        575: _Expr(is_syntaxic_terminal=False, expected=['[ \\t\\r]'], expr=True),
        576: _Expr(is_syntaxic_terminal=False, expected=['"\\n"']),
        577: _Expr(is_syntaxic_terminal=False, expected=['"\\n"'], expr=True),
        578: _Expr(is_syntaxic_terminal=False, expected=['_']),
        579: _Expr(is_syntaxic_terminal=False, expected=['comment']),
        580: _Expr(is_syntaxic_terminal=False, expected=['comment?'], expr=True),
        581: _Expr(is_syntaxic_terminal=False, expected=['EOL']),
        582: _Expr(is_syntaxic_terminal=False, expected=['_ comment? EOL'], exprs=True),
        583: _Expr(is_syntaxic_terminal=False, expected=['__']),
        584: _Expr(is_syntaxic_terminal=False, expected=['EOF']),
        585: _Expr(is_syntaxic_terminal=False, expected=['__ EOF'], exprs=True),
        586: _Expr(is_syntaxic_terminal=False, expected=['( _ comment? EOL ) / ( __ EOF )'], exprs=True),
        587: _Expr(is_syntaxic_terminal=False, expected=['( _ comment? EOL ) / ( __ EOF )'], expr=True),
        588: _Expr(is_syntaxic_terminal=False, expected=['.']),
        589: _Expr(is_syntaxic_terminal=False, expected=['!.'], expr=True),
        590: _Expr(is_syntaxic_terminal=False, expected=['!.'], expr=True),
        591: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        592: _Expr(is_syntaxic_terminal=False, expected=['NL?'], expr=True),
        593: _Expr(is_syntaxic_terminal=False, expected=['model']),
        594: _Expr(is_syntaxic_terminal=False, expected=['model:model'], expr=True),
        595: _Expr(is_syntaxic_terminal=False, expected=['NL? model:model'], exprs=True),
        596: _Expr(is_syntaxic_terminal=False, expected=['NL? model:model'], expr=True),
        597: _Expr(is_syntaxic_terminal=False, expected=["~'([\\t ]*(#.*)?\\n)+'"]),
        598: _Expr(is_syntaxic_terminal=False, expected=["~'([\\t ]*(#.*)?\\n)+'"], expr=True),
        599: _Expr(is_syntaxic_terminal=False, expected=["~'[\\t ]+'"]),
        600: _Expr(is_syntaxic_terminal=False, expected=["~'[\\t ]+'?"], expr=True),
        601: _Expr(is_syntaxic_terminal=False, expected=["~'[\\t ]+'?"], expr=True),
        602: _Expr(is_syntaxic_terminal=False, expected=['_']),
        603: _Expr(is_syntaxic_terminal=False, expected=['":"']),
        604: _Expr(is_syntaxic_terminal=False, expected=['_']),
        605: _Expr(is_syntaxic_terminal=False, expected=['_ ":" _'], exprs=True),
        606: _Expr(is_syntaxic_terminal=False, expected=['_ ":" _'], expr=True),
        607: _Expr(is_syntaxic_terminal=False, expected=['_']),
        608: _Expr(is_syntaxic_terminal=False, expected=['","']),
        609: _Expr(is_syntaxic_terminal=False, expected=['_']),
        610: _Expr(is_syntaxic_terminal=False, expected=['_ "," _'], exprs=True),
        611: _Expr(is_syntaxic_terminal=False, expected=['_ "," _'], expr=True),
        612: _Expr(is_syntaxic_terminal=False, expected=['_']),
        613: _Expr(is_syntaxic_terminal=False, expected=['"@"']),
        614: _Expr(is_syntaxic_terminal=False, expected=['_']),
        615: _Expr(is_syntaxic_terminal=False, expected=['_ "@" _'], exprs=True),
        616: _Expr(is_syntaxic_terminal=False, expected=['_ "@" _'], expr=True),
        617: _Expr(is_syntaxic_terminal=False, expected=['_']),
        618: _Expr(is_syntaxic_terminal=False, expected=['"="']),
        619: _Expr(is_syntaxic_terminal=False, expected=['_']),
        620: _Expr(is_syntaxic_terminal=False, expected=['_ "=" _'], exprs=True),
        621: _Expr(is_syntaxic_terminal=False, expected=['_ "=" _'], expr=True),
        622: _Expr(is_syntaxic_terminal=False, expected=['_']),
        623: _Expr(is_syntaxic_terminal=False, expected=['"("']),
        624: _Expr(is_syntaxic_terminal=False, expected=['_']),
        625: _Expr(is_syntaxic_terminal=False, expected=['_ "(" _'], exprs=True),
        626: _Expr(is_syntaxic_terminal=False, expected=['_ "(" _'], expr=True),
        627: _Expr(is_syntaxic_terminal=False, expected=['_']),
        628: _Expr(is_syntaxic_terminal=False, expected=['")"']),
        629: _Expr(is_syntaxic_terminal=False, expected=['_']),
        630: _Expr(is_syntaxic_terminal=False, expected=['_ ")" _'], exprs=True),
        631: _Expr(is_syntaxic_terminal=False, expected=['_ ")" _'], expr=True),
        632: _Expr(is_syntaxic_terminal=False, expected=['_']),
        633: _Expr(is_syntaxic_terminal=False, expected=['"["']),
        634: _Expr(is_syntaxic_terminal=False, expected=['_']),
        635: _Expr(is_syntaxic_terminal=False, expected=['_ "[" _'], exprs=True),
        636: _Expr(is_syntaxic_terminal=False, expected=['_ "[" _'], expr=True),
        637: _Expr(is_syntaxic_terminal=False, expected=['_']),
        638: _Expr(is_syntaxic_terminal=False, expected=['"]"']),
        639: _Expr(is_syntaxic_terminal=False, expected=['_']),
        640: _Expr(is_syntaxic_terminal=False, expected=['_ "]" _'], exprs=True),
        641: _Expr(is_syntaxic_terminal=False, expected=['_ "]" _'], expr=True),
        642: _Expr(is_syntaxic_terminal=False, expected=['_']),
        643: _Expr(is_syntaxic_terminal=False, expected=['"{"']),
        644: _Expr(is_syntaxic_terminal=False, expected=['_']),
        645: _Expr(is_syntaxic_terminal=False, expected=['_ "{" _'], exprs=True),
        646: _Expr(is_syntaxic_terminal=False, expected=['_ "{" _'], expr=True),
        647: _Expr(is_syntaxic_terminal=False, expected=['_']),
        648: _Expr(is_syntaxic_terminal=False, expected=['"}"']),
        649: _Expr(is_syntaxic_terminal=False, expected=['_']),
        650: _Expr(is_syntaxic_terminal=False, expected=['_ "}" _'], exprs=True),
        651: _Expr(is_syntaxic_terminal=False, expected=['_ "}" _'], expr=True),
        652: _Expr(is_syntaxic_terminal=False, expected=['_']),
        653: _Expr(is_syntaxic_terminal=False, expected=['"↦"']),
        654: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        655: _Expr(is_syntaxic_terminal=False, expected=['NL?'], expr=True),
        656: _Expr(is_syntaxic_terminal=False, expected=['_']),
        657: _Expr(is_syntaxic_terminal=False, expected=['_ "↦" NL? _'], exprs=True),
        658: _Expr(is_syntaxic_terminal=False, expected=['_ "↦" NL? _'], expr=True),
        659: _Expr(is_syntaxic_terminal=False, expected=['_']),
        660: _Expr(is_syntaxic_terminal=False, expected=['"↤"']),
        661: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        662: _Expr(is_syntaxic_terminal=False, expected=['NL?'], expr=True),
        663: _Expr(is_syntaxic_terminal=False, expected=['_']),
        664: _Expr(is_syntaxic_terminal=False, expected=['_ "↤" NL? _'], exprs=True),
        665: _Expr(is_syntaxic_terminal=False, expected=['_ "↤" NL? _'], expr=True),
        666: _Expr(is_syntaxic_terminal=False, expected=['_']),
        667: _Expr(is_syntaxic_terminal=False, expected=["~'[+-]?[0-9]+'"]),
        668: _Expr(is_syntaxic_terminal=False, expected=["_ ~'[+-]?[0-9]+'"], exprs=True),
        669: _Expr(is_syntaxic_terminal=False, expected=["_ ~'[+-]?[0-9]+'"], expr=True),
        670: _Expr(is_syntaxic_terminal=False, expected=['_']),
        671: _Expr(is_syntaxic_terminal=False, expected=["~'[a-z][a-z0-9_]*'i"]),
        672: _Expr(is_syntaxic_terminal=False, expected=['_']),
        673: _Expr(is_syntaxic_terminal=False, expected=["_ ~'[a-z][a-z0-9_]*'i _"], exprs=True),
        674: _Expr(is_syntaxic_terminal=False, expected=["_ ~'[a-z][a-z0-9_]*'i _"], expr=True),
        675: _Expr(is_syntaxic_terminal=False, expected=['name']),
        676: _Expr(is_syntaxic_terminal=False, expected=['name:name'], expr=True),
        677: _Expr(is_syntaxic_terminal=False, expected=['NUMBER']),
        678: _Expr(is_syntaxic_terminal=False, expected=['num:NUMBER'], expr=True),
        679: _Expr(is_syntaxic_terminal=False, expected=['code']),
        680: _Expr(is_syntaxic_terminal=False, expected=['code:code'], expr=True),
        681: _Expr(is_syntaxic_terminal=False, expected=['string']),
        682: _Expr(is_syntaxic_terminal=False, expected=['string:string'], expr=True),
        683: _Expr(is_syntaxic_terminal=False, expected=['name:name / num:NUMBER / code:code / string:string'], exprs=True),
        684: _Expr(is_syntaxic_terminal=False, expected=['name:name / num:NUMBER / code:code / string:string'], expr=True),
        685: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        686: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        687: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        688: _Expr(is_syntaxic_terminal=False, expected=['codec']),
        689: _Expr(is_syntaxic_terminal=False, expected=['codeb']),
        690: _Expr(is_syntaxic_terminal=False, expected=['codec / codeb'], exprs=True),
        691: _Expr(is_syntaxic_terminal=False, expected=['codec / codeb'], expr=True),
        692: _Expr(is_syntaxic_terminal=False, expected=['LCB']),
        693: _Expr(is_syntaxic_terminal=False, expected=["~'([^{}\\\\\\\\]|[{}])+'"]),
        694: _Expr(is_syntaxic_terminal=False, expected=['codec']),
        695: _Expr(is_syntaxic_terminal=False, expected=["~'([^{}\\\\\\\\]|[{}])+' / codec"], exprs=True),
        696: _Expr(is_syntaxic_terminal=False, expected=["( ~'([^{}\\\\\\\\]|[{}])+' / codec )*"], expr=True),
        697: _Expr(is_syntaxic_terminal=False, expected=['RCB']),
        698: _Expr(is_syntaxic_terminal=False, expected=["LCB ( ~'([^{}\\\\\\\\]|[{}])+' / codec )* RCB"], exprs=True),
        699: _Expr(is_syntaxic_terminal=False, expected=["LCB ( ~'([^{}\\\\\\\\]|[{}])+' / codec )* RCB"], expr=True),
        700: _Expr(is_syntaxic_terminal=False, expected=['LSB']),
        701: _Expr(is_syntaxic_terminal=False, expected=["~'([^\\\\[\\\\]\\\\\\\\]|[\\\\[\\\\]])+'"]),
        702: _Expr(is_syntaxic_terminal=False, expected=['codeb']),
        703: _Expr(is_syntaxic_terminal=False, expected=["~'([^\\\\[\\\\]\\\\\\\\]|[\\\\[\\\\]])+' / codeb"], exprs=True),
        704: _Expr(is_syntaxic_terminal=False, expected=["( ~'([^\\\\[\\\\]\\\\\\\\]|[\\\\[\\\\]])+' / codeb )*"], expr=True),
        705: _Expr(is_syntaxic_terminal=False, expected=['RSB']),
        706: _Expr(is_syntaxic_terminal=False, expected=["LSB ( ~'([^\\\\[\\\\]\\\\\\\\]|[\\\\[\\\\]])+' / codeb )* RSB"], exprs=True),
        707: _Expr(is_syntaxic_terminal=False, expected=["LSB ( ~'([^\\\\[\\\\]\\\\\\\\]|[\\\\[\\\\]])+' / codeb )* RSB"], expr=True),
        708: _Expr(is_syntaxic_terminal=False, expected=['_']),
        709: _Expr(is_syntaxic_terminal=False, expected=['~"\'{3}.*?\'{3}"s']),
        710: _Expr(is_syntaxic_terminal=False, expected=['~\'"{3}.*?"{3}\'s']),
        711: _Expr(is_syntaxic_terminal=False, expected=['~"\'([^\'\\\\\\\\]|\\\\.)*\'"']),
        712: _Expr(is_syntaxic_terminal=False, expected=['~\'"([^"\\\\\\\\]|\\\\.)*"\'']),
        713: _Expr(is_syntaxic_terminal=False, expected=['~"\'{3}.*?\'{3}"s / ~\'"{3}.*?"{3}\'s / ~"\'([^\'\\\\\\\\]|\\\\.)*\'" / ~\'"([^"\\\\\\\\]|\\\\.)*"\''], exprs=True),
        714: _Expr(is_syntaxic_terminal=False, expected=['_']),
        715: _Expr(is_syntaxic_terminal=False, expected=['_ ( ~"\'{3}.*?\'{3}"s / ~\'"{3}.*?"{3}\'s / ~"\'([^\'\\\\\\\\]|\\\\.)*\'" / ~\'"([^"\\\\\\\\]|\\\\.)*"\' ) _'], exprs=True),
        716: _Expr(is_syntaxic_terminal=False, expected=['_ ( ~"\'{3}.*?\'{3}"s / ~\'"{3}.*?"{3}\'s / ~"\'([^\'\\\\\\\\]|\\\\.)*\'" / ~\'"([^"\\\\\\\\]|\\\\.)*"\' ) _'], expr=True),
        717: _Expr(is_syntaxic_terminal=False, expected=['stmt']),
        718: _Expr(is_syntaxic_terminal=False, expected=['stmt+'], expr=True),
        719: _Expr(is_syntaxic_terminal=False, expected=['stmt:stmt+'], expr=True),
        720: _Expr(is_syntaxic_terminal=False, expected=['stmt:stmt+'], expr=True),
        721: _Expr(is_syntaxic_terminal=False, expected=['call']),
        722: _Expr(is_syntaxic_terminal=False, expected=['call:call'], expr=True),
        723: _Expr(is_syntaxic_terminal=False, expected=['block']),
        724: _Expr(is_syntaxic_terminal=False, expected=['block:block'], expr=True),
        725: _Expr(is_syntaxic_terminal=False, expected=['call:call / block:block'], exprs=True),
        726: _Expr(is_syntaxic_terminal=False, expected=['call:call / block:block'], expr=True),
        727: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        728: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        729: _Expr(is_syntaxic_terminal=False, expected=['args']),
        730: _Expr(is_syntaxic_terminal=False, expected=['args:args'], expr=True),
        731: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        732: _Expr(is_syntaxic_terminal=False, expected=['name:NAME args:args NL'], exprs=True),
        733: _Expr(is_syntaxic_terminal=False, expected=['name:NAME args:args NL'], expr=True),
        734: _Expr(is_syntaxic_terminal=False, expected=['LP']),
        735: _Expr(is_syntaxic_terminal=False, expected=['posargs']),
        736: _Expr(is_syntaxic_terminal=False, expected=['pos:posargs'], expr=True),
        737: _Expr(is_syntaxic_terminal=False, expected=['kwargs']),
        738: _Expr(is_syntaxic_terminal=False, expected=['kw:kwargs'], expr=True),
        739: _Expr(is_syntaxic_terminal=False, expected=['posargs']),
        740: _Expr(is_syntaxic_terminal=False, expected=['pos:posargs'], expr=True),
        741: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        742: _Expr(is_syntaxic_terminal=False, expected=['kwargs']),
        743: _Expr(is_syntaxic_terminal=False, expected=['kw:kwargs'], expr=True),
        744: _Expr(is_syntaxic_terminal=False, expected=['pos:posargs COMMA kw:kwargs'], exprs=True),
        745: _Expr(is_syntaxic_terminal=False, expected=['pos:posargs / kw:kwargs / ( pos:posargs COMMA kw:kwargs )'], exprs=True),
        746: _Expr(is_syntaxic_terminal=False, expected=['( pos:posargs / kw:kwargs / ( pos:posargs COMMA kw:kwargs ) )?'], expr=True),
        747: _Expr(is_syntaxic_terminal=False, expected=['RP']),
        748: _Expr(is_syntaxic_terminal=False, expected=['LP ( pos:posargs / kw:kwargs / ( pos:posargs COMMA kw:kwargs ) )? RP'], exprs=True),
        749: _Expr(is_syntaxic_terminal=False, expected=['LP ( pos:posargs / kw:kwargs / ( pos:posargs COMMA kw:kwargs ) )? RP'], expr=True),
        750: _Expr(is_syntaxic_terminal=False, expected=['atom']),
        751: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        752: _Expr(is_syntaxic_terminal=False, expected=['atom']),
        753: _Expr(is_syntaxic_terminal=False, expected=['COMMA atom'], exprs=True),
        754: _Expr(is_syntaxic_terminal=False, expected=['( COMMA atom )*'], expr=True),
        755: _Expr(is_syntaxic_terminal=False, expected=['atom ( COMMA atom )*'], exprs=True),
        756: _Expr(is_syntaxic_terminal=False, expected=['atom ( COMMA atom )*'], expr=True),
        757: _Expr(is_syntaxic_terminal=False, expected=['kwa']),
        758: _Expr(is_syntaxic_terminal=False, expected=['COMMA']),
        759: _Expr(is_syntaxic_terminal=False, expected=['kwa']),
        760: _Expr(is_syntaxic_terminal=False, expected=['COMMA kwa'], exprs=True),
        761: _Expr(is_syntaxic_terminal=False, expected=['kwa ( COMMA kwa )'], exprs=True),
        762: _Expr(is_syntaxic_terminal=False, expected=['kwa ( COMMA kwa )'], expr=True),
        763: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        764: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        765: _Expr(is_syntaxic_terminal=False, expected=['"EQ"']),
        766: _Expr(is_syntaxic_terminal=False, expected=['atom']),
        767: _Expr(is_syntaxic_terminal=False, expected=['atom:atom'], expr=True),
        768: _Expr(is_syntaxic_terminal=False, expected=['name:NAME "EQ" atom:atom'], exprs=True),
        769: _Expr(is_syntaxic_terminal=False, expected=['name:NAME "EQ" atom:atom'], expr=True),
        770: _Expr(is_syntaxic_terminal=False, expected=['deco']),
        771: _Expr(is_syntaxic_terminal=False, expected=['deco?'], expr=True),
        772: _Expr(is_syntaxic_terminal=False, expected=['deco:deco?'], expr=True),
        773: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        774: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        775: _Expr(is_syntaxic_terminal=False, expected=['args']),
        776: _Expr(is_syntaxic_terminal=False, expected=['args?'], expr=True),
        777: _Expr(is_syntaxic_terminal=False, expected=['args:args?'], expr=True),
        778: _Expr(is_syntaxic_terminal=False, expected=['COLON']),
        779: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        780: _Expr(is_syntaxic_terminal=False, expected=['INDENT']),
        781: _Expr(is_syntaxic_terminal=False, expected=['stmt']),
        782: _Expr(is_syntaxic_terminal=False, expected=['stmt+'], expr=True),
        783: _Expr(is_syntaxic_terminal=False, expected=['stmt:stmt+'], expr=True),
        784: _Expr(is_syntaxic_terminal=False, expected=['DEDENT']),
        785: _Expr(is_syntaxic_terminal=False, expected=['deco:deco? name:NAME args:args? COLON NL INDENT stmt:stmt+ DEDENT'], exprs=True),
        786: _Expr(is_syntaxic_terminal=False, expected=['deco:deco? name:NAME args:args? COLON NL INDENT stmt:stmt+ DEDENT'], expr=True),
        787: _Expr(is_syntaxic_terminal=False, expected=['AT']),
        788: _Expr(is_syntaxic_terminal=False, expected=['NAME']),
        789: _Expr(is_syntaxic_terminal=False, expected=['name:NAME'], expr=True),
        790: _Expr(is_syntaxic_terminal=False, expected=['args']),
        791: _Expr(is_syntaxic_terminal=False, expected=['args?'], expr=True),
        792: _Expr(is_syntaxic_terminal=False, expected=['args:args?'], expr=True),
        793: _Expr(is_syntaxic_terminal=False, expected=['NL']),
        794: _Expr(is_syntaxic_terminal=False, expected=['AT name:NAME args:args? NL'], exprs=True),
        795: _Expr(is_syntaxic_terminal=False, expected=['AT name:NAME args:args? NL'], expr=True),
    }
