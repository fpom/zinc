{
  "version": 3,
  "file": "dicts.js",
  "sourceRoot": "../..",
  "sources": [
    "libs/js/dicts.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Python3 dicts ported to CoffeeScript, inspired from a Python version at\n# https://code.activestate.com/recipes/578375/\n\nFREE  = -1\nDUMMY = -2\n\nhash = (obj) ->\n    try\n        return obj.hash()\n    catch err\n        h = 0\n        if typeof(obj) == \"string\"\n            for c in obj\n                h = (h << 5) - h + c.charCodeAt(0)\n        else if obj instanceof Array\n            for x in obj\n                h = (h << 5) - h + hash(x)\n        else if obj instanceof Object\n            for k, v of obj\n                h = h ^ ((hash(k) << 5) - h + hash(v))\n        else\n            h = hash(\"#{obj}\")\n        return h\n\neq = (left, right) ->\n    try\n        return left.eq(right)\n    catch err\n        if left instanceof Array\n            if right not instanceof Array\n                return false\n            if right.length != left.length\n                return false\n            for i in [0..left.length]\n                if not eq(left[i], right[i])\n                    return false\n            return true\n        else if left instanceof Object\n            if right not instanceof Object\n                return false\n            for k, v of left\n                if not right[k]?\n                    return false\n            for k, v of right\n                if not eq(left[k], right[k])\n                    return false\n            return true\n        else\n            return left == right\n\nclass KeyError\n    constructor: (@message) ->\n        @name = \"KeyError\"\n\nclass Dict\n    constructor: (init={}) ->\n        @clear()\n        for key, val of init\n            @set(key, val)\n    clear: ->\n        @indices  = {}\n        @itemlist = []\n        @used     = 0\n    len: ->\n        return @used\n    _gen_probes: (hashvalue) ->\n        PERTURB_SHIFT = 5\n        if hashvalue < 0\n            hashvalue = -hashvalue\n        i = hashvalue\n        yield i\n        perturb = hashvalue\n        while true\n            i = 5 * i + perturb + 1\n            perturb >>= PERTURB_SHIFT\n    _lookup: (key, hashvalue) ->\n        freeslot = null\n        for i from @_gen_probes(hashvalue)\n            index = @indices[i]\n            if index == undefined\n                index = FREE\n                if freeslot == null\n                    return [FREE, i]\n                else\n                    return [DUMMY, freeslot]\n            else if index == DUMMY\n                if freeslot == null\n                    freeslot = i\n            else\n                item = @itemlist[index]\n                if item.key is key || item.hash == hashvalue && eq(item.key, key)\n                    return [index, i]\n    set: (key, value) ->\n        hashvalue = hash(key)\n        [index, i] = @_lookup(key, hashvalue)\n        if index < 0\n            @indices[i] = @used\n            @itemlist.push {key: key, value: value, hash: hashvalue}\n            @used++\n        else\n            @itemlist[index] = {key: key, value: value, hash: hashvalue}\n    get: (key) ->\n        [index, i] = @_lookup(key, hash(key))\n        if index < 0\n            throw new KeyError(\"key #{key} not found\")\n        return @itemlist[index].value\n    del: (key) ->\n        [index, i] = @_lookup(key, hash(key))\n        if index < 0\n            throw new KeyError(\"key #{key} not found\")\n        @indices[i] = DUMMY\n        @used--\n        if index != @used\n            lastitem = @itemlist[@itemlist.length - 1]\n            [lastindex, j] = @_lookup(lastitem.key, lastitem.hash)\n            @indices[j] = index\n            @itemlist[index] = lastitem\n        @itemlist.pop()\n    iter: ->\n        for item in @itemlist\n            yield [item.key, item.value]\n    has: (key) ->\n        [index, i] = @_lookup(key, hash(key))\n        return index >= 0\n    get: (key, otherwise=null) ->\n        [index, i] = @_lookup(key, hash(key))\n        if index < 0\n            return otherwise\n        return @itemlist[index].value\n    pop: ->\n        if @user == 0\n            throw new KeyError(\"cannot pop from empty dict\")\n        item = @itemlist[@itemlist.length - 1]\n        @del(key)\n        return [item.key, item.value]\n    toString: ->\n        items = (\"#{ k }: #{ v }\" for [k, v] from @iter())\n        return \"{#{ items.join(', ') }}\"\n\nmodule.exports =\n    hash: hash\n    eq: eq\n    KeyError: KeyError\n    Dict: Dict\n"
  ]
}