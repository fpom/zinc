{
  "version": 3,
  "file": "markings.js",
  "sourceRoot": "../..",
  "sources": [
    "libs/js/markings.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "dicts = require \"./dicts\"\nmsets = require \"./multisets\"\n\nclass Marking\n    constructor: (@id=null) ->\n        \"\"\"\n        coffee> new markings.Marking()\n        Marking { id: null, d: Dict { indices: {}, itemlist: [], used: 0 } }\n        coffee> new markings.Marking(42)\n        Marking { id: 42, d: Dict { indices: {}, itemlist: [], used: 0 } }\n        \"\"\"\n        @d = new dicts.Dict()\n    iter: ->\n        return @d.iter()\n    hash: ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> a.set(\"p2\", 4, 5)\n        coffee> b = new markings.Marking()\n        coffee> b.set(\"p1\", 3, 1, 2)\n        coffee> b.set(\"p2\", 5, 4)\n        coffee> a.hash() == b.hash()\n        true\n        \"\"\"\n        h = 7028009221\n        for [p, m] from @d.iter()\n            h ^= (dicts.hash(p) << 5) + dicts.hash(m)\n        return h\n    eq: (other) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> a.set(\"p2\", 4, 5)\n        coffee> b = new markings.Marking()\n        coffee> b.set(\"p1\", 3, 1, 2)\n        coffee> b.set(\"p2\", 5, 4)\n        coffee> a.eq(b)\n        true\n        \"\"\"\n        if other not instanceof Marking\n            return false\n        return @d.eq(other.d)\n    copy: (id=null) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> a.set(\"p2\", 4, 5)\n        coffee> a.copy().eq(a)\n        coffee> a.copy() is a\n        false\n        \"\"\"\n        copy = new Marking(id)\n        for [p, m] from @iter()\n            copy.set(p, m.copy())\n        return copy\n    has: (place) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> a.set(\"p2\", 4, 5)\n        coffee> a.has(\"p1\")\n        true\n        coffee> a.has(\"p3\")\n        false\n        \"\"\"\n        return @d.has(place)\n    set: (place, tokens...) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> console.log a.get(\"p1\").toString()\n        [1, 2, 3]\n        coffee> a.set(\"p1\")\n        coffee> a.has(\"p1\")\n        false\n        \"\"\"\n        if tokens.length == 0 and @has(place)\n            @d.del(place)\n        else\n            @d.set(place, new msets.Mset(tokens...))\n    update: (place, tokens) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> a.set(\"p2\", 4, 5, 6)\n        coffee> a.update(\"p1\", a.get(\"p2\"))\n        coffee> console.log a.get(\"p1\").toString()\n        [1, 2, 3, 4, 5, 6]\n        \"\"\"\n        if @has(place)\n            @d.get(place).add(tokens)\n        else\n            @d.set(place, tokens.copy())\n    get: (place) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> console.log a.get(\"p1\").toString()\n        [1, 2, 3]\n        coffee> console.log a.get(\"p2\").toString()\n        []\n        \"\"\"\n        return @d.get(place, new msets.Mset())\n    empty: (place) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> a.empty(\"p1\")\n        false\n        coffee> a.empty(\"p2\")\n        true\n        \"\"\"\n        return @get(place).empty()\n    add: (other) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> b = new markings.Marking()\n        coffee> b.set(\"p1\", 4)\n        coffee> b.set(\"p2\", 5, 6)\n        coffee> c = new markings.Marking()\n        coffee> c.set(\"p1\", 1, 2, 3, 4)\n        coffee> c.set(\"p2\", 5, 6)\n        coffee> a.add(b).eq(c)\n        true\n        \"\"\"\n        for [p, m] from other.iter()\n            @update(p, m)\n        return this\n    sub: (other) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> b = new markings.Marking()\n        coffee> b.set(\"p1\", 2, 3)\n        coffee> b.set(\"p2\", 5)\n        coffee> c = new markings.Marking()\n        coffee> c.set(\"p1\", 1)\n        coffee> a.sub(b).eq(c)\n        true\n        \"\"\"\n        for [p, m] from other.iter()\n            mine = @d.get(p, this)\n            if mine is this\n                # skip\n            else if m.geq(mine)\n                @d.del(p)\n            else\n                @d.set(p, mine.sub(m))\n        return this\n    geq: (other) ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> b = new markings.Marking()\n        coffee> b.set(\"p1\", 2, 3)\n        coffee> a.geq(b)\n        true\n        coffee> b.set(\"p1\", 1, 2, 3)\n        coffee> a.geq(b)\n        true\n        coffee> b.set(\"p1\", 1, 2, 3, 4)\n        coffee> b.get(\"p1\").d\n        coffee> a.geq(b)\n        false\n        coffee> b.set(\"p1\", 1, 2, 3)\n        coffee> b.set(\"p2\", 4)\n        coffee> a.geq(b)\n        false\n        \"\"\"\n        for [p, m] from other.iter()\n            if not @get(p).geq(m)\n                return false\n        return true\n    toString: ->\n        \"\"\"\n        coffee> a = new markings.Marking()\n        coffee> a.set(\"p1\", 1, 2, 3)\n        coffee> a.set(\"p2\", 3, 4)\n        coffee> console.log a.toString()\n        {'p1': [1, 2, 3], 'p2': [3, 4]}\n        \"\"\"\n        items = (\"'#{ p }': #{ m.toString() }\" for [p, m] from @iter())\n        return \"{#{ items.join(', ') }}\"\n\nmodule.exports =\n    Marking: Marking\n"
  ]
}