{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "../..",
  "sources": [
    "libs/js/main.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;;EAAA,IAAA,GAAO,OAAA,CAAQ,QAAR;;EACP,KAAA,GAEA,UAAA,GAAa,QAAA,CAAC,IAAD,EAAO,OAAP,EAAgB,YAAhB,EAA8B,WAA9B,EAA2C,UAA3C,CAAA;AACT,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA;IAAA,CAAA,GAAI,IAAA,CAAA;IACJ,CAAC,CAAC,EAAF,GAAO;IACP,IAAA,GAAO,IAAI,IAAI,CAAC,KAAT,CAAe,CAAf;IACP,IAAA,GAAO,IAAI,IAAI,CAAC,GAAT,CAAA;IACP,IAAA,GAAO;AACP,WAAM,CAAI,IAAI,CAAC,KAAL,CAAA,CAAV;MACI,KAAA,GAAQ,IAAI,CAAC,GAAL,CAAA;MACR,IAAA,GAAO,IAAI,IAAI,CAAC,GAAT,CAAA;MACP,OAAA,CAAQ,KAAR,EAAe,IAAf;MACA,IAAG,IAAI,CAAC,KAAL,CAAA,CAAH;QACI,IAAA,IAAQ,EADZ;;MAEA,IAAG,CAAC,UAAA,IAAe,IAAI,CAAC,KAAL,CAAA,CAAhB,CAAA,IAAiC,YAApC;QACI,OAAO,CAAC,GAAR,CAAY,KAAK,CAAC,QAAN,CAAA,CAAZ,EADJ;;AAEA;MAAA,KAAA,QAAA;QACI,IAAG,IAAI,CAAC,GAAL,CAAS,CAAT,CAAH;UACI,CAAA,GAAI,IAAI,CAAC,GAAL,CAAS,CAAT,EADR;SAAA,MAAA;UAGI,CAAC,CAAC,EAAF,GAAO,IAAI,CAAC,GAAL,CAAA;UACP,IAAI,CAAC,GAAL,CAAS,CAAT;UACA,IAAI,CAAC,GAAL,CAAS,CAAT,EALJ;;QAMA,IAAG,WAAH;UACI,OAAO,CAAC,GAAR,CAAY,GAAZ,EAAiB,CAAC,CAAC,QAAF,CAAA,CAAjB,EADJ;;MAPJ;IARJ;AAiBA,WAAO,CAAC,IAAI,CAAC,GAAL,CAAA,CAAD,EAAa,IAAb;EAvBE;;EAyBb,GAAA,GAAM,QAAA,CAAC,IAAD,EAAO,QAAP,CAAA;AACF,QAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAA,CAAA,GAAI,IAAA,CAAA;IACJ,CAAC,CAAC,EAAF,GAAO;IACP,IAAA,GAAO,IAAI,IAAI,CAAC,KAAT,CAAe,CAAf;IACP,IAAA,GAAO,IAAI,IAAI,CAAC,GAAT,CAAA;AACP;WAAM,CAAI,IAAI,CAAC,KAAL,CAAA,CAAV;MACI,KAAA,GAAQ,IAAI,CAAC,GAAL,CAAA;MACR,OAAO,CAAC,GAAR,CAAY,KAAK,CAAC,QAAN,CAAA,CAAZ;;;AACA;AAAA;QAAA,KAAA,QAAA;UAAI,CAAC,KAAD,EAAQ,IAAR,EAAc,GAAd,EAAmB,GAAnB;UACA,IAAA,GAAO,KAAK,CAAC,IAAN,CAAA,CAAY,CAAC,GAAb,CAAiB,GAAjB,CAAqB,CAAC,GAAtB,CAA0B,GAA1B;UACP,IAAG,IAAI,CAAC,GAAL,CAAS,IAAT,CAAH;YACI,IAAA,GAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EADX;WAAA,MAAA;YAGI,IAAI,CAAC,EAAL,GAAU,IAAI,CAAC,GAAL,CAAA;YACV,IAAI,CAAC,GAAL,CAAS,IAAT;YACA,IAAI,CAAC,GAAL,CAAS,IAAT,EALJ;;UAMA,OAAO,CAAC,GAAR,CAAY,CAAA,EAAA,CAAA,CAAM,KAAN,CAAa,GAAb,CAAA,CAAmB,IAAnB,CAAA,CAAZ;UACA,OAAO,CAAC,GAAR,CAAY,CAAA,GAAA,CAAA,CAAO,GAAG,CAAC,QAAJ,CAAA,CAAP,CAAA,CAAZ;UACA,OAAO,CAAC,GAAR,CAAY,CAAA,GAAA,CAAA,CAAO,GAAG,CAAC,QAAJ,CAAA,CAAP,CAAA,CAAZ;wBACA,OAAO,CAAC,GAAR,CAAY,CAAA,GAAA,CAAA,CAAO,IAAI,CAAC,QAAL,CAAA,CAAP,CAAA,CAAZ;QAXJ,CAAA;;;IAHJ,CAAA;;EALE;;EAqBN,IAAA,GAAO,QAAA,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,EAAsB,QAAtB,CAAA;AACH,QAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;IAAA,IAAA,GAAO;MAAC,CAAA,EAAG,KAAJ;MAAW,CAAA,EAAG,KAAd;MAAqB,CAAA,EAAG,KAAxB;MAA+B,CAAA,EAAG,KAAlC;MAAyC,CAAA,EAAG;IAA5C;AACP;IAAA,KAAA,qCAAA;;MACI,IAAG,eAAH;QACI,IAAK,CAAA,CAAA,CAAL,GAAU,KADd;OAAA,MAEK,IAAG,CAAA,KAAK,GAAR;AAAA;;OAAA,MAEA,IAAG,CAAA,KAAK,GAAR;QACD,OAAO,CAAC,GAAR,CAAY,CAAA,OAAA,CAAA,CAAW,IAAX,CAAiB,sBAAjB,CAAZ;QACA,OAAO,CAAC,GAAR,CAAY,YAAZ;QACA,OAAO,CAAC,GAAR,CAAY,sCAAZ;QACA,OAAO,CAAC,GAAR,CAAY,8BAAZ;QACA,OAAO,CAAC,GAAR,CAAY,8BAAZ;QACA,OAAO,CAAC,GAAR,CAAY,+BAAZ;QACA,OAAO,CAAC,GAAR,CAAY,0BAAZ;QACA,OAAO,CAAC,GAAR,CAAY,8BAAZ;AACA,eATC;OAAA,MAAA;QAWD,OAAO,CAAC,GAAR,CAAY,CAAA,eAAA,CAAA,CAAmB,CAAnB,CAAsB,iBAAtB,CAAZ;AACA,eAZC;;IALT;IAkBA,IAAG,IAAI,CAAC,CAAR;MACI,CAAC,CAAD,EAAI,CAAJ,CAAA,GAAS,UAAA,CAAW,IAAX,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,KAAjC,EAAwC,KAAxC;MACT,IAAG,IAAI,CAAC,CAAR;eACI,OAAO,CAAC,GAAR,CAAY,CAAA,CAAA,CAAI,CAAJ,CAAO,UAAP,CAAZ,EADJ;OAAA,MAAA;eAGI,OAAO,CAAC,GAAR,CAAY,CAAA,CAAA,CAAI,CAAJ,CAAO,iBAAP,CAAZ,EAHJ;OAFJ;KAAA,MAMK,IAAG,IAAI,CAAC,CAAR;aACD,GAAA,CAAI,IAAJ,EAAU,QAAV,EADC;KAAA,MAEA,IAAG,IAAI,CAAC,CAAR;aACD,UAAA,CAAW,IAAX,EAAiB,OAAjB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,KAAtC,EADC;KAAA,MAEA,IAAG,IAAI,CAAC,CAAR;aACD,UAAA,CAAW,IAAX,EAAiB,OAAjB,EAA0B,IAA1B,EAAgC,KAAhC,EAAuC,KAAvC,EADC;KAAA,MAEA,IAAG,IAAI,CAAC,CAAR;aACD,UAAA,CAAW,IAAX,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,KAAjC,EAAwC,IAAxC,EADC;KAAA,MAAA;aAGD,OAAO,CAAC,GAAR,CAAY,iCAAZ,EAHC;;EAhCF;;EAqCP,MAAM,CAAC,OAAP,GACI;IAAA,UAAA,EAAY,UAAZ;IACA,GAAA,EAAK,GADL;IAEA,IAAA,EAAM;EAFN;AAvFJ",
  "sourcesContent": [
    "sets = require \"./sets\"\ndicts = \n\nstatespace = (init, addsucc, print_states, print_succs, print_dead) ->\n    i = init()\n    i.id = 0\n    todo = new sets.Queue(i)\n    seen = new sets.Set()\n    dead = 0\n    while not todo.empty()\n        state = todo.get()\n        succ = new sets.Set()\n        addsucc(state, succ)\n        if succ.empty()\n            dead += 1\n        if (print_dead and succ.empty()) or print_states\n            console.log state.toString()\n        for s from succ.iter()\n            if seen.has(s)\n                s = seen.get(s)\n            else\n                s.id = seen.len()\n                seen.add(s)\n                todo.put(s)\n            if print_succs\n                console.log \">\", s.toString()\n    return [seen.len(), dead]\n    \nlts = (init, itersucc) ->\n    i = init()\n    i.id = 0\n    todo = new sets.Queue(i)\n    seen = new sets.Set()\n    while not todo.empty()\n        state = todo.get()\n        console.log state.toString()\n        for [trans, mode, sub, add] from itersucc(state)\n            succ = state.copy().sub(sub).add(add)\n            if seen.has(succ)\n                succ = seen.get(s)\n            else\n                succ.id = seen.len()\n                seen.add(succ)\n                todo.put(succ)\n            console.log \"@ #{ trans } = #{ mode }\"\n            console.log \" - #{ sub.toString() }\"\n            console.log \" + #{ add.toString() }\"\n            console.log \" > #{ succ.toString() }\"\n\nmain = (name, init, addsucc, itersucc) ->\n    args = {s: false, d: false, m: false, g: false, l: false}\n    for c in process.argv[2..].join(\"\")\n        if args[c]?\n            args[c] = true\n        else if c == \"-\"\n            # skip\n        else if c == \"h\"\n            console.log \"usage: #{ name } [-s] (-d|-g|-m|-l|-h)\"\n            console.log \"  options:\"\n            console.log \"    -l   labelled transitions system\"\n            console.log \"    -g   print marking graph\"\n            console.log \"    -m   only print markings\"\n            console.log \"    -d   only print deadlocks\"\n            console.log \"    -s   only print size\"\n            console.log \"    -h   print help and exit\"\n            return\n        else\n            console.log \"invalid option #{ c }, try -h for help\"\n            return\n    if args.s\n        [s, d] = statespace(init, addsucc, false, false, false)\n        if args.d\n            console.log \"#{ d } deadlocks\"\n        else\n            console.log \"#{ s } reachable states\"\n    else if args.l\n        lts(init, itersucc)\n    else if args.g\n        statespace(init, addsucc, true, true, false)\n    else if args.m\n        statespace(init, addsucc, true, false, false)\n    else if args.d\n        statespace(init, addsucc, false, false, true)\n    else\n        console.log \"missing option, try -h for help\"\n\nmodule.exports =\n    statespace: statespace\n    lts: lts\n    main: main\n"
  ]
}