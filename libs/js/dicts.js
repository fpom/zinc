// Generated by CoffeeScript 2.0.2
(function() {
  // Python3 dicts ported to CoffeeScript, inspired from a Python version at
  // https://code.activestate.com/recipes/578375/
  var DUMMY, Dict, FREE, KeyError, eq, hash;

  FREE = -1;

  DUMMY = -2;

  hash = function(obj) {
    "coffee> dicts.hash(\"hello world\")\n-8572760634\ncoffee> dicts.hash(42)\n-4720677242\ncoffee> dicts.hash(42) == dicts.hash(\"42\")\nfalse\ncoffee> dicts.hash([1, 2, 3])\n4097603114\ncoffee> dicts.hash([1, 2, 3]) == dicts.hash([3, 2, 1])\nfalse\ncoffee> dicts.hash(a:1, b:2, c:3)\n2146137064\ncoffee> dicts.hash(a:1, b:2, c:3) == dicts.hash(c:3, b:2, a:1)\ntrue";
    var c, err, h, k, l, len, len1, m, ref, v, x;
    try {
      return obj.hash();
    } catch (error) {
      err = error;
      h = 0;
      if (typeof obj === "string") {
        ref = `${typeof obj}/${obj}`;
        for (l = 0, len = ref.length; l < len; l++) {
          c = ref[l];
          h = (h << 5) - h + c.charCodeAt(0);
        }
      } else if (obj instanceof Array) {
        for (m = 0, len1 = obj.length; m < len1; m++) {
          x = obj[m];
          h = (h << 5) - h + hash(x);
        }
      } else if (obj instanceof Object) {
        for (k in obj) {
          v = obj[k];
          h ^= (hash(k) << 5) + hash(v);
        }
      } else {
        h = hash(`${typeof obj}/${obj}`);
      }
      return h;
    }
  };

  eq = function(left, right) {
    "coffee> dicts.eq(\"hello\", \"hello\")\ntrue\ncoffee> dicts.eq(\"hello\", \"world\")\nfalse\ncoffee> dicts.eq(42, 42)\ntrue\ncoffee> dicts.eq(42, -42)\nfalse\ncoffee> dicts.eq([1, 2, 3], [1, 2, 3])\ntrue\ncoffee> dicts.eq([1, 2, 3], [1, 2, 3, 4])\nfalse\ncoffee> dicts.eq([1, 2, 3], [1, 2, 4])\nfalse\ncoffee> dicts.eq({a:1, b:2, c:3}, {c:3, b:2, a:1})\ntrue\ncoffee> dicts.eq({a:1, b:2, c:3}, {a:1, b:2, c:3, d:4})\nfalse\ncoffee> dicts.eq({a:1, b:2, c:3}, {a:1, b:2})\nfalse\ncoffee> dicts.eq({a:1, b:2, c:3}, {a:1, b:2, c:1234})\nfalse\ncoffee> dicts.eq({a:1, b:2, c:3}, {a:1, b:2, d:3})\nfalse";
    var err, i, k, l, ref, v;
    try {
      return left.eq(right);
    } catch (error) {
      err = error;
      if (left instanceof Array) {
        if (!(right instanceof Array)) {
          return false;
        }
        if (right.length !== left.length) {
          return false;
        }
        for (i = l = 0, ref = left.length; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
          if (!eq(left[i], right[i])) {
            return false;
          }
        }
        return true;
      } else if (left instanceof Object) {
        if (!(right instanceof Object)) {
          return false;
        }
        for (k in left) {
          v = left[k];
          if (right[k] == null) {
            return false;
          }
        }
        for (k in right) {
          v = right[k];
          if (!eq(left[k], right[k])) {
            return false;
          }
        }
        return true;
      } else {
        return left === right;
      }
    }
  };

  KeyError = class KeyError {
    constructor(message) {
      this.message = message;
      this.name = "KeyError";
    }

  };

  Dict = class Dict {
    constructor(init = {}) {
      "coffee> new dicts.Dict()\nDict { indices: {}, itemlist: [], used: 0 }\ncoffee> new dicts.Dict(a:1, b:2)\nDict{indices: { '...': 1, '...': 0 },\n     itemlist: [{ key: 'a', value: 1, hash: ...},\n                { key: 'b', value: 2, hash: ...}],\n     used: 2}";
      var key, val;
      this.clear();
      for (key in init) {
        val = init[key];
        this.set(key, val);
      }
    }

    clear() {
      this.indices = {};
      this.itemlist = [];
      return this.used = 0;
    }

    len() {
      "coffee> (new dicts.Dict()).len()\n0\ncoffee> (new dicts.Dict(a:1, b:2)).len()\n2";
      return this.used;
    }

    * _gen_probes(hashvalue) {
      var PERTURB_SHIFT, i, perturb, results;
      PERTURB_SHIFT = 5;
      if (hashvalue < 0) {
        hashvalue = -hashvalue;
      }
      i = hashvalue;
      yield i;
      perturb = hashvalue;
      results = [];
      while (true) {
        i = 5 * i + perturb + 1;
        perturb >>= PERTURB_SHIFT;
        results.push((yield i));
      }
      return results;
    }

    _lookup(key, hashvalue) {
      var freeslot, i, index, item, ref;
      freeslot = null;
      ref = this._gen_probes(hashvalue);
      for (i of ref) {
        index = this.indices[i];
        if (index === void 0) {
          index = FREE;
          if (freeslot === null) {
            return [FREE, i];
          } else {
            return [DUMMY, freeslot];
          }
        } else if (index === DUMMY) {
          if (freeslot === null) {
            freeslot = i;
          }
        } else {
          item = this.itemlist[index];
          if (item.key === key || item.hash === hashvalue && eq(item.key, key)) {
            return [index, i];
          }
        }
      }
    }

    set(key, value) {
      "coffee> a = new dicts.Dict(a:1, b:2)\ncoffee> a.set(\"c\", 3)\ncoffee> a.set(\"a\", 0)\ncoffee> console.log a.toString()\n{a: 0, b: 2, c: 3}";
      var hashvalue, i, index;
      hashvalue = hash(key);
      [index, i] = this._lookup(key, hashvalue);
      if (index < 0) {
        this.indices[i] = this.used;
        this.itemlist.push({
          key: key,
          value: value,
          hash: hashvalue
        });
        return this.used++;
      } else {
        return this.itemlist[index] = {
          key: key,
          value: value,
          hash: hashvalue
        };
      }
    }

    fetch(key, otherwise = null) {
      var i, index;
      [index, i] = this._lookup(key, hash(key));
      if (index < 0) {
        return otherwise;
      }
      return this.itemlist[index].value;
    }

    get(key, def = void 0) {
      "coffee> a = new dicts.Dict(a:1, b:2)\ncoffee> a.get(\"a\")\n1\ncoffee> a.get(\"x\")\nThrown: ...\ncoffee> a.get(\"x\", null)\nnull";
      var i, index;
      [index, i] = this._lookup(key, hash(key));
      if (index < 0) {
        if (def === void 0) {
          throw new KeyError(`key ${key} not found`);
        } else {
          return def;
        }
      }
      return this.itemlist[index].value;
    }

    del(key) {
      "coffee> a = new dicts.Dict(a:1, b:2)\ncoffee> a.del(\"a\")\ncoffee> a.del(\"x\")\nThrown: ...\ncoffee> a.eq(new dicts.Dict(b:2))\ntrue";
      var i, index, j, lastindex, lastitem;
      [index, i] = this._lookup(key, hash(key));
      if (index < 0) {
        throw new KeyError(`key ${key} not found`);
      }
      this.indices[i] = DUMMY;
      this.used--;
      if (index !== this.used) {
        lastitem = this.itemlist[this.itemlist.length - 1];
        [lastindex, j] = this._lookup(lastitem.key, lastitem.hash);
        this.indices[j] = index;
        this.itemlist[index] = lastitem;
      }
      return this.itemlist.pop();
    }

    * iter() {
      var item, l, len, ref, results;
      ref = this.itemlist;
      results = [];
      for (l = 0, len = ref.length; l < len; l++) {
        item = ref[l];
        results.push((yield [item.key, item.value]));
      }
      return results;
    }

    copy() {
      var copy, item, l, len, ref;
      copy = new Dict();
      ref = this.itemlist;
      for (l = 0, len = ref.length; l < len; l++) {
        item = ref[l];
        copy.set(item.key, item.value);
      }
      return copy;
    }

    has(key) {
      var i, index;
      [index, i] = this._lookup(key, hash(key));
      return index >= 0;
    }

    pop() {
      var item;
      if (this.user === 0) {
        throw new KeyError("cannot pop from empty dict");
      }
      item = this.itemlist[this.itemlist.length - 1];
      this.del(key);
      return [item.key, item.value];
    }

    eq(other) {
      var k, ref, v, x, y;
      if (!(other instanceof Dict)) {
        return false;
      }
      if (this.used !== other.used) {
        return false;
      }
      ref = this.iter();
      for (y of ref) {
        [k, v] = y;
        x = other.get(k, null);
        if (x === null || !eq(v, x)) {
          return false;
        }
      }
      return true;
    }

    toString() {
      var items, k, v;
      items = (function() {
        var ref, results, y;
        ref = this.iter();
        results = [];
        for (y of ref) {
          [k, v] = y;
          results.push(`${k}: ${v}`);
        }
        return results;
      }).call(this);
      return `{${items.join(', ')}}`;
    }

  };

  module.exports = {
    hash: hash,
    eq: eq,
    KeyError: KeyError,
    Dict: Dict
  };

}).call(this);

//# sourceMappingURL=dicts.js.map
