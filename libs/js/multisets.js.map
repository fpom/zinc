{
  "version": 3,
  "file": "multisets.js",
  "sourceRoot": "../..",
  "sources": [
    "libs/js/multisets.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "dicts = require \"./dicts\"\n\nclass Mset\n    constructor: (items...) ->\n        \"\"\"\n        coffee> new multisets.Mset(1, 2, 3)\n        Mset{d: Dict{indices: {...}, itemlist: [..., ..., ...], used: 3}}\n        \"\"\"\n        @d = new dicts.Dict()\n        for i in items\n            @d.set(i, @d.get(i, 0) + 1)\n    iter: ->\n        \"\"\"\n        coffee> (i for i from new multisets.Mset(1, 2, 2, 3, 3, 3).iter())\n        [ 1, 2, 3 ]\n        coffee> (i for i from new multisets.Mset().iter())\n        []\n        \"\"\"\n        for [k, n] from @d.iter()\n            yield k\n    iterdup: ->\n        \"\"\"\n        coffee> (i for i from new multisets.Mset(1, 2, 2, 3, 3, 3).iterdup())\n        [ 1, 2, 2, 3, 3, 3 ]\n        coffee> (i for i from new multisets.Mset().iterdup())\n        []\n        \"\"\"\n        for [k, n] from @d.iter()\n            for i in [1..n]\n                yield k\n    hash: ->\n        \"\"\"\n        coffee> a = new multisets.Mset(1, 2, 2, 3, 3, 3)\n        coffee> b = new multisets.Mset(3, 2, 3, 2, 3, 1)\n        coffee> c = new multisets.Mset(1, 2, 3)\n        coffee> a.hash() == b.hash()\n        true\n        coffee> a.hash() == c.hash()\n        false\n        \"\"\"\n        h = 2485867687\n        for [k, n] from @d.iter()\n            h ^= (dicts.hash(k) << 5) + dicts.hash(n)\n        return h\n    eq: (other) ->\n        \"\"\"\n        coffee> a = new multisets.Mset(1, 2, 2, 3, 3, 3)\n        coffee> b = new multisets.Mset(3, 2, 3, 2, 3, 1)\n        coffee> c = new multisets.Mset(1, 2, 3)\n        coffee> a.eq(b)\n        true\n        coffee> a.eq(c)\n        false\n        coffee> (new multisets.Mset()).eq(new multisets.Mset())\n        true\n        \"\"\"\n        if other not instanceof Mset\n            return false\n        return @d.eq(other.d)\n    copy: ->\n        \"\"\"\n        coffee> a = new multisets.Mset(1, 2, 2, 3, 3, 3)\n        coffee> a.eq(a.copy())\n        true\n        coffee> a is a.copy()\n        false\n        \"\"\"\n        return new Mset(@iterdup()...)\n    len: ->\n        \"\"\"\n        coffee> (new multisets.Mset()).len()\n        0\n        coffee> (new multisets.Mset(1, 2, 2, 3, 3, 3)).len()\n        6\n        \"\"\"\n        len = 0\n        for [k, n] from @d.iter()\n            len += n\n        return len\n    add: (other) ->\n        \"\"\"\n        coffee> a = new multisets.Mset(1, 2, 3)\n        coffee> b = new multisets.Mset(2, 3, 3)\n        coffee> a.add(b)\n        coffee> a.eq(new multisets.Mset(1, 2, 2, 3, 3, 3))\n        true\n        \"\"\"\n        for [k, n] from other.d.iter()\n            @d.set(k, @d.get(k, 0) + n)\n        return this\n    sub: (other) ->\n        \"\"\"\n        coffee> a = new multisets.Mset(1, 2, 2, 3, 3, 3)\n        coffee> b = new multisets.Mset(2, 3, 3)\n        coffee> c = new multisets.Mset(1, 2, 3)\n        coffee> d = new multisets.Mset(1, 2, 2, 3, 3, 3)\n        coffee> a.sub(b)\n        coffee> a.eq(c)\n        true\n        coffee> a.sub(c).len()\n        0\n        coffee> c.sub(d).len()\n        0\n        \"\"\"\n        for [k, n] from other.d.iter()\n            m = @d.get(k, 0)\n            if m <= n\n                @d.del(k)\n            else\n                @d.set(k, m - n)\n        return this\n    geq: (other) ->\n        \"\"\"\n        coffee> a = new multisets.Mset(1, 2, 2, 3, 3, 3)\n        coffee> b = new multisets.Mset(2, 3, 3)\n        coffee> c = new multisets.Mset(1, 2, 3)\n        coffee> a.geq(b)\n        true\n        coffee> b.geq(c)\n        false\n        \"\"\"\n        for [k, n] from other.d.iter()\n            if not @d.get(k, 0) >= n\n                return false\n        return true\n    empty: ->\n        \"\"\"\n        coffee> a = new multisets.Mset(1, 2, 2, 3, 3, 3)\n        coffee> b = new multisets.Mset()\n        coffee> a.empty()\n        false\n        coffee> b.empty()\n        true\n        \"\"\"\n        return @d.used == 0\n    count: (value) ->\n        \"\"\"\n        coffee> a = new multisets.Mset(1, 2, 2, 3, 3, 3)\n        coffee> (a.count(i) for i in [0...4])\n        [ 0, 1, 2, 3 ]        \n        \"\"\"\n        return @d.get(value, 0)\n    map: (func) ->\n        \"\"\"\n        coffee> a = new multisets.Mset(1, 2, 2, 3, 3, 3)\n        coffee> b = a.map((k, n) -> [k+1, n+1])\n        coffee> b.eq(new multisets.Mset(2, 2, 3, 3, 3, 4, 4, 4, 4))\n        true\n        \"\"\"\n        copy = new Mset()\n        for [k, n] from @d.iter()\n            copy.d.set(func(k, n)...)\n        return copy\n    toString: ->\n        \"\"\"\n        coffee> console.log new multisets.Mset(1, 2, 2, 3, 3, 3).toString()\n        [1, 2, 2, 3, 3, 3]\n        coffee> console.log new multisets.Mset().toString()\n        []\n        \"\"\"\n        items = (\"#{ v }\" for v from @iterdup())\n        return \"[#{ items.join(', ') }]\"\n\nmodule.exports =\n    Mset: Mset\n"
  ]
}