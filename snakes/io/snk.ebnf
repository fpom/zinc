@@grammar :: snk

@@eol_comments :: /#.*?$/
@@whitespace :: /[\t ]+/

spec =
    [nl]
    "lang" lang:text nl
    declare:{decl}
    "net" net:text ":" nl
        nodes:{trans|place}+
    $
    ;

decl =
    "declare" source:text nl
    ;

place =
    "place" name:text [type:text] ["=" tokens:(","%{ token }+)] nl
    ;

token =
    | number:number
    | text:text
    ;

trans =
    "trans" name:text [guard:/[^:]+/] ":" nl
    arcs:{arc}+
    ;

arc =
    | way:("<" | ">") place:text [mod:arcmod] kind:"var" "=" label:tail nl
    | way:("<" | ">") place:text [mod:arcmod] kind:"val" "=" label:tail nl
    | way:("<" | ">") place:text [mod:arcmod] kind:"expr" "=" label:tail nl
    | way:("<" | ">") place:text [mod:arcmod] tuple:tuple "=" label:tuple nl
    | way:"<" place:text [mod:arcmod] kind:"flush" "=" label:tail nl
    | way:">" place:text [mod:arcmod] kind:"fill" "=" label:tail nl
    ;

arcmod =
    | kind:"?"
    | kind:"!" [guard:code]
    ;

tuple =
    "(" ","%{ tuple | text | number }+ ")"
    ;

tail =
    /.*?$/
    ;

number =
    /[+-]?[0-9]+/
    ;

nl =
    /\s*[\n\r]\s*/
    ;

text = 
    | code:code
    | name:name
    | string:string
    ;

code =
    | '{' TEXTC '}'
    | '(' TEXTP ')'
    | '[' TEXTB ']'
    ;

TEXTC =
    { /([^{}]|\\[{}])*/ | TEXTC }
    ;

TEXTP =
    { /([^()]|\\[()])*/ | TEXTP }
    ;

TEXTB =
    { /([^\[\]]|\\[\[\]])*/ | TEXTB }
    ;

name =
    /[a-zA-Z_][a-zA-Z0-9_]*/
    ;

string =
    | "'''" { /[^'\\]+/ | "''" !"'" | "'" !"'" | /\\(.|\n)/ } "'''"
    | '"""' { /[^"\\]+/ | '""' !'"' | '"' !'"' | /\\(.|\n)/ } '"""'
    | "'" { "\\" /./ | /[^\\\r\n\f']+/ } "'"
    | '"' { "\\" /./ | /[^\\\r\n\f"]+/ } '"'
    ;

